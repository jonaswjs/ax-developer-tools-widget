/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/spec-output/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 488);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (true) {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(9);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (true) {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMProperty = __webpack_require__(14);
var ReactDOMComponentFlags = __webpack_require__(74);

var invariant = __webpack_require__(1);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ?  true ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ?  true ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(17);

var ReactCurrentOwner = __webpack_require__(12);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty)
  // Strip regex characters so we can use it for regex
  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  // Remove hasOwnProperty from the template to make it generic
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
   true ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ?  true ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ?  true ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ?  true ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ?  true ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (true) {
  var ReactDebugTool = __webpack_require__(165);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(72);
var PooledClass = __webpack_require__(15);
var ReactFeatureFlags = __webpack_require__(77);
var ReactReconciler = __webpack_require__(19);
var Transaction = __webpack_require__(33);

var invariant = __webpack_require__(1);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ?  true ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ?  true ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ?  true ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ?  true ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ?  true ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ?  true ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ?  true ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function webpackUniversalModuleDefinition(root, factory) {
   if (( false ? 'undefined' : _typeof2(exports)) === 'object' && ( false ? 'undefined' : _typeof2(module)) === 'object') module.exports = factory(__webpack_require__(64));else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(64)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof2(exports)) === 'object') exports["laxar"] = factory(require("page"));else root["laxar"] = factory(root["page"]);
})(this, function (__WEBPACK_EXTERNAL_MODULE_33__) {
   return (/******/function (modules) {
         // webpackBootstrap
         /******/ // The module cache
         /******/var installedModules = {};
         /******/
         /******/ // The require function
         /******/function __webpack_require__(moduleId) {
            /******/
            /******/ // Check if module is in cache
            /******/if (installedModules[moduleId])
               /******/return installedModules[moduleId].exports;
            /******/
            /******/ // Create a new module (and put it into the cache)
            /******/var module = installedModules[moduleId] = {
               /******/i: moduleId,
               /******/l: false,
               /******/exports: {}
               /******/ };
            /******/
            /******/ // Execute the module function
            /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/
            /******/ // Flag the module as loaded
            /******/module.l = true;
            /******/
            /******/ // Return the exports of the module
            /******/return module.exports;
            /******/
         }
         /******/
         /******/
         /******/ // expose the modules object (__webpack_modules__)
         /******/__webpack_require__.m = modules;
         /******/
         /******/ // expose the module cache
         /******/__webpack_require__.c = installedModules;
         /******/
         /******/ // identity function for calling harmony imports with the correct context
         /******/__webpack_require__.i = function (value) {
            return value;
         };
         /******/
         /******/ // define getter function for harmony exports
         /******/__webpack_require__.d = function (exports, name, getter) {
            /******/if (!__webpack_require__.o(exports, name)) {
               /******/Object.defineProperty(exports, name, {
                  /******/configurable: false,
                  /******/enumerable: true,
                  /******/get: getter
                  /******/ });
               /******/
            }
            /******/
         };
         /******/
         /******/ // getDefaultExport function for compatibility with non-harmony modules
         /******/__webpack_require__.n = function (module) {
            /******/var getter = module && module.__esModule ?
            /******/function getDefault() {
               return module['default'];
            } :
            /******/function getModuleExports() {
               return module;
            };
            /******/__webpack_require__.d(getter, 'a', getter);
            /******/return getter;
            /******/
         };
         /******/
         /******/ // Object.prototype.hasOwnProperty.call
         /******/__webpack_require__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
         };
         /******/
         /******/ // __webpack_public_path__
         /******/__webpack_require__.p = "";
         /******/
         /******/ // Load entry module and return exports
         /******/return __webpack_require__(__webpack_require__.s = 34);
         /******/
      }(
      /************************************************************************/
      /******/[
      /* 0 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* unused harmony export codeIsUnreachable */
         /* unused harmony export state */

         var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
            return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
         } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
         };

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * The *assert* module provides some simple assertion methods for type checks, truthyness tests and guards
          * invalid code paths.
          * When importing the module as `default` module, it is the {@link assert} function itself.
          *
          * When requiring `laxar`, it is available as `laxar.assert`.
          *
          * @module assert
          */

         /**
          * Constructor for an Assertion.
          *
          * @param {*} subject
          *    the object assertions are made for
          * @param {String} [optionalDetails]
          *    details that should be printed in case no specific details are given for an assertion method
          *
          * @constructor
          * @private
          */
         function Assertion(subject, optionalDetails) {
            this.subject_ = subject;
            this.details_ = optionalDetails || null;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Throws an error if the subject is `null` or `undefined`.
          *
          * @param {String} [optionalDetails]
          *    details to append to the error message
          *
          * @return {Assertion}
          *    this instance
          */
         Assertion.prototype.isNotNull = function isNotNull(optionalDetails) {
            if (this.subject_ == null) {
               fail('Expected value to be defined and not null.', optionalDetails || this.details_);
            }

            return this;
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Throws an error if the subject is not of the given type. No error is thrown for `null` or `undefined`.
          *
          * @param {Function} type
          *    the expected type of the subject
          * @param {String} [optionalDetails]
          *    details to append to the error message
          *
          * @return {Assertion}
          *    this instance
          */
         Assertion.prototype.hasType = function hasType(type, optionalDetails) {
            if (typeof this.subject_ === 'undefined' || this.subject_ === null) {
               return this;
            }

            if (typeof type !== 'function') {
               fail('type must be a constructor function. Got ' + (typeof type === 'undefined' ? 'undefined' : _typeof(type)) + '.');
            }

            if (!checkType(this.subject_, type)) {
               var actualString = functionName(this.subject_.constructor);
               var expectedString = functionName(type);

               fail('Expected value to be an instance of "' + expectedString + '" but was "' + actualString + '".', optionalDetails || this.details_);
            }

            return this;
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Throws an error if the subject is no object or the given property is not defined on it.
          *
          * @param {String} property
          *    the property that is expected for the subject
          * @param {String} [optionalDetails]
          *    details to append to the error message
          *
          * @return {Assertion}
          *    this instance
          */
         Assertion.prototype.hasProperty = function hasProperty(property, optionalDetails) {
            if (_typeof(this.subject_) !== 'object') {
               fail('value must be an object. Got ' + _typeof(this.subject_) + '.');
            }

            if (!(property in this.subject_)) {
               fail('value is missing mandatory property "' + property + '".', optionalDetails || this.details_);
            }

            return this;
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function fail(message, optionalDetails) {
            var details = '';
            if (optionalDetails) {
               var detailString = (typeof optionalDetails === 'undefined' ? 'undefined' : _typeof(optionalDetails)) === 'object' ? JSON.stringify(optionalDetails) : optionalDetails;
               details = ' Details: ' + detailString;
            }
            throw new Error('Assertion error: ' + message + details);
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         var TYPE_TO_CONSTRUCTOR = {
            'string': String,
            'number': Number,
            'boolean': Boolean,
            'function': Function
         };
         function checkType(subject, type) {
            if ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) === 'object') {
               return subject instanceof type;
            }

            var actualType = TYPE_TO_CONSTRUCTOR[typeof subject === 'undefined' ? 'undefined' : _typeof(subject)];
            return actualType === type;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         var FUNCTION_NAME_MATCHER = /^function ([^(]*)\(/i;
         function functionName(func) {
            var match = FUNCTION_NAME_MATCHER.exec(func.toString().trim());
            return match[1].length ? match[1] : 'n/a';
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Creates and returns a new `Assertion` instance for the given `subject`.
          *
          * **Note**: this function is no member of the module, but the module itself. Thus when using `assert` via
          * laxar, `assert` is will be no simple object, but this function having the other functions as
          * properties.
          *
          * Example:
          * ```js
          * define( [ 'laxar' ], function( ax ) {
          *    ax.assert( ax.assert ).hasType( Function );
          *    ax.assert.state( typeof ax.assert.codeIsUnreachable === 'function' );
          * } );
          * ```
          *
          * @param {*} subject
          *    the object assertions are made for
          * @param {String} [optionalDetails]
          *    details that should be printed in case no specific details are given when calling an assertion method
          *
          * @return {Assertion}
          *    the assertion instance
          */
         function assert(subject, optionalDetails) {
            return new Assertion(subject, optionalDetails);
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Marks a code path as erroneous by throwing an error when reached.
          *
          * @param {String} [optionalDetails]
          *    details to append to the error message
          */
         assert.codeIsUnreachable = function codeIsUnreachable(optionalDetails) {
            fail('Code should be unreachable!', optionalDetails);
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Throws an error if the given expression is falsy.
          *
          * @param {*} expression
          *    the expression to test for truthyness
          * @param {String} [optionalDetails]
          *    details to append to the error message
          */
         assert.state = function state(expression, optionalDetails) {
            if (!expression) {
               fail('State does not hold.', optionalDetails);
            }
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /* harmony default export */__webpack_exports__["a"] = assert;
         var codeIsUnreachable = assert.codeIsUnreachable;
         var state = assert.state;

         /***/
      },
      /* 1 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";

         Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
         /* harmony export (immutable) */__webpack_exports__["options"] = options;
         /* harmony export (immutable) */__webpack_exports__["forEach"] = forEach;
         /* harmony export (immutable) */__webpack_exports__["path"] = path;
         /* harmony export (immutable) */__webpack_exports__["setPath"] = setPath;
         /* harmony export (immutable) */__webpack_exports__["deepClone"] = deepClone;
         /* harmony export (immutable) */__webpack_exports__["tabulate"] = tabulate;
         var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
            return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
         } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
         };

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /**
          * Utilities for dealing with objects.
          *
          * When requiring `laxar`, it is available as `laxar.object`.
          *
          * @module object
          */

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Returns all properties from `obj` with missing properties completed from `defaults`. If `obj` is `null`
          * or `undefined`, an empty object is automatically created. `obj` and `defaults` are not modified by this
          * function. This is very useful for optional map arguments, resembling some kind of configuration.
          *
          * Example:
          * ```js
          * object.options( { validate: true }, {
          *    validate: false,
          *    highlight: true
          * } );
          * // =>
          * // {
          * //    validate: true,
          * //    highlight: true
          * // }
          * ```
          *
          * @param {Object} obj
          *    the options object to use as source, may be `null` or `undefined`
          * @param {Object} defaults
          *    the defaults to take missing properties from
          *
          * @return {Object}
          *    the completed options object
          */
         function options(obj, defaults) {
            return Object.assign({}, defaults, obj);
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Iterates over the keys of an object and calls the given iterator function for each entry.
          * On each iteration the iterator function is passed the `value`, the `key` and the complete `object` as
          * arguments.
          * If `object` is an array, the native `Array.prototype.forEach` function is called.
          * In this case the keys are the indices of the array.
          *
          * Example:
          * ```
          * object.forEach( { name: Peter, age: 12 }, ( value, key ) => {
          *    console.log( `${key} = ${value}\n` );
          * });
          * // =>
          * // name = Peter
          * // age = 12
          * ```
          *
          * @param {Object} object
          *    the object to run the iterator function on
          * @param {Function} iteratorFunction
          *    the iterator function to run on each key-value pair
          */
         function forEach(object, iteratorFunction) {
            if (Array.isArray(object)) {
               object.forEach(iteratorFunction);
               return;
            }

            for (var key in object) {
               if (hasOwnProperty(object, key)) {
                  iteratorFunction(object[key], key, object);
               }
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Finds a property in a nested object structure by a given path. A path is a string of keys, separated
          * by a dot from each other, used to traverse that object and find the value of interest. An additional
          * default is returned, if otherwise the value would yield `undefined`.
          *
          * Note that `path()` must only be used in situations where all path segments are also valid
          * JavaScript identifiers, and should never be used with user-specified paths:
          *
          *  - there is no mechanism to escape '.' in path segments; a dot always separates keys,
          *  - an empty string as a path segment will abort processing and return the entire sub-object under the
          *    respective position. For historical reasons, the path interpretation differs from that performed by
          *    {@link #setPath()}.
          *
          *
          * Example:
          *
          * ```js
          * object.path( { one: { two: 3 } }, 'one.two' ); // => 3
          * object.path( { one: { two: 3 } }, 'one.three' ); // => undefined
          * object.path( { one: { two: 3 } }, 'one.three', 42 ); // => 42
          * object.path( { one: { two: 3 } }, 'one.' ); // => { two: 3 }
          * object.path( { one: { two: 3 } }, '' ); // => { one: { two: 3 } }
          * object.path( { one: { two: 3 } }, '.' ); // => { one: { two: 3 } }
          * ```
          *
          * @param {Object} obj
          *    the object to traverse
          * @param {String} thePath
          *    the path to search for
          * @param {*} [optionalDefault]
          *    the value to return instead of `undefined` if nothing is found
          *
          * @return {*}
          *    the value at the given path
          */
         function path(obj, thePath) {
            var optionalDefault = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

            var pathArr = thePath.split('.');
            var node = obj;
            var key = pathArr.shift();

            while (key) {
               if (node && (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && hasOwnProperty(node, key)) {
                  node = node[key];
                  key = pathArr.shift();
               } else {
                  return optionalDefault;
               }
            }

            return node;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Sets a property in a nested object structure at a given path to a given value. A path is a string of
          * keys, separated by a dot from each other, used to traverse that object and find the place where the
          * value should be set. Any missing subtrees along the path are created.
          *
          * Note that `setPath()` must only be used in situations where all path segments are also valid
          * JavaScript identifiers, and should never be used with user-specified paths:
          *
          *  - there is no mechanism to escape '.' in path segments; a dot will always create separate keys,
          *  - an empty string as a path segment will create an empty string key in the object graph where missing.
          *    For historical reasons, this path interpretation differs from that performed by #path (see there).
          *
          *
          * Example:
          *
          * ```js
          * object.setPath( {}, 'name.first', 'Peter' ); // => { name: { first: 'Peter' } }
          * object.setPath( {}, 'pets.1', 'Hamster' ); // => { pets: [ null, 'Hamster' ] }
          * object.setPath( {}, '', 'Hamster' ); // => { '': 'Hamster' } }
          * object.setPath( {}, '.', 'Hamster' ); // => { '': { '': 'Hamster' } } }
          * ```
          *
          * @param {Object} obj
          *    the object to modify
          * @param {String} path
          *    the path to set a value at
          * @param {*} value
          *    the value to set at the given path
          *
          * @return {*}
          *    the full object (for chaining)
          */
         function setPath(obj, path, value) {
            var node = obj;
            var pathArr = path.split('.');
            var last = pathArr.pop();

            pathArr.forEach(function (pathFragment, index) {
               if (!node[pathFragment] || _typeof(node[pathFragment]) !== 'object') {
                  var lookAheadFragment = pathArr[index + 1] || last;
                  if (lookAheadFragment.match(/^[0-9]+$/)) {
                     node[pathFragment] = [];
                     fillArrayWithNull(node[pathFragment], parseInt(lookAheadFragment, 10));
                  } else {
                     node[pathFragment] = {};
                  }
               }

               node = node[pathFragment];
            });

            if (Array.isArray(node) && last > node.length) {
               fillArrayWithNull(node, last);
            }

            node[last] = value;

            return obj;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Returns a deep clone of the given object. Note that the current implementation is intended to be used
          * for simple object literals only. There is no guarantee that cloning objects instantiated via
          * constructor function works and cyclic references will lead to endless recursion.
          *
          * @param {*} object
          *    the object to clone
          *
          * @return {*}
          *    the clone
          */
         function deepClone(object) {
            if (!object || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object') {
               return object;
            }

            // Using plain for-loops here for performance-reasons.
            var result = void 0;
            if (Array.isArray(object)) {
               result = [];
               for (var i = 0, length = object.length; i < length; ++i) {
                  result[i] = deepClone(object[i]);
               }
            } else {
               result = {};
               for (var key in object) {
                  if (hasOwnProperty(object, key)) {
                     result[key] = deepClone(object[key]);
                  }
               }
            }

            return result;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Creates a lookup table from a function and a list of inputs to the function.
          *
          * @param {Function} fn
          *    The callback to apply to all inputs
          * @param {String[]|Number[]|Boolean[]} keys
          *    The keys for the lookup table, and inputs to the function.
          *
          * @return {Object}
          *    An object mapping the given keys to their values under `fn`.
          */
         function tabulate(fn, keys) {
            return keys.reduce(function (table, k) {
               table[k] = fn(k);return table;
            }, {});
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         // eslint-disable-next-line valid-jsdoc
         /**
          * Sets all entries of the given array to `null`.
          *
          * @private
          */
         function fillArrayWithNull(arr, toIndex) {
            for (var i = arr.length; i < toIndex; ++i) {
               arr[i] = null;
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         var hasOwnProp = Object.prototype.hasOwnProperty;
         // eslint-disable-next-line valid-jsdoc
         /**
          * @private
          */
         function hasOwnProperty(object, property) {
            return hasOwnProp.call(object, property);
         }

         /***/
      },
      /* 2 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";

         Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
         /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "DEFAULT_FORMATTERS", function () {
            return DEFAULT_FORMATTERS;
         });
         /* harmony export (immutable) */__webpack_exports__["format"] = format;
         /* harmony export (immutable) */__webpack_exports__["createFormatter"] = createFormatter;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Utilities for dealing with strings.
          *
          * When requiring `laxar`, it is available as `laxar.string`.
          *
          * @module string
          */

         //
         var BACKSLASH = '\\';
         var OPENING_BRACKET = '[';
         var CLOSING_BRACKET = ']';
         var INTEGER_MATCHER = /^[0-9]+$/;

         /**
          * A map of all available default format specifiers to their respective formatter function.
          * The following specifiers are available:
          *
          * - `%d` / `%i`: Format the given numeric value as integer. Decimal places are removed
          * - `%f`: Format the given numeric value as floating point value. This specifier supports precision as
          *   sub-specifier (e.g. `%.2f` for 2 decimal places)
          * - `%s`: use simple string serialization using `toString`
          * - `%o`: Format complex objects using `JSON.stringify`
          *
          * @type {Object}
          * @name DEFAULT_FORMATTERS
          */
         var DEFAULT_FORMATTERS = Object.freeze({
            's': function s(input) {
               return '' + input;
            },
            'd': function d(input) {
               return input.toFixed(0);
            },
            'i': function i(input, subSpecifierString) {
               return DEFAULT_FORMATTERS.d(input, subSpecifierString);
            },
            'f': function f(input, subSpecifierString) {
               var precision = subSpecifierString.match(/^\.(\d)$/);
               if (precision) {
                  return input.toFixed(precision[1]);
               }

               return '' + input;
            },
            'o': function o(input) {
               return JSON.stringify(input);
            },
            'default': function _default(input, subSpecifierString) {
               return DEFAULT_FORMATTERS.s(input, subSpecifierString);
            }
         });

         var DEFAULT_FORMATTER = createFormatter(DEFAULT_FORMATTERS);

         ///////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Substitutes all unescaped placeholders in the given string for a given indexed or named value.
          * A placeholder is written as a pair of brackets around the key of the placeholder. An example of an
          * indexed placeholder is `[0]` and a named placeholder would look like this `[replaceMe]`. If no
          * replacement for a key exists, the placeholder will simply not be substituted.
          *
          * Some examples:
          * ```javascript
          * string.format( 'Hello [0], how do you like [1]?', [ 'Peter', 'Cheeseburgers' ] );
          * // => 'Hello Peter, how do you like Cheeseburgers?'
          * ```
          * ```javascript
          * string.format( 'Hello [name] and [partner], how do you like [0]?', [ 'Pizza' ], {
          *    name: 'Hans',
          *    partner: 'Roswita'
          * } );
          * // => 'Hello Hans and Roswita, how do you like Pizza?'
          * ```
          * If a pair of brackets should not be treated as a placeholder, the opening bracket can simply be escaped
          * by backslashes (thus to get an actual backslash in a JavaScript string literal, which is then treated as
          * an escape symbol, it needs to be written as double backslash):
          * ```javascript
          * string.format( 'A [something] should eventually only have \\[x].', {
          *    something: 'checklist'
          * } );
          * // => 'A checklist should eventually only have [x].'
          * ```
          * A placeholder key can be any character string besides `[`, `]` and `:` to keep parsing simple and fast.
          * By using `:` as separator it is possible to provide a type specifier for string serialization or other
          * additional mapping functions for the value to insert. Type specifiers always begin with an `%` and end
          * with the specifier type. Builtin specifiers and their according formatter functions are defined
          * as {@link DEFAULT_FORMATTERS}.
          *
          * When no specifier is provided, by default `%s` is assumed.
          *
          * Example:
          * ```javascript
          * string.format( 'Hello [0:%s], you owe me [1:%.2f] euros.', [ 'Peter', 12.1243 ] );
          * // => 'Hello Peter, you owe me 12.12 euros.'
          * ```
          *
          * Mapping functions should instead consist of simple strings and may not begin with a `%` character. It is
          * advised to use the same naming rules as for simple JavaScript functions. Type specifiers and mapping
          * functions are applied in the order they appear within the placeholder.
          *
          * An example, where we assume that the mapping functions `flip` and `double` where defined by the user
          * when creating the `formatString` function using {@link #createFormatter()}:
          * ```javascript
          * formatString( 'Hello [0:%s:flip], you owe me [1:double:%.2f] euros.', [ 'Peter', 12 ] );
          * // => 'Hello reteP, you owe me 24.00 euros.'
          * ```
          *
          * Note that there currently exist no builtin mapping functions.
          *
          * If a type specifier is used that doesn't exist, an exception is thrown. In contrast to that the use of
          * an unknown mapping function results in a no-op. This is on purpose to be able to use filter-like
          * functions that, in case they are defined for a formatter, transform a value as needed and in all other
          * cases simply are ignored and don't alter the value.
          *
          * @param {String} string
          *    the string to replace placeholders in
          * @param {Array} [optionalIndexedReplacements]
          *    an optional array of indexed replacements
          * @param {Object} [optionalNamedReplacements]
          *    an optional map of named replacements
          *
          * @return {String}
          *    the string with placeholders substituted for their according replacements
          */
         function format(string, optionalIndexedReplacements, optionalNamedReplacements) {
            return DEFAULT_FORMATTER(string, optionalIndexedReplacements, optionalNamedReplacements);
         }

         ///////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Creates a new format function having the same api as {@link #format()}. If the first argument is
          * omitted or `null`, the default formatters for type specifiers are used. Otherwise only the provided map
          * of specifiers is available to the returned format function. Each key of the map is a specifier character
          * where the `%` is omitted and the value is the formatting function. A formatting function receives the
          * value to format (i.e. serialize) and the sub-specifier (if any) as arguments. For example for the format
          * specifier `%.2f` the sub-specifier would be `.2` where for `%s` it would simply be the empty string.
          *
          * Example:
          * ```js
          * const format = string.createFormatter( {
          *    'm': function( value ) {
          *       return value.amount + ' ' + value.currency;
          *    },
          *    'p': function( value, subSpecifier ) {
          *       return Math.pow( value, parseInt( subSpecifier, 10 ) );
          *    }
          * } );
          *
          * format( 'You owe me [0:%m].', [ { amount: 12, currency: 'EUR' } ] );
          * // => 'You owe me 12 EUR.'
          *
          * format( '[0]^3 = [0:%3p]', [ 2 ] );
          * // => '2^3 = 8'
          * ```
          *
          * The second argument is completely additional to the behavior of the default {@link #format()}
          * function. Here a map from mapping function id to actual mapping function can be passed in. Whenever the
          * id of a mapping function is found within the placeholder, that mapping function is called with the
          * current value and its return value is either passed to the next mapping function or rendered
          * instead of the placeholder if there are no more mapping function ids or type specifiers within the
          * placeholder string.
          *
          * ```javascript
          * const format = string.createFormatter( null, {
          *    flip: function( value ) {
          *       return ( '' + s ).split( '' ).reverse().join( '' );
          *    },
          *    double: function( value ) {
          *       return value * 2;
          *    }
          * } );
          *
          * format( 'Hello [0:%s:flip], you owe me [1:double:%.2f] euros.', [ 'Peter', 12 ] );
          * // => 'Hello reteP, you owe me 24.00 euros.'
          * ```
          *
          * @param {Object} typeFormatters
          *    map from format specifier (single letter without leading `%`) to formatting function
          * @param {Object} [optionalValueMappers]
          *    map from mapping identifier to mapping function
          *
          * @return {Function}
          *    a function having the same api as {@link #format()}
          */
         function createFormatter() {
            var typeFormatters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_FORMATTERS;
            var optionalValueMappers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            function format(string, optionalIndexedReplacements, optionalNamedReplacements) {
               if (typeof string !== 'string') {
                  return defaultTypeFormatter(typeFormatters)(string);
               }

               var indexed = Array.isArray(optionalIndexedReplacements) ? optionalIndexedReplacements : [];
               var named = {};
               if (optionalNamedReplacements) {
                  named = optionalNamedReplacements || {};
               } else if (!Array.isArray(optionalIndexedReplacements)) {
                  named = optionalIndexedReplacements || {};
               }

               var chars = string.split('');
               var output = '';
               for (var i = 0, len = chars.length; i < len; ++i) {
                  if (chars[i] === BACKSLASH) {
                     if (i + 1 === len) {
                        throw new Error('Unterminated escaping sequence at index ' + i + ' of string: "' + string + '".');
                     }

                     output += chars[++i];
                  } else if (chars[i] === OPENING_BRACKET) {
                     var closingIndex = string.indexOf(CLOSING_BRACKET, i + 1);
                     if (closingIndex === -1) {
                        throw new Error('Unterminated placeholder at index ' + i + ' of string: "' + string + '".');
                     }

                     var key = string.substring(i + 1, closingIndex);

                     output += replacePlaceholder(key, named, indexed, { string: string, index: i });

                     i = closingIndex;
                  } else {
                     output += chars[i];
                  }
               }
               return output;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function replacePlaceholder(placeholder, named, indexed, context) {
               var specifier = '';
               var subSpecifierString = '';
               var placeholderParts = placeholder.split(':');
               var key = placeholderParts[0];

               var value = void 0;
               if (INTEGER_MATCHER.test(key) && key < indexed.length) {
                  value = indexed[key];
               } else if (key in named) {
                  value = named[key];
               } else {
                  return OPENING_BRACKET + placeholder + CLOSING_BRACKET;
               }

               if (placeholderParts.length > 1) {

                  if (placeholderParts[1].charAt(0) !== '%') {
                     value = defaultTypeFormatter(typeFormatters)(value);
                  }

                  return placeholderParts.slice(1).reduce(function (value, part) {
                     if (part.indexOf('%') === 0) {
                        var specifierMatch = part.match(/^%(.*)(\w)$/);
                        specifier = specifierMatch ? specifierMatch[2] : '';
                        subSpecifierString = specifierMatch ? specifierMatch[1] : '';
                        if (specifier in typeFormatters) {
                           return typeFormatters[specifier](value, subSpecifierString);
                        }
                        var knownSpecifiers = Object.keys(typeFormatters).filter(function (_) {
                           return _ !== 'default';
                        }).map(function (_) {
                           return '%' + _;
                        }).join(', ');

                        throw new Error('Unknown format specifier "%' + specifier + '" for placeholder' + (' at index ' + context.index + ' of string: "' + context.string + '"') + (' (Known specifiers are: ' + knownSpecifiers + ').'));
                     }
                     if (part in optionalValueMappers) {
                        return optionalValueMappers[part](value);
                     }

                     return value;
                  }, value);
               }

               return defaultTypeFormatter(typeFormatters)(value);
            }

            ////////////////////////////////////////////////////////////////////////////////////////////////////////

            return format;
         }

         ///////////////////////////////////////////////////////////////////////////////////////////////////////////

         function defaultTypeFormatter(typeFormatters) {
            if ('default' in typeFormatters) {
               return typeFormatters['default'];
            }

            return DEFAULT_FORMATTERS['default'];
         }

         /***/
      },
      /* 3 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_object__ = __webpack_require__(1);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /* harmony export (immutable) */__webpack_exports__["b"] = findWidgetAreas;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /**
          * The area helper manages widget areas, their DOM representation and their nesting structure.
          *
          * It tracks widget area visibility in order to compile widgets and to attach them to their areas when
          * these become visible.
          * It does not interact with the event bus directly, but is consulted by the visibility event manager to
          * determine area nesting for visibility events.
          */

         function create(page) {

            var exports = {
               isVisible: isVisible,
               setVisibility: setVisibility,
               areasInArea: areasInArea,
               areasInWidget: areasInWidget,
               register: register,
               exists: exists,
               attachWidgets: attachWidgets
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            // all initially visible widgets should be attached together, to reduce jitter and unnecessary DOM ops
            var freeToAttach = false;

            // keep the dom element for each area, to attach widgets to
            var areaToElement = {};

            // track widget adapters waiting for their area to become available so that they may attach to its DOM
            var areaToWaitingAdapters = {};

            // track the visibility status of all areas
            var knownVisibilityState = {};

            // the containing area name for each widget
            var widgetIdToArea = {};
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["forEach"])(page.areas, function (widgets, areaName) {
               widgets.forEach(function (widget) {
                  widgetIdToArea[widget.id] = areaName;
               });
            });

            // for each widget with children, and each widget area with nested areas, store a list of child names
            var areasInAreaMap = {};
            var areasInWidgetMap = {};
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["forEach"])(page.areas, function (widgetEntries, areaName) {
               var containerName = '';
               if (areaName.indexOf('.') !== -1) {
                  var widgetId = areaName.split('.')[0];
                  areasInWidgetMap[widgetId] = areasInWidgetMap[widgetId] || [];
                  areasInWidgetMap[widgetId].push(areaName);
                  containerName = widgetIdToArea[widgetId];
               }
               areasInAreaMap[containerName] = areasInAreaMap[containerName] || [];
               areasInAreaMap[containerName].push(areaName);
            });

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function isVisible(areaName) {
               return knownVisibilityState[areaName] || false;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function setVisibility(areaName, visible) {
               if (visible && freeToAttach) {
                  attachWaitingAdapters(areaName);
               }
               knownVisibilityState[areaName] = visible;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function areasInArea(containerName) {
               return areasInAreaMap[containerName];
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function areasInWidget(widgetId) {
               return areasInWidgetMap[widgetId];
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Register a widget area
             *
             * @param {String} name
             *    the area name as used in the page definition
             * @param {HTMLElement} element
             *    an HTML element representing the widget area
             *
             * @return {Function}
             *    removes the according area from the registry again
             */
            function register(name, element) {
               if (name in areaToElement) {
                  throw new Error('The area "' + name + '" is defined twice in the current layout.');
               }

               areaToElement[name] = element;
               if (freeToAttach && isVisible(name)) {
                  attachWaitingAdapters(name);
               }

               return function () {
                  delete areaToElement[name];
               };
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function exists(name) {
               return name in areaToElement;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function attachWidgets(widgetAdapters) {
               freeToAttach = true;
               widgetAdapters.forEach(function (adapterRef) {
                  var areaName = widgetIdToArea[adapterRef.id];
                  areaToWaitingAdapters[areaName] = areaToWaitingAdapters[areaName] || [];
                  areaToWaitingAdapters[areaName].push(adapterRef);
               });
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["forEach"])(page.areas, function (widgets, areaName) {
                  if (isVisible(areaName)) {
                     attachWaitingAdapters(areaName);
                  }
               });
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            // eslint-disable-next-line valid-jsdoc
            /** @private */
            function attachWaitingAdapters(areaName) {
               var waitingAdapters = areaToWaitingAdapters[areaName];
               if (!waitingAdapters || !waitingAdapters.length) {
                  return;
               }

               var element = areaToElement[areaName];
               if (!element) {
                  return;
               }

               // Make sure that all assets are available before proceeding, so that DOM update happens en bloc.
               Promise.all(waitingAdapters.map(function (adapterRef) {
                  return adapterRef.templatePromise;
               })).then(function (htmlTemplates) {
                  // prepare first/last bootstrap classes for appending widgets
                  waitingAdapters.forEach(function (adapterRef, i) {
                     adapterRef.adapter.domAttachTo(element, htmlTemplates[i]);
                  });
               });

               delete areaToWaitingAdapters[areaName];
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            return exports;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function findWidgetAreas(rootElement) {
            var areas = {};
            Array.from(rootElement.querySelectorAll('[ax-widget-area],[data-ax-widget-area]')).forEach(function (elem) {
               var name = elem.getAttribute('ax-widget-area') || elem.getAttribute('data-ax-widget-area');

               areas[name] = elem;
            });
            return areas;
         }

         /***/
      },
      /* 4 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_object__ = __webpack_require__(1);
         /* unused harmony export levels */
         /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
            return BLACKBOX;
         });
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /* unused harmony export createConsoleChannel */
         function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
               for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
               }return arr2;
            } else {
               return Array.from(arr);
            }
         }

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Module providing the Logger factory.
          *
          * To use the Log service in a widget, request the {@link widget_services#axLog axLog} injection.
          *
          * @module log
          */

         /**
          * Log levels that are available by default, sorted by increasing severity:
          *
          * - TRACE (level 100)
          * - DEBUG (level 200)
          * - INFO (level 300)
          * - WARN (level 400)
          * - ERROR (level 500)
          * - FATAL (level 600)
          *
          * @type {Object}
          * @name levels
          */
         var levels = {
            TRACE: 100,
            DEBUG: 200,
            INFO: 300,
            WARN: 400,
            ERROR: 500,
            FATAL: 600
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Pass this as an additional replacement parameter to a log-method, in order to blackbox your logging call.
          * Blackboxed callers are ignored when logging the source information (file, line).
          *
          * @type {Object}
          * @name BLACKBOX
          */
         var BLACKBOX = {};

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function create(configuration, optionalBrowser) {
            var startChannels = optionalBrowser ? [createConsoleChannel(optionalBrowser)] : [];
            return new Logger(configuration, startChannels);
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         // eslint-disable-next-line valid-jsdoc
         /**
          * A flexible logger.
          *
          * It is recommended to prefer this logger over `console.log` and friends, at least for any log messages that
          * might make their way into production code. For once, this logger is safe to use across browsers and allows
          * to attach additional channels for routing messages to (i.e. to send them to a server process for
          * persistence). If a browser console is available, messages will be logged to that console using the builtin
          * console channel.
          * For testing, a silent mock for this logger is used, making it simple to test the logging behavior of
          * widgets and activities, while avoiding noisy log messages in the test runner output.
          *
          * All messages produced
          *
          * @constructor
          * @private
          */
         function Logger(configuration) {
            var _this = this;

            var channels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

            this.levels = Object.assign({}, levels, configuration.get('logging.levels'));

            this.queueSize_ = 100;
            this.channels_ = channels;
            this.counter_ = 0;
            this.messageQueue_ = [];
            this.threshold_ = 0;
            this.tags_ = {};

            this.levelToName_ = function (levels) {
               var result = {};
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["forEach"])(levels, function (level, levelName) {
                  _this[levelName.toLowerCase()] = function () {
                     for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                     }

                     _this.log.apply(_this, [level].concat(args, [BLACKBOX]));
                  };
                  result[level] = levelName;
               });
               return result;
            }(this.levels);

            this.setLogThreshold(configuration.ensure('logging.threshold'));
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Logs a message. A message may contain placeholders in the form `[#]` where `#` resembles the index
          * within the list of `replacements`. `replacements` are incrementally counted starting at `0`. If the
          * log level is below the configured log threshold, the message is simply discarded.
          *
          * It is recommended not to use this method directly, but instead one of the short cut methods for the
          * according log level.
          *
          * @param {Number} level
          *    the level for this message
          * @param {String} message
          *    the message to log
          * @param {...*} replacements
          *    objects that should replace placeholders within the message
          */
         Logger.prototype.log = function (level, message) {
            for (var _len2 = arguments.length, replacements = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
               replacements[_key2 - 2] = arguments[_key2];
            }

            if (level < this.threshold_) {
               return;
            }

            var blackboxDepth = 0;
            while (replacements[replacements.length - 1] === BLACKBOX) {
               ++blackboxDepth;
               replacements.pop();
            }

            var messageObject = {
               id: this.counter_++,
               level: this.levelToName_[level],
               text: message,
               replacements: replacements,
               time: new Date(),
               tags: this.gatherTags(),
               sourceInfo: gatherSourceInformation(blackboxDepth + 1) // add 1 depth to exclude this function
            };

            this.channels_.forEach(function (channel) {
               channel(messageObject);
            });

            if (this.messageQueue_.length === this.queueSize_) {
               this.messageQueue_.shift();
            }
            this.messageQueue_.push(messageObject);
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Logs a message in log level `TRACE`. See {@link Logger#log} for further information.
          *
          * *Important note*: This method is only available, if no custom log levels were defined via
          * configuration or custom log levels include this method as well.
          *
          * @param {String} message
          *    the message to log
          * @param {...*} replacements
          *    objects that should replace placeholders within the message
          */
         Logger.prototype.trace = function () {};

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Logs a message in log level `DEBUG`. See {@link Logger#log} for further information.
          *
          * *Important note*: This method is only available, if no custom log levels were defined via
          * configuration or custom log levels include this method as well.
          *
          * @param {String} message
          *    the message to log
          * @param {...*} replacements
          *    objects that should replace placeholders within the message
          */
         Logger.prototype.debug = function () {};

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Logs a message in log level `INFO`. See {@link Logger#log} for further information.
          *
          * *Important note*: This method is only available, if no custom log levels were defined via
          * configuration or custom log levels include this method as well.
          *
          * @param {String} message
          *    the message to log
          * @param {...*} replacements
          *    objects that should replace placeholders within the message
          */
         Logger.prototype.info = function () {};

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Logs a message in log level `WARN`. See {@link Logger#log} for further information.
          *
          * *Important note*: This method is only available, if no custom log levels were defined via
          * configuration or custom log levels include this method as well.
          *
          * @param {String} message
          *    the message to log
          * @param {...*} replacements
          *    objects that should replace placeholders within the message
          */
         Logger.prototype.warn = function () {};

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Logs a message in log level `ERROR`. See {@link Logger#log} for further information.
          *
          * *Important note*: This method is only available, if no custom log levels were defined via
          * configuration or custom log levels include this method as well.
          *
          * @param {String} message
          *    the message to log
          * @param {...*} replacements
          *    objects that should replace placeholders within the message
          */
         Logger.prototype.error = function () {};

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Logs a message in log level `FATAL`. See {@link Logger#log} for further information.
          *
          * *Important note*: This method is only available, if no custom log levels were defined via
          * configuration or custom log levels include this method as well.
          *
          * @param {String} message
          *    the message to log
          * @param {...*} replacements
          *    objects that should replace placeholders within the message
          */
         Logger.prototype.fatal = function () {};

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Adds a new channel to forward log messages to. A channel is called synchronously for every log message
          * and can do whatever necessary to handle the message according to its task. Note that blocking or
          * performance critical actions within a channel should always take place asynchronously to prevent from
          * blocking the application. Ideally a web worker is used for heavier background tasks.
          *
          * Each message is an object having the following properties:
          * - `id`: the unique, ascending id of the log message
          * - `level`: the log level of the message in string representation
          * - `text`: the actual message that was logged
          * - `replacements`: the raw list of replacements passed along the message
          * - `time`: JavaScript Date instance when the message was logged
          * - `tags`: A map of all log tags currently set for the logger
          * - `sourceInfo`: if supported, a map containing `file`, `line` and `char` where the logging took place
          *
          * @param {Function} channel
          *    the log channel to add
          */
         Logger.prototype.addLogChannel = function (channel) {
            this.channels_.push(channel);
            this.messageQueue_.forEach(function (entry) {
               channel(entry);
            });
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Removes a log channel and thus stops sending further messages to it.
          *
          * @param {Function} channel
          *    the log channel to remove
          */
         Logger.prototype.removeLogChannel = function (channel) {
            var channelIndex = this.channels_.indexOf(channel);
            if (channelIndex > -1) {
               this.channels_.splice(channelIndex, 1);
            }
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Adds a value for a log tag. If a tag is already known, the value is appended to the existing one using a
          * `;` as separator. Note that no formatting of the value takes place and a non-string value will just have
          * its appropriate `toString` method called.
          *
          * Log tags can be used to mark a set of log messages with a value giving further information on the
          * current logging context. For example laxar sets a tag `'INST'` with a unique-like identifier for the
          * current browser client. If then for example log messages are persisted on a server, messages belonging
          * to the same client can be accumulated.
          *
          * @param {String} tag
          *    the id of the tag to add a value for
          * @param {String} value
          *    the value to add
          */
         Logger.prototype.addTag = function (tag, value) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(tag).hasType(String).isNotNull();

            if (!this.tags_[tag]) {
               this.tags_[tag] = [value];
            } else {
               this.tags_[tag].push(value);
            }
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Sets a value for a log tag. If a tag is already known, the value is overwritten by the given one. Note
          * that no formatting of the value takes place and a non-string value will just have its appropriate
          * `toString` method called. For further information on log tags, see {@link Logger#addTag}.
          *
          * @param {String} tag
          *    the id of the tag to set a value for
          * @param {String} value
          *    the value to set
          */
         Logger.prototype.setTag = function (tag, value) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(tag).hasType(String).isNotNull();

            this.tags_[tag] = [value];
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Removes a log tag. For further information on log tags, see {@link Logger#addTag}.
          *
          * @param {String} tag
          *    the id of the tag to set a value for
          */
         Logger.prototype.removeTag = function (tag) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(tag).hasType(String).isNotNull();

            delete this.tags_[tag];
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Returns a map of all tags. If there are multiple values for the same tag, their values are concatenated
          * using a `;` as separator. For further information on log tags, see {@link Logger#addTag}.
          *
          * @return {Object}
          *    a mapping from tag to its value(s)
          */
         Logger.prototype.gatherTags = function () {
            var tags = {};
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["forEach"])(this.tags_, function (values, tag) {
               tags[tag] = values.join(';');
            });
            return tags;
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Sets the threshold for log messages. Log messages with a lower level will be discarded upon logging.
          *
          * @param {String|Number} threshold
          *    the numeric or the string value of the log level to use as threshold
          */
         Logger.prototype.setLogThreshold = function (threshold) {
            if (typeof threshold === 'string') {
               __WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */].state(threshold.toUpperCase() in this.levels, 'Unsupported log threshold "' + threshold + '".');
               this.threshold_ = this.levels[threshold.toUpperCase()];
            } else {
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(threshold).hasType(Number);
               this.threshold_ = threshold;
            }
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         var EMPTY_CALL_INFORMATION = { file: '?', line: -1, char: -1 };

         function gatherSourceInformation(blackboxDepth) {
            var e = new Error();

            if (!e.stack) {
               try {
                  // IE >= 10 only generates a stack if the error object is really thrown
                  throw new Error();
               } catch (err) {
                  e = err;
               }
               if (!e.stack) {
                  return EMPTY_CALL_INFORMATION;
               }
            }

            var rows = e.stack.split(/[\n]/);
            var interpret = void 0;
            if (rows[0] === 'Error') {
               rows.shift();
               interpret = chromeStackInterpreter;
            } else if (rows[0].indexOf('@') !== -1) {
               interpret = firefoxStackInterpreter;
            } else {
               return EMPTY_CALL_INFORMATION;
            }

            var row = rows[blackboxDepth + 1]; // add 1 depth to exclude this function
            return row ? interpret(row) : EMPTY_CALL_INFORMATION;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         var CHROME_AND_IE_STACK_MATCHER = /\(?([^( ]+):(\d+):(\d+)\)?$/;

         function chromeStackInterpreter(row) {
            var match = CHROME_AND_IE_STACK_MATCHER.exec(row);
            return {
               file: match ? match[1] : '?',
               line: match ? match[2] : -1,
               char: match ? match[3] : -1
            };
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         var FIREFOX_STACK_MATCHER = /@(.+):(\d+)$/;

         function firefoxStackInterpreter(row) {
            var match = FIREFOX_STACK_MATCHER.exec(row);
            return {
               file: match ? match[1] : '?',
               line: match ? match[2] : -1,
               char: -1
            };
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function createConsoleChannel(browser) {

            return function log(messageObject) {
               var browserConsole = browser.console();
               if (!browserConsole) {
                  return;
               }

               var level = messageObject.level,
                   text = messageObject.text,
                   replacements = messageObject.replacements,
                   _messageObject$source = messageObject.sourceInfo,
                   file = _messageObject$source.file,
                   line = _messageObject$source.line;

               var logMethod = level.toLowerCase();
               if (!(logMethod in browserConsole) || logMethod === 'trace') {
                  // In console objects trace doesn't define a valid log level but is used to print stack traces. We
                  // thus need to change it something different.
                  logMethod = 'log';
               }

               if (!(logMethod in browserConsole)) {
                  return;
               }

               var callArgs = [level + ': '].concat(mergeTextAndReplacements(text, replacements)).concat(['(@ ' + file + ':' + line + ')']);

               browserConsole[logMethod].apply(browserConsole, _toConsumableArray(callArgs));
            };
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function mergeTextAndReplacements(text, replacements) {
            var parts = [];
            var pos = 0;
            var buffer = '';

            while (pos < text.length) {
               var character = text.charAt(pos);

               switch (character) {
                  case '\\':
                     {
                        ++pos;
                        if (pos === text.length) {
                           throw new Error('Unterminated string: "' + text + '"');
                        }

                        buffer += text.charAt(pos);
                        break;
                     }
                  case '[':
                     {
                        parts.push(buffer);
                        buffer = '';

                        var end = text.indexOf(']', pos);
                        if (end === -1) {
                           throw new Error('Unterminated replacement at character ' + pos + ': "' + text + '"');
                        }

                        var replacementIndex = parseInt(text.substring(pos + 1, end), 10);

                        parts.push(replacements[replacementIndex]);
                        pos = end;

                        break;
                     }
                  default:
                     {
                        buffer += character;
                        break;
                     }
               }

               ++pos;
            }

            if (buffer.length > 0) {
               parts.push(buffer);
            }

            return parts;
         }

         /***/
      },
      /* 5 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_object__ = __webpack_require__(1);
         /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
            return FLAT;
         });
         /* unused harmony export COMPACT */
         /* harmony export (immutable) */__webpack_exports__["b"] = createProvider;
         /* harmony export (immutable) */__webpack_exports__["a"] = createCollector;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /** Use to access the flattened page model, where compositions have been expanded. */
         var FLAT = 'FLAT';
         /** Use to access the compact page/composition model, where compositions have not been expanded. */
         var COMPACT = 'COMPACT';

         function createProvider(collector) {

            return {

               /** Start collecting page/composition data. */
               enable: function enable() {
                  collector.enable();
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /** Stop collecting page/composition data and clean up. */
               disable: function disable() {
                  collector.disable();
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * Access the current page information.
                * Everything is returned as a copy, sothis object cannot be used to modify the host application.
                *
                * @return {Object}
                *   the current page information, with the following properties:
                *    - `pageDefinitions` {Object}
                *       both the original as well as the expanded/flattened page model for each available page
                *    - `compositionDefinitions` {Object}
                *       both the original as well as the expanded/flattened composition model for each composition of
                *       any available page
                *    - `widgetDescriptors` {Object}
                *       the widget descriptor for each widget that was referenced
                *    - `pageReference` {String}
                *       the reference for the current page, to lookup page/composition definitions
                */
               current: function current() {
                  return collector.current();
               },

               /**
                * Add a listener function to be notified whenever the page information changes.
                * As a side-effect, this also automatically enables collecting page/composition data.
                * Each listener will be delivered its own copy of the page information.
                *
                * @param {Function} _
                *    The listener to add. Will be called with the current page information whenever that changes.
                */
               addListener: function addListener(_) {
                  collector.addListener(_);
               },

               /**
                * Remove a page information listener function.
                *
                * @param {Function} _
                *    The listener to remove
                */
               removeListener: function removeListener(_) {
                  collector.removeListener(_);
               }
            };
         }

         function createCollector(configuration, log) {

            var enabled = configuration.get('tooling.enabled');

            var listeners = [];

            var currentPageInfo = {
               pageReference: null,
               pageDefinitions: {},
               compositionDefinitions: {},
               widgetDescriptors: {}
            };

            return {

               // eslint-disable-next-line valid-jsdoc
               /** Collect a widget descriptor. */
               collectWidgetDescriptor: function collectWidgetDescriptor(ref, descriptor) {
                  if (!enabled) {
                     return;
                  }
                  currentPageInfo.widgetDescriptors[ref] = descriptor;
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               // eslint-disable-next-line valid-jsdoc
               /**
                * Collect a page definition.
                * The page is deep-copied right away, and may safely be modified by the caller.
                */
               collectPageDefinition: function collectPageDefinition(ref, page, type) {
                  if (!enabled) {
                     return;
                  }
                  var definitions = currentPageInfo.pageDefinitions;
                  definitions[ref] = definitions[ref] || {
                     FLAT: null,
                     COMPACT: null
                  };
                  definitions[ref][type] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["deepClone"])(page);
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               // eslint-disable-next-line valid-jsdoc
               /**
                * Collect a composition definition.
                * The composition is deep-copied right away, and may safely be modified by the caller.
                */
               collectCompositionDefinition: function collectCompositionDefinition(pageRef, compositionInstanceId, composition, type) {
                  if (!enabled) {
                     return;
                  }
                  var definitions = currentPageInfo.compositionDefinitions;
                  var definitionsByInstance = definitions[pageRef] = definitions[pageRef] || {};
                  definitionsByInstance[compositionInstanceId] = definitionsByInstance[compositionInstanceId] || {
                     FLAT: null,
                     COMPACT: null
                  };
                  definitionsByInstance[compositionInstanceId][type] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["deepClone"])(composition);
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               // eslint-disable-next-line valid-jsdoc
               /**
                * Collect information about the current page, and inform all listeners.
                * Each listener will receive its own copy of the page information.
                */
               collectCurrentPage: function collectCurrentPage(ref) {
                  if (!enabled) {
                     return;
                  }
                  currentPageInfo.pageReference = ref;
                  listeners.forEach(function (listener) {
                     listener(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["deepClone"])(currentPageInfo));
                  });
                  cleanup();
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               enable: function enable() {
                  enabled = true;
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               disable: function disable() {
                  enabled = false;
                  currentPageInfo.pageReference = null;
                  currentPageInfo.widgetDescriptors = {};
                  cleanup();
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               addListener: function addListener(listener) {
                  enabled = true;
                  listeners.push(listener);
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               removeListener: function removeListener(listener) {
                  listeners = listeners.filter(function (_) {
                     return _ !== listener;
                  });
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               current: function current() {
                  if (!enabled) {
                     log.warn('laxar page tooling: trying to access data, but collecting it was never enabled');
                  }
                  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["deepClone"])(currentPageInfo);
               }
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function cleanup() {
               var currentRef = currentPageInfo.pageReference;
               ['pageDefinitions', 'compositionDefinitions'].forEach(function (collection) {
                  Object.keys(currentPageInfo[collection]).filter(function (ref) {
                     return ref !== currentRef;
                  }).forEach(function (ref) {
                     delete currentPageInfo[collection][ref];
                  });
               });
            }
         }

         /***/
      },
      /* 6 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";

         Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
         /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "technology", function () {
            return technology;
         });
         /* harmony export (immutable) */__webpack_exports__["bootstrap"] = bootstrap;
         var _slicedToArray = function () {
            function sliceIterator(arr, i) {
               var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                     _arr.push(_s.value);if (i && _arr.length === i) break;
                  }
               } catch (err) {
                  _d = true;_e = err;
               } finally {
                  try {
                     if (!_n && _i["return"]) _i["return"]();
                  } finally {
                     if (_d) throw _e;
                  }
               }return _arr;
            }return function (arr, i) {
               if (Array.isArray(arr)) {
                  return arr;
               } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
               } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
               }
            };
         }();

         function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
               for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
               }return arr2;
            } else {
               return Array.from(arr);
            }
         }

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Module for the plain widget adapter factory.
          * In LaxarJS _plain_ widgets are defined as widgets without dependency to a specific view library or
          * framwork, and instead would be implemented using simple DOM access and manipulation.
          *
          * A developer will never call any of the API of this module.
          * The documentation solely exists as a blueprint for custom widget adapters and to explain certain concepts.
          *
          * @module plain_adapter
          */

         var technology = 'plain';

         var noOp = function noOp() {};

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Initializes the adapter module and returns a factory for plain widgets.
          * Note that the plain adapter doesn't need all the provided arguments, but they are listed here for
          * documentation purposes.
          *
          * @param {Object} artifacts
          *    the artifacts available to this adapter factory
          * @param {Object} artifacts.widgets
          *    all widgets, that are implemented in the adapter's technology
          * @param {Object} artifacts.controls
          *    all controls, that are implemented in the adapter's technology
          * @param {Object} services
          *    a selection of services adapter implementations may need to fulfill their task
          * @param {AdapterUtilities} services.adapterUtilities
          *    common utilities, that may be useful to a widget adapter
          * @param {ArtifactProvider} services.artifactProvider
          *    the artifact provider instance
          * @param {Configuration} services.configuration
          *    access to the application configuration
          * @param {EventBus} services.globalEventBus
          *    the global event bus.
          *    Note that an adapter should not sent any events by itself.
          *    It may instead be necessary that the adapter makes the event bus globally available to its widgets (for
          *    example like the AngularJS 1.x adapter), or that it registers an inspector
          * @param {Heartbeat} services.heartbeat
          *    the heartbeat instance.
          *    Depending on the underlying view technology (like AngularJS 1.x) it may be important to get notified
          *    when to re-render the user interface.
          *    For that reason an adapter can register a callback at the heartbeat, that gets called after all events
          *    of the current cycle were processed
          * @param {Log} services.log
          *    the global log instance
          * @param {StorageFactory} services.storage
          *    the global storage factory api
          * @param {Tooling} services.tooling
          *    access to the tooling api
          * @param {HTMLElement} anchorElement
          *    the DOM node the laxar application is bootstrapped on.
          *    An adapter should never try to access DOM nodes that are not the `anchorElement` or any of its children,
          *    since they are not under control of this LaxarJS application.
          *
          * @return {PlainAdapterFactory}
          *    the factory for plain widget adapters
          */
         function bootstrap(artifacts, _ref) {
            var artifactProvider = _ref.artifactProvider,
                adapterUtilities = _ref.adapterUtilities;

            /**
             * A factory for plain widget adapters.
             *
             * @constructor
             * @name PlainAdapterFactory
             */
            return {
               create: create
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Creates a new adapter instance for the given widget environment.
             *
             * @param {Object} environment
             *    the environment for the widget to create and manage
             * @param {HTMLElement} environment.anchorElement
             *    the DOM node that the widget's DOM fragment should be inserted into
             * @param {String} environment.name
             *    the name of the widget to load, exactly as specified by the widget descriptor
             * @param {widget_services} environment.services
             *    the services for this widget instance
             * @param {Function} environment.provideServices
             *    a function that the adapter must call with a map of all to-be-injected services, just before
             *    creating the controller
             *
             * @return {Object}
             *    the adapter instance
             *
             * @memberof PlainAdapterFactory
             */
            function create(_ref2) {
               var widgetName = _ref2.widgetName,
                   anchorElement = _ref2.anchorElement,
                   services = _ref2.services,
                   provideServices = _ref2.provideServices;

               var onDomAvailable = null;
               var domAttached = false;

               var provider = artifactProvider.forWidget(widgetName);

               return Promise.all([provider.descriptor(), provider.module()]).then(createController, function () {
                  return adapterUtilities.unknownWidget({ technology: technology, widgetName: widgetName });
               }).then(function () {
                  return {
                     domAttachTo: domAttachTo,
                     domDetach: domDetach
                  };
               });

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function createController(_ref3) {
                  var _ref4 = _slicedToArray(_ref3, 2),
                      descriptor = _ref4[0],
                      module = _ref4[1];

                  services.axWithDom = function (callback) {
                     if (domAttached) {
                        callback(anchorElement);
                     }
                  };
                  var injections = (module.injections || []).map(function (injection) {
                     if (!(injection in services)) {
                        throw adapterUtilities.unknownInjection({ technology: technology, injection: injection, widgetName: widgetName });
                     }
                     if (injection === 'axWithDom' && descriptor.integration.type === 'activity') {
                        throw adapterUtilities.activityAccessingDom({ technology: technology, injection: injection, widgetName: widgetName });
                     }
                     return services[injection];
                  });

                  provideServices(services);

                  var _ref5 = module.create.apply(module, _toConsumableArray(injections)) || {};

                  var _ref5$onDomAvailable = _ref5.onDomAvailable;
                  onDomAvailable = _ref5$onDomAvailable === undefined ? noOp : _ref5$onDomAvailable;
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function domAttachTo(areaElement, htmlTemplate) {
                  if (htmlTemplate === null) {
                     return;
                  }
                  anchorElement.innerHTML = htmlTemplate;
                  areaElement.appendChild(anchorElement);
                  domAttached = true;
                  onDomAvailable(anchorElement);
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function domDetach() {
                  var parent = anchorElement.parentNode;
                  if (parent) {
                     parent.removeChild(anchorElement);
                  }
                  domAttached = false;
               }
            }
         }

         /***/
      },
      /* 7 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0_page__ = __webpack_require__(33);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_page___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_page__);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__configuration__ = __webpack_require__(17);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__browser__ = __webpack_require__(16);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__log__ = __webpack_require__(4);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__runtime_event_bus__ = __webpack_require__(18);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__adapter_utilities__ = __webpack_require__(14);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__artifact_provider__ = __webpack_require__(15);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_8__loaders_control_loader__ = __webpack_require__(8);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_9__loaders_css_loader__ = __webpack_require__(9);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_10__loaders_layout_loader__ = __webpack_require__(10);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_11__loaders_page_loader__ = __webpack_require__(11);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_12__loaders_theme_loader__ = __webpack_require__(12);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_13__loaders_widget_loader__ = __webpack_require__(13);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_14__storage__ = __webpack_require__(26);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_15__timer__ = __webpack_require__(27);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_16__flow_controller__ = __webpack_require__(19);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_17__flow_service__ = __webpack_require__(20);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_18__heartbeat__ = __webpack_require__(21);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_19__page_service__ = __webpack_require__(24);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_20__pagejs_router__ = __webpack_require__(25);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_21__locale_event_manager__ = __webpack_require__(23);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_22__visibility_event_manager__ = __webpack_require__(28);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_23__widget_services__ = __webpack_require__(29);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_24__tooling_tooling__ = __webpack_require__(32);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         function create(configurationSource, assets) {

            var configurationDefaults = {
               baseHref: undefined,
               eventBusTimeoutMs: 120 * 1000,
               router: {
                  query: {
                     enabled: false
                  }
                  // 'pagejs' is not configured here:
                  // any deviation from the page.js library defaults must be set by the application
               },
               flow: {
                  entryPoint: {
                     target: 'default',
                     parameters: {}
                  }
               },
               i18n: {
                  fallback: 'en',
                  strict: false,
                  locales: {
                     'default': 'en'
                  }
               },
               logging: {
                  levels: {},
                  threshold: 'INFO'
               },
               name: 'unnamed',
               theme: 'default',
               storagePrefix: undefined,
               tooling: {
                  enabled: false
               }
            };

            var adapterUtilities = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__adapter_utilities__["a" /* create */])();

            var configuration = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__configuration__["a" /* create */])(configurationSource, configurationDefaults);

            var browser = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__browser__["a" /* create */])();
            var log = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__log__["a" /* create */])(configuration, browser);
            var collectors = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_24__tooling_tooling__["a" /* createCollectors */])(configuration, log);

            var storage = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_14__storage__["a" /* create */])(configuration, browser);
            var timer = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_15__timer__["a" /* create */])(log, storage);

            var artifactProvider = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__artifact_provider__["a" /* create */])(assets, browser, configuration, log);

            var heartbeat = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_18__heartbeat__["a" /* create */])();

            // MSIE Bug we have to wrap setTimeout to pass assertion
            var timeoutFn = function timeoutFn(f, t) {
               return setTimeout(f, t);
            };
            var globalEventBus = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__runtime_event_bus__["a" /* create */])(configuration, log, heartbeat.onNext, timeoutFn);

            var cssLoader = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__loaders_css_loader__["a" /* create */])();
            var themeLoader = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_12__loaders_theme_loader__["a" /* create */])(artifactProvider, cssLoader);
            var layoutLoader = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__loaders_layout_loader__["a" /* create */])(artifactProvider, cssLoader);
            var pageLoader = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__loaders_page_loader__["a" /* create */])(artifactProvider, collectors.pages);
            var controlLoader = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__loaders_control_loader__["a" /* create */])(artifactProvider, cssLoader);
            var widgetServices = {
               forWidget: function forWidget() {
                  __WEBPACK_IMPORTED_MODULE_1__utilities_assert__["a" /* default */].codeIsUnreachable('Using widget services before they are available');
               }
            };
            var widgetLoader = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__loaders_widget_loader__["a" /* create */])(log, artifactProvider, controlLoader, cssLoader, collectors.pages, function () {
               var _widgetServices;

               return (_widgetServices = widgetServices).forWidget.apply(_widgetServices, arguments);
            });

            var localeManager = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_21__locale_event_manager__["a" /* create */])(globalEventBus, configuration);
            var visibilityManager = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_22__visibility_event_manager__["a" /* create */])(globalEventBus);
            var pageService = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_19__page_service__["a" /* create */])(globalEventBus, pageLoader, layoutLoader, widgetLoader, localeManager, visibilityManager, collectors.pages);

            var router = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_20__pagejs_router__["a" /* create */])(__WEBPACK_IMPORTED_MODULE_0_page___default.a, browser, configuration);

            var flowController = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16__flow_controller__["a" /* create */])(artifactProvider, configuration, globalEventBus, log, pageService, router, timer);
            var flowService = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__flow_service__["a" /* create */])(flowController);

            var toolingProviders = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_24__tooling_tooling__["b" /* createProviders */])(collectors);

            widgetServices = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_23__widget_services__["a" /* create */])(artifactProvider, configuration, controlLoader, globalEventBus, flowService, log, heartbeat, pageService, storage, toolingProviders);

            return {
               adapterUtilities: adapterUtilities,
               artifactProvider: artifactProvider,
               configuration: configuration,
               cssLoader: cssLoader,
               flowController: flowController,
               flowService: flowService,
               globalEventBus: globalEventBus,
               heartbeat: heartbeat,
               layoutLoader: layoutLoader,
               log: log,
               pageService: pageService,
               storage: storage,
               themeLoader: themeLoader,
               timer: timer,
               toolingProviders: toolingProviders,
               widgetLoader: widgetLoader
            };
         }

         /***/
      },
      /* 8 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_string__ = __webpack_require__(2);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         var _slicedToArray = function () {
            function sliceIterator(arr, i) {
               var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                     _arr.push(_s.value);if (i && _arr.length === i) break;
                  }
               } catch (err) {
                  _d = true;_e = err;
               } finally {
                  try {
                     if (!_n && _i["return"]) _i["return"]();
                  } finally {
                     if (_d) throw _e;
                  }
               }return _arr;
            }return function (arr, i) {
               if (Array.isArray(arr)) {
                  return arr;
               } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
               } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
               }
            };
         }();

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * The control loader helps to load control assets and implementations.
          *
          * @module control_loader
          */

         function create(artifactProvider, cssLoader) {

            var notDeclaredMessage = 'Tried to load control reference [0] without declaration in widget.json.\nDetails: [1]';
            var errorInfoLink = 'https://github.com/LaxarJS/laxar/blob/master/docs/manuals/providing_controls.md#compatibility';

            var aliases = {};
            var modules = {};

            /**
             * @constructor
             * @name ControlLoader
             */
            return {
               load: load,
               provide: provide
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Provides the implementation module of the given control, for manual instantiation by a widget.
             *
             * Because the method must return synchronously, it may only be called for controls that have been
             * loaded before (using {@link #load()})!
             * For controls that are correctly listed in the `controls` section of the `widget.json`, this is ensured
             * by the widget loader.
             *
             * @param {String} controlRef
             *   a valid control reference as used in the `widget.json`
             *
             * @return {*}
             *   the module for the requested control reference
             *
             * @memberof ControlLoader
             */
            function provide(controlRef) {
               var module = modules[aliases[controlRef]];
               if (!module) {
                  var message = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_string__["format"])('axControls: ' + notDeclaredMessage, [controlRef, errorInfoLink]);
                  throw new Error(message);
               }
               return module;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Fetches the descriptor for a given control reference, and saves it as a side-effect.
             * This is part of the internal API used by the widget loader.
             *
             * This process must be completed before the descriptor or the module for a control can be provided.
             * For this reason, `load` is called by the widget-loader, using information from the `widget.json` file.
             *
             * @param {String} controlRef
             *   a valid control reference as used in the `widget.json`
             *
             * @return {Promise}
             *   a promise for the (fetched or synthesized) control descriptor
             *
             * @memberof ControlLoader
             */
            function load(controlRef) {
               var _artifactProvider$for = artifactProvider.forControl(controlRef),
                   assetUrlForTheme = _artifactProvider$for.assetUrlForTheme,
                   descriptor = _artifactProvider$for.descriptor,
                   module = _artifactProvider$for.module;

               return Promise.all([descriptor(), module()]).then(function (_ref) {
                  var _ref2 = _slicedToArray(_ref, 2),
                      descriptor = _ref2[0],
                      module = _ref2[1];

                  var name = descriptor.name;

                  aliases[controlRef] = name;
                  modules[name] = module;
                  return assetUrlForTheme(descriptor.styleSource || 'css/' + name + '.css').then(function (url) {
                     if (url) {
                        cssLoader.load(url);
                     }
                  }).then(function () {
                     return descriptor;
                  });
               });
            }
         }

         /***/
      },
      /* 9 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony export (immutable) */
         __webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         function create() {
            var mergedCssFileLoaded = Array.from(document.getElementsByTagName('link')).some(function (link) {
               return link.hasAttribute('data-ax-merged-css');
            });

            if (mergedCssFileLoaded) {
               return {
                  load: function load() {}
               };
            }

            var loadedFiles = [];
            return {
               /**
                * If not already loaded, loads the given file into the current page by appending a `link` element to
                * the document's `head` element.
                *
                * @param {String} url
                *    the url of the css file to load. If `null`, loading is skipped
                */
               load: function load(url) {
                  if (!loadedFiles.includes(url)) {
                     var element = document.createElement('link');
                     element.type = 'text/css';
                     element.id = 'cssLoaderStyleSheet' + loadedFiles.length;
                     element.rel = 'stylesheet';
                     element.href = url;
                     document.getElementsByTagName('head')[0].appendChild(element);

                     loadedFiles.push(url);
                  }
               }
            };
         }

         /***/
      },
      /* 10 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony export (immutable) */
         __webpack_exports__["a"] = create;
         var _slicedToArray = function () {
            function sliceIterator(arr, i) {
               var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                     _arr.push(_s.value);if (i && _arr.length === i) break;
                  }
               } catch (err) {
                  _d = true;_e = err;
               } finally {
                  try {
                     if (!_n && _i["return"]) _i["return"]();
                  } finally {
                     if (_d) throw _e;
                  }
               }return _arr;
            }return function (arr, i) {
               if (Array.isArray(arr)) {
                  return arr;
               } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
               } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
               }
            };
         }();

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         function create(artifactProvider, cssLoader) {
            return {
               load: function load(layoutRef) {
                  var _artifactProvider$for = artifactProvider.forLayout(layoutRef),
                      descriptor = _artifactProvider$for.descriptor,
                      assetForTheme = _artifactProvider$for.assetForTheme,
                      assetUrlForTheme = _artifactProvider$for.assetUrlForTheme;

                  return descriptor().then(function (_ref) {
                     var name = _ref.name,
                         templateSource = _ref.templateSource,
                         styleSource = _ref.styleSource;
                     return Promise.all([assetForTheme(templateSource || name + ".html"), assetUrlForTheme(styleSource || "css/" + name + ".css"), Promise.resolve(name)]);
                  }).then(function (_ref2) {
                     var _ref3 = _slicedToArray(_ref2, 3),
                         html = _ref3[0],
                         cssUrl = _ref3[1],
                         name = _ref3[2];

                     if (cssUrl) {
                        cssLoader.load(cssUrl);
                     }
                     return { name: name, className: name + "-layout", html: html };
                  });
               }
            };
         }

         /***/
      },
      /* 11 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__tooling_pages__ = __webpack_require__(5);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Creates and returns a new page loader instance.
          *
          * @param {ArtifactProvider} artifactProvider
          *    an ArtifactProvider to load application assets
          * @param {PagesCollector} pagesCollector
          *    a tooling collector to consume page and composition information
          *
          * @return {PageLoader}
          *    a page loader instance
          *
          * @private
          */
         function create(artifactProvider, pagesCollector) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(artifactProvider).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(pagesCollector).isNotNull();

            return { load: load };

            /**
             * Loads a pre-assembled page definition. References to compositions, widgets and layouts have been
             * resolved at build-time. Schema-validation for the page itself and for the contained feature
             * configurations has also already been performed.
             *
             * @param {String} pageRef
             *    the page to load. Usually a path relative to the page base path, with the `.json` suffix omitted
             *
             * @return {Promise}
             *    the result promise
             *
             * @private
             */
            function load(pageRef) {
               var _artifactProvider$for = artifactProvider.forPage(pageRef),
                   definition = _artifactProvider$for.definition;

               return definition().then(function (pageDefinition) {
                  pagesCollector.collectPageDefinition(pageRef, pageDefinition, __WEBPACK_IMPORTED_MODULE_1__tooling_pages__["c" /* FLAT */]);
                  return pageDefinition;
               });
            }
         }

         /***/
      },
      /* 12 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony export (immutable) */
         __webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         function create(artifactProvider, cssLoader) {
            return {
               load: function load() {
                  var themeProvider = artifactProvider.forTheme();
                  themeProvider.descriptor(function (descriptor) {
                     return themeProvider.assetUrl(descriptor.styleSource || 'css/theme.css').then(cssLoader.load);
                  });
               }
            };
         }

         /***/
      },
      /* 13 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_string__ = __webpack_require__(2);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         var _slicedToArray = function () {
            function sliceIterator(arr, i) {
               var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                     _arr.push(_s.value);if (i && _arr.length === i) break;
                  }
               } catch (err) {
                  _d = true;_e = err;
               } finally {
                  try {
                     if (!_n && _i["return"]) _i["return"]();
                  } finally {
                     if (_d) throw _e;
                  }
               }return _arr;
            }return function (arr, i) {
               if (Array.isArray(arr)) {
                  return arr;
               } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
               } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
               }
            };
         }();

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         var TYPE_WIDGET = 'widget';
         var TYPE_ACTIVITY = 'activity';

         var ID_SEPARATOR = '-';

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         var noOp = function noOp() {};

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Create a generic widget loader that can load widgets and activities implemented in various technologies
          * by using appropriate adapters.
          *
          * @param {Log} log
          *    log instance to use for technology compatibility warnings
          * @param {ArtifactProvider} artifactProvider
          *    an artifact provider for looking up widget descriptors and assets
          * @param {ControlLoader} controlLoader
          *    helps loading controls and their assets
          * @param {CssLoader} cssLoader
          *    helps loading widget- and control-stylesheets during development
          * @param {PagesCollector} pagesCollector
          *    used for inspection tools
          * @param {Function} servicesForWidget
          *    a factory method to create widget-specific services
          *
          * @return {WidgetLoader}
          *    a new widget loader
          */
         function create(log, artifactProvider, controlLoader, cssLoader, pagesCollector, servicesForWidget) {

            var widgetAdapters = {};

            /**
             * @name WidgetLoader
             * @constructor
             */
            return {
               load: load,

               /**
                * Register support for integration technologies.
                *
                * @param {Object} adapters
                *    a map of widget adapters by technology to be registered with this loader
                *
                * @memberof WidgetLoader
                */
               registerWidgetAdapters: function registerWidgetAdapters(adapters) {
                  Object.assign(widgetAdapters, adapters);
               }
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Load a widget using an appropriate adapter
             *
             * First, get the given widget's descriptor to validate and instantiate the widget features.
             * Then, instantiate a widget adapter matching the widget's technology. Using the adapter, create the
             * widget controller. The adapter is returned and can be used to attach the widget to the DOM, or to
             * destroy it.
             *
             * @param {Object} widgetConfiguration
             *    a widget instance configuration (as used in page definitions) to instantiate the widget from
             * @param {Object} [optionalOptions]
             *    map of additonal options
             * @param {Function} [optionalOptions.whenServicesAvailable]
             *    a callback that will be invoked just before the controller is set up. It receives an object of named,
             *    widget-specific injections as arguments allowing clients and tools such as laxar-mocks to tap into
             *   the provided services
             *
             * @return {Promise} a promise for a widget adapter, with an already instantiated controller
             *
             * @memberof WidgetLoader
             */
            function load(widgetConfiguration) {
               var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                   _ref$whenServicesAvai = _ref.whenServicesAvailable,
                   whenServicesAvailable = _ref$whenServicesAvai === undefined ? noOp : _ref$whenServicesAvai;

               var widgetArtifactProvider = artifactProvider.forWidget(widgetConfiguration.widget);

               return widgetArtifactProvider.descriptor().then(function (descriptor) {
                  // The control-descriptors must be loaded prior to controller creation.
                  // This allows the widget controller to synchronously instantiate controls.
                  return Promise.all((descriptor.controls || []).map(controlLoader.load)).then(function (controlDescriptors) {
                     controlDescriptors.forEach(checkTechnologyCompatibility(descriptor));
                     return descriptor;
                  });
               }).then(function (descriptor) {

                  pagesCollector.collectWidgetDescriptor(widgetConfiguration.widget, descriptor);

                  var _descriptor$integrati = descriptor.integration,
                      type = _descriptor$integrati.type,
                      technology = _descriptor$integrati.technology;

                  var widgetName = descriptor.name;
                  if (type !== TYPE_WIDGET && type !== TYPE_ACTIVITY) {
                     throwError(widgetConfiguration, 'Unknown integration type "' + type + '"');
                  }

                  var features = widgetConfiguration.features || {};
                  var anchorElement = document.createElement('DIV');
                  anchorElement.className = widgetName;
                  anchorElement.id = 'ax' + ID_SEPARATOR + widgetConfiguration.id;

                  var adapterFactory = widgetAdapters[technology];
                  var _adapterFactory$servi = adapterFactory.serviceDecorators,
                      serviceDecorators = _adapterFactory$servi === undefined ? function () {
                     return {};
                  } : _adapterFactory$servi;

                  var _servicesForWidget = servicesForWidget(descriptor, widgetConfiguration, features, serviceDecorators(descriptor, widgetConfiguration)),
                      services = _servicesForWidget.services,
                      releaseServices = _servicesForWidget.releaseServices;

                  var environment = {
                     anchorElement: anchorElement,
                     services: services,
                     widgetName: widgetName,
                     provideServices: whenServicesAvailable
                  };

                  return Promise.resolve(adapterFactory.create(environment)).then(function (adapter) {
                     return Object.assign({ destroy: noOp }, adapter);
                  }).then(function (adapter) {
                     return {
                        id: widgetConfiguration.id,
                        adapter: adapter,
                        destroy: function destroy() {
                           releaseServices();
                           adapter.destroy();
                        },

                        templatePromise: loadAssets(descriptor, widgetArtifactProvider)
                     };
                  });
               }, function (err) {
                  var message = 'Could not load widget "' + widgetConfiguration.widget + '": ' + err.message;
                  log.error(message);
                  throw err;
               });
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Locates and loads the widget HTML template for this widget (if any) as well as any CSS stylesheets
             * used by this widget or its controls.
             *
             * @param {Object} widgetDescriptor
             *    a descriptor identifying the widget to load assets for
             * @param {ArtifactProvider} artifactProviderForWidget
             *    the provider with which to lookup or fetch artifact HTML and CSS
             *
             * @return {Promise}
             *    A promise that will be resolved with the contents of any HTML template for this widget, or with
             *    `null` if there is no template (for example, if this is an activity).
             *
             * @private
             */
            function loadAssets(widgetDescriptor, _ref2) {
               var assetForTheme = _ref2.assetForTheme,
                   assetUrlForTheme = _ref2.assetUrlForTheme;
               var type = widgetDescriptor.integration.type,
                   name = widgetDescriptor.name;

               if (type === TYPE_ACTIVITY) {
                  return Promise.resolve(null);
               }

               return Promise.all([assetForTheme(widgetDescriptor.templateSource || name + '.html'), assetUrlForTheme(widgetDescriptor.styleSource || 'css/' + name + '.css')]).then(function (_ref3) {
                  var _ref4 = _slicedToArray(_ref3, 2),
                      html = _ref4[0],
                      cssUrl = _ref4[1];

                  if (cssUrl) {
                     cssLoader.load(cssUrl);
                  }
                  return html;
               });
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function checkTechnologyCompatibility(widgetDescriptor) {
               var name = widgetDescriptor.name,
                   technology = widgetDescriptor.integration.technology;

               return function (controlDescriptor) {
                  var controlTechnology = (controlDescriptor.integration || {}).technology;
                  if (controlTechnology === 'plain') {
                     // plain is always compatible
                     return;
                  }

                  if (technology !== controlTechnology) {
                     log.warn('Incompatible integration technologies: widget [0] ([1]) cannot use control [2] ([3])', name, technology, controlDescriptor.name, controlTechnology);
                  }
               };
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function throwError(widgetConfiguration, message) {
            throw new Error(__WEBPACK_IMPORTED_MODULE_0__utilities_string__["format"]('Error loading widget "[widget]" (id: "[id]"): [0]', [message], widgetConfiguration));
         }

         /***/
      },
      /* 14 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony export (immutable) */
         __webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /**
          * Several factory methods for creating error objects that are useful for almost any adapter.
          *
          * @module adapter_utilities
          */

         /**
          * Creates an instance of the adapter utilities.
          *
          * @return {AdapterUtilities}
          *   a collection of methods to create error messages commonly generated by widget adapters
          *
          * @private
          */
         function create() {

            /**
             * Provides access to the configuration that was passed during application bootstrapping.
             *
             * A *Configuration* instance provides convenient readonly access to the underlying LaxarJS
             * application bootstrapping configuration. The configuration values are passed to
             * {@link laxar#bootstrap()} on startup (before LaxarJS v2.x, these configuration values were read from
             * `window.laxar`). When using the LaxarJS application template, the configuration values are set in the
             * file `application/application.js` under your project's root directory.
             *
             * @name AdapterUtilities
             * @constructor
             */
            return {

               /**
                * Creates (but does not throw) an error indicating that an activity tried accessing the DOM.
                *
                * @param {String} details.technology
                *    the complaining adapter's technology
                * @param {String} details.widgetName
                *    the canonical name of the activity causing the problem
                *
                * @return {Error}
                *    the error, ready to throw
                */
               activityAccessingDom: function activityAccessingDom(_ref) {
                  var technology = _ref.technology,
                      widgetName = _ref.widgetName;

                  return new Error(technology + " adapter: Trying to access DOM in activity " + widgetName);
               },

               /**
                * Creates (but does not throw) an error indicating that a widget requested an injection that cannot be
                * provided by the adapter.
                *
                * @param {String} details.technology
                *    the complaining adapter's technology
                * @param {String} details.injection
                *    the failing injection
                * @param {String} details.widgetName
                *    the canonical name of the widget causing the problem
                *
                * @return {Error}
                *    the error, ready to throw
                */
               unknownInjection: function unknownInjection(_ref2) {
                  var technology = _ref2.technology,
                      injection = _ref2.injection,
                      widgetName = _ref2.widgetName;

                  return new Error(technology + " adapter: " + ("Trying to inject unknown service \"" + injection + " into widget \"" + widgetName + "\""));
               },

               /**
                * Creates (but does not throw) an error indicating that a widget was not registered with the current
                * adapter.
                *
                * @param {String} details.technology
                *    the complaining adapter's technology
                * @param {String} details.widgetName
                *    the canonical name of the missing widget
                *
                * @return {Error}
                *    the error, ready to throw
                */
               unknownWidget: function unknownWidget(_ref3) {
                  var technology = _ref3.technology,
                      widgetName = _ref3.widgetName;

                  return new Error(technology + " adapter: Unknown widget: " + widgetName);
               }
            };
         }

         /***/
      },
      /* 15 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_object__ = __webpack_require__(1);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         var _slicedToArray = function () {
            function sliceIterator(arr, i) {
               var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                     _arr.push(_s.value);if (i && _arr.length === i) break;
                  }
               } catch (err) {
                  _d = true;_e = err;
               } finally {
                  try {
                     if (!_n && _i["return"]) _i["return"]();
                  } finally {
                     if (_d) throw _e;
                  }
               }return _arr;
            }return function (arr, i) {
               if (Array.isArray(arr)) {
                  return arr;
               } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
               } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
               }
            };
         }();

         /**
         * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         var NOT_FOUND = { content: null };

         function create(artifacts, browser, configuration, log) {

            var baseHref = configuration.get('baseHref');

            var resolve = baseHref ? function (_) {
               return browser.resolve(_, baseHref);
            } : function (_) {
               return _;
            };

            var _ref = function (themeRef) {
               var themeIndex = artifacts.aliases.themes[themeRef];
               var theme = artifacts.themes[themeIndex];
               if (!theme) {
                  log.error('The configured theme ' + themeRef + ' is not available.');
                  return ['default', 'default.theme'];
               }
               return [themeRef, theme.descriptor.name];
            }(configuration.ensure('theme')),
                _ref2 = _slicedToArray(_ref, 2),
                themeRef = _ref2[0],
                themeName = _ref2[1];

            return {
               forFlow: makeProvider('flows', ['descriptor'], ['definition']),
               forTheme: makeProvider('themes', ['descriptor', 'assets']).bind(null, themeRef),
               forPage: makeProvider('pages', ['descriptor'], ['definition']),
               forLayout: makeProvider('layouts', ['descriptor', 'assets']),
               forWidget: makeProvider('widgets', ['descriptor', 'assets', 'module']),
               forControl: makeProvider('controls', ['descriptor', 'assets', 'module'])
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function makeProvider(bucket) {
               var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
               var cloneKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

               return function (ref) {
                  var api = {};
                  var index = artifacts.aliases[bucket][ref];
                  var artifactPromise = index === undefined ? Promise.reject(new Error('Artifact ' + ref + ' not found in ' + bucket)) : Promise.resolve(artifacts[bucket][index]);

                  ['definition', 'module', 'descriptor'].forEach(function (key) {
                     if (cloneKeys.includes(key)) {
                        api[key] = function () {
                           return artifactPromise.then(function (_) {
                              return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["deepClone"])(_[key]);
                           });
                        };
                     } else if (keys.includes(key)) {
                        api[key] = function () {
                           return artifactPromise.then(function (_) {
                              return _[key];
                           });
                        };
                     }
                  });

                  if (keys.includes('assets')) {
                     (function () {
                        var lookup = function lookup(name) {
                           __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(name).hasType(String).isNotNull();
                           return function (_ref3) {
                              var _ref3$assets = _ref3.assets,
                                  assets = _ref3$assets === undefined ? {} : _ref3$assets;

                              return assets[name] || NOT_FOUND;
                           };
                        };

                        var lookupForTheme = function lookupForTheme(name) {
                           __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(name).hasType(String).isNotNull();
                           return function (_ref4) {
                              var _ref4$assets = _ref4.assets,
                                  assets = _ref4$assets === undefined ? {} : _ref4$assets;

                              var themedAssets = assets[themeName];
                              if (themedAssets && themedAssets[name]) {
                                 return themedAssets[name];
                              }
                              var defaultAssets = assets['default.theme'];
                              if (defaultAssets && defaultAssets[name]) {
                                 return defaultAssets[name];
                              }
                              return NOT_FOUND;
                           };
                        };

                        var provide = function provide(_ref5) {
                           var url = _ref5.url,
                               content = _ref5.content;

                           if (content == null && url) {
                              return browser.fetch(resolve(url)).then(function (_) {
                                 return _.text();
                              });
                           }
                           return content || null;
                        };

                        var provideUrl = function provideUrl(_ref6) {
                           var url = _ref6.url;
                           return url ? resolve(url) : null;
                        };

                        api.asset = function (name) {
                           return artifactPromise.then(lookup(name)).then(provide);
                        };

                        api.assetUrl = function (name) {
                           return artifactPromise.then(lookup(name)).then(provideUrl);
                        };

                        api.assetForTheme = function (name) {
                           return artifactPromise.then(lookupForTheme(name)).then(provide);
                        };

                        api.assetUrlForTheme = function (name) {
                           return artifactPromise.then(lookupForTheme(name)).then(provideUrl);
                        };
                     })();
                  }

                  return api;
               };
            }
         }

         /***/
      },
      /* 16 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony export (immutable) */
         __webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Module providing the Browser factory.
          *
          * Provides abstractions for browser APIs used internally by LaxarJS, which might need a different
          * implementation in a server-side environment, or for testing.
          * This service is internal to LaxarJS and not available to widgets and activities.
          *
          * @module browser
          */

         /**
          * Create a browser abstraction environment.
          *
          * @return {Browser}
          *    a fresh browser instance
          *
          * @private
          */
         function create() {

            // for the MSIE `resolve`-workaround, cache the temporary HTML document
            var resolveDoc = void 0;
            var resolveDocBase = void 0;

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * A brower mostly abstracts over the location-related DOM window APIs, and provides a console wrapper.
             * Since it is internal to LaxarJS, only relevant APIs are included.
             *
             * @name Browser
             * @constructor
             */
            return {
               /**
               * Calculates an absolute URL from a (relative) URL, and an optional base URL.
               *
               * If no base URL is given, the `document.baseURI` is used instead. The given base URL may also be
               * relative, in which case it is resolved against the `document.baseURI` before resolving the first URL.
               *
               * For browser environments that do not support the `new URL( url, baseUrl )` constructor for resolving
               * URLs or that do not support `document.baseURI`, fallback mechanisms are used.
               *
               * @param {String} url
               *    the URL to resolve
               * @param {String} baseUrl
               *    the base to resolve from
               *
               * @return {String}
               *    an absolute URL based on the given URL
               *
               * @type {Function}
               * @memberof Browser
               */
               resolve: selectResolver(),

               /**
                * Provides easily mocked access to `window.location`
                *
                * @return {Location}
                *    the current (window's) DOM location
                *
                * @type {Function}
                * @memberof Browser
                */
               location: function location() {
                  return window.location;
               },

               /**
                * Provides easily mocked access to `window.fetch` or a suitable polyfill:
                *
                * @param {String|Request} input
                *    the URL to fetch or the request to perform
                * @param {Object} [init]
                *    additional options, described here in more detail:
                *    https://developer.mozilla.org/en-US/docs/Web/API/Globalfetch/fetch#Parameters
                *
                * @return {Promise<Response>}
                *    the resulting promise
                *
                * @type {Function}
                * @memberof Browser
                */
               fetch: function fetch(input, init) {
                  return window.fetch(input, init);
               },

               /**
                * Provides easily mocked access to `window.console`:
                *
                * @return {Console}
                *    the browser console promise
                *
                * @type {Function}
                * @memberof Browser
                */
               console: function console() {
                  return window.console;
               }
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            // perform the exception-based feature-detect only once (for performance, and to be nice to debugger users)
            function selectResolver() {
               try {
                  var href = window.location.href;

                  return new URL('', href).href === href ? resolveUsingUrl : resolveUsingLink;
               } catch (e) {
                  return resolveUsingLink;
               }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            // Resolve using the DOM URL API (Chrome, Firefox, Safari, MS Edge)
            function resolveUsingUrl(url, baseUrl) {
               var absoluteBaseUrl = baseUrl ? abs(baseUrl) : document.baseURI || abs('.');
               return new URL(url, absoluteBaseUrl).href;

               function abs(url) {
                  return new URL(url, document.baseURI || resolveUsingLink('.'));
               }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            // Resolve using the a-tag fallback (MSIE)
            function resolveUsingLink(url, baseUrl) {
               var absoluteBaseUrl = abs(baseUrl);
               if (!resolveDoc) {
                  resolveDoc = document.implementation.createHTMLDocument('');
                  resolveDocBase = resolveDoc.createElement('base');
                  resolveDoc.head.appendChild(resolveDocBase);
               }
               resolveDocBase.href = absoluteBaseUrl;
               return abs(url, resolveDoc);

               function abs(url) {
                  var baseDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

                  var a = baseDocument.createElement('a');
                  // MSIE does not process empty URLs correctly (http://stackoverflow.com/a/7966835)
                  a.href = url || '#';
                  return url ? a.href : a.href.slice(0, -1);
               }
            }
         }

         /***/
      },
      /* 17 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_object__ = __webpack_require__(1);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Module providing the Configuration factory.
          *
          * To use the Configuration in a widget, request the {@link widget_services#axConfiguration axConfiguration}
          * injection. In compatibility mode with LaxarJS v1.x, it is also available under `laxar.configuration`.
          *
          * @module configuration
          */

         function create(source, defaults) {

            /**
             * Provides access to the configuration that was passed during application bootstrapping.
             *
             * A *Configuration* instance provides convenient readonly access to the underlying LaxarJS
             * application bootstrapping configuration. The configuration values are passed to
             * {@link laxar#bootstrap()} on startup (before LaxarJS v2.x, these configuration values were read from
             * `window.laxar`). When using the LaxarJS application template, the configuration values are set in the
             * file `application/application.js` under your project's root directory.
             *
             * @name Configuration
             * @constructor
             */
            return { get: get, ensure: ensure };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Returns the configured value for the specified attribute path or `undefined` in case it wasn't
             * configured. If a default value was passed as second argument this is returned instead of `undefined`.
             *
             * Services should use this to get configuration values for which there are universal fallback behaviors.
             *
             * Examples:
             * ```js
             * // ... inject `axConfiguration` as parameter `config` ...
             * config.get( 'logging.threshold' ); // -> 'INFO'
             * config.get( 'iDontExist' ); // -> undefined
             * config.get( 'iDontExist', 42 ); // -> 42
             * ```
             *
             * @param {String} key
             *    a  path (using `.` as separator) to the property in the configuration object
             * @param {*} [optionalDefault]
             *    the value to return if no value was set for `key`
             *
             * @return {*}
             *    either the configured value, `undefined` or `optionalDefault`
             *
             * @memberof Configuration
             */
            function get(key, optionalDefault) {
               var value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["path"])(source, key);
               return value !== undefined ? value : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["path"])(defaults, key, optionalDefault);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Retrieves a configuration value by key, failing if it is `undefined` or `null`.
             *
             * Services should use this to get configuration values for which no universal default or fallback exists.
             *
             * Examples:
             * ```js
             * // ... inject `axConfiguration` as parameter `config` ...
             * config.ensure( 'logging.threshold' ); // -> 'INFO'
             * config.ensure( 'iDontExist' ); // -> throws
             * ```
             *
             * @param {String} key
             *    a  path (using `.` as separator) to the property in the configuration object
             *
             * @return {*}
             *    the configured value (if `undefined` or `null`, an exception is thrown instead)
             *
             * @memberof Configuration
             */
            function ensure(key) {
               var value = get(key);
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(value).isNotNull('Configuration is missing mandatory entry: ' + key);
               return value;
            }
         }

         /***/
      },
      /* 18 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_object__ = __webpack_require__(1);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
               for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
               }return arr2;
            } else {
               return Array.from(arr);
            }
         }

         function _toArray(arr) {
            return Array.isArray(arr) ? arr : Array.from(arr);
         }

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Module providing the EventBus factory.
          *
          * To use the EventBus in a widget, request the {@link widget_services#axEventBus axEventBus} injection, or
          * use the `eventBus` property on the {@link widget_services#axContext axContext} injection.
          * In some cases, it may be useful to inject the global EventBus instance backing all widget instances of the
          * same bootstrapping context, by requesting the {@link widget_services#axGlobalEventBus axGlobalEventBus}
          * injection.
          *
          * @module event_bus
          */

         var WILDCARD = '*';
         var SUBSCRIBER_FIELD = '.';

         var TOPIC_SEPARATOR = '.';
         var SUB_TOPIC_SEPARATOR = '-';
         var REQUEST_MATCHER = /^([^.])([^.]*)Request(\..+)?$/;

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * @param {Object} configuration
          *    configuration for the event bus instance.
          *    The key `eventBusTimeoutMs` is used to determine the will/did timeout.
          * @param {Object} log
          *    a logger instance for error reporting
          * @param {Function} nextTick
          *    a next tick function like `process.nextTick`, `setImmediate` or AngularJS' `$timeout`
          * @param {Function} timeoutFunction
          *    a timeout function like `window.setTimeout` or AngularJS' `$timeout`
          * @param {Function} [errorHandler]
          *    a custom handler for thrown exceptions. By default exceptions are logged using the global logger.
          *
          * @constructor
          * @private
          */
         function EventBus(configuration, log, nextTick, timeoutFunction) {
            var errorHandler = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : createLogErrorHandler(log);

            this.nextTick_ = function (f) {
               return nextTick(f);
            };
            this.timeoutFunction_ = function (f, ms) {
               return timeoutFunction(f, ms);
            };
            this.timeoutMs_ = configuration.ensure('eventBusTimeoutMs');
            this.errorHandler_ = errorHandler;

            this.cycleCounter_ = 0;
            this.eventQueue_ = [];
            this.subscriberTree_ = {};

            this.waitingPromiseResolves_ = [];
            this.currentCycle_ = -1;
            this.inspectors_ = [];
            this.log_ = log;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Adds an inspector, that gets notified when certain actions within the event bus take place. Currently
          * these actions may occur:
          *
          * - `subscribe`: a new subscriber registered for an event
          * - `publish`: an event is published but not yet delivered
          * - `deliver`: an event is actually delivered to a subscriber
          *
          * An inspector receives a map with the following properties:
          *
          * - `action`: one of the actions from above
          * - `source`: the origin of the `action`
          * - `target`: the name of the event subscriber (`deliver` action only)
          * - `event`: the full name of the event or the subscribed event (`subscribe` action only)
          * - `eventObject`: the published event item (`publish` action only)
          * - `subscribedTo`: the event, possibly with omissions, the subscriber subscribed to (`deliver` action only)
          * - `cycleId`: the id of the event cycle
          *
          * The function returned by this method can be called to remove the inspector again and prevent it from
          * being called for future event bus actions.
          *
          * @param {Function} inspector
          *    the inspector function to add
          *
          * @return {Function}
          *    a function to remove the inspector
          */
         EventBus.prototype.addInspector = function (inspector) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(inspector).hasType(Function).isNotNull();

            this.inspectors_.push(inspector);
            return function () {
               var index = this.inspectors_.indexOf(inspector);
               if (index !== -1) {
                  this.inspectors_.splice(index, 1);
               }
            }.bind(this);
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Subscribes to an event by name. An event name consists of so called *topics*, where each topic is
          * separated from another by dots (`.`). If a topic is omitted, this is treated as a wildcard. Note that
          * two dots in the middle or one dot at the beginning of an event name must remain, whereas a dot at the
          * end may be omitted. As such every event name has an intrinsic wildcard at its end. For example these are
          * all valid event names:
          *
          * - `some.event`: matches `some.event`, `some.event.again`
          * - `.event`: matches `some.event`, `any.event`, `any.event.again`
          * - `some..event`: matches `some.fancy.event`, `some.special.event`
          *
          * Additionally *subtopics* are supported. Subtopics are fragments of a topic, separated from another by
          * simple dashes (`-`). Here only suffixes of subtopics may be omitted when subscribing. Thus subscribing
          * to `some.event` would match an event published with name `some.event-again` or even
          * `some.event-another.again`.
          *
          * **The subscriber function**
          *
          * When an event is delivered, the subscriber function receives two arguments:
          * The first one is the event object as it was published. If `optionalOptions.clone` yields `true` this is a
          * simple deep copy of the object (note that only properties passing a JSON-(de)serialization remain). If
          * `false` the object is frozen using `Object.freeze` recursively.
          *
          * The second one is a meta object with these properties:
          *
          * - `name`: The name of the event as it actually was published (i.e. without wildcards).
          * - `cycleId`: The id of the cycle the event was published (and delivered) in
          * - `sender`: The id of the event sender, may be `null`.
          * - `initiator`: The id of the initiator of the cycle. Currently not implemented, thus always `null`.
          * - `options`: The options that were passed to `publish` or `publishAndGatherReplies` respectively.
          *
          * @param {String} eventName
          *    the name of the event to subscribe to
          * @param {Function} subscriber
          *    a function to call whenever an event matching `eventName` is published
          * @param {Object} [optionalOptions]
          *    additional options for the subscribe action
          * @param {String} [optionalOptions.subscriber=null]
          *    the id of the subscriber. Default is `null`
          * @param {Boolean} [optionalOptions.clone=true]
          *    if `false` the event will be send frozen to the subscriber, otherwise it will receive a deep copy.
          *    Default is `true`
          *
          * @return {Function}
          *    a function that when called unsubscribes from this subscription again
          */
         EventBus.prototype.subscribe = function (eventName, subscriber, optionalOptions) {
            var _this = this;

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(eventName).hasType(String).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(subscriber).hasType(Function).isNotNull();

            var options = __WEBPACK_IMPORTED_MODULE_1__utilities_object__["options"](optionalOptions, {
               subscriber: null,
               clone: true
            });
            var subscriberItem = {
               name: eventName,
               subscriber: subscriber,
               subscriberName: options.subscriber,
               subscriptionWeight: calculateSubscriptionWeight(eventName),
               options: options
            };

            var eventNameParts = eventName.split(TOPIC_SEPARATOR);
            var node = eventNameParts.reduce(function (node, eventNamePart) {
               var bucketName = eventNamePart || WILDCARD;
               if (!(bucketName in node)) {
                  node[bucketName] = {};
               }
               return node[bucketName];
            }, this.subscriberTree_);

            if (!(SUBSCRIBER_FIELD in node)) {
               node[SUBSCRIBER_FIELD] = [];
            }
            node[SUBSCRIBER_FIELD].push(subscriberItem);

            notifyInspectors(this, {
               action: 'subscribe',
               source: options.subscriber,
               target: '-',
               event: eventName,
               cycleId: this.currentCycle_
            });

            return function () {
               unsubscribeRecursively(_this, _this.subscriberTree_, eventNameParts, subscriber);
            };
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Asynchronously publishes an event on the event bus. The returned promise will be enqueued as soon as this
          * event is delivered and, if during delivery a new event was enqueued, resolved after that new event was
          * delivered. If no new event is published during delivery of this event, the promise is instantly resolved.
          * To make this a bit clearer, lets assume we publish and thus enqueue an event at time `t`. It then will
          * be delivered at time `t+1`. At that precise moment the promise is enqueued to be resolved soon. We then
          * distinguish between two cases:
          *
          * - At time `t+1` no subscriber publishes (i.e. enqueues) an event: Thus there is no event in the same
          *   cycle and the promise is also resolved at time `t+1`.
          * - At least one subscriber publishes an event at time `t+1`: The promise is then scheduled to be resolved
          *   as soon as this event is delivered at time `t+2`.
          *
          * The implication of this is the following:
          *
          * We have two collaborators, A and B. A listens to event b and B listens to event a.
          * Whenever A publishes a and B than instantly (i.e. in the same event cycle of the JavaScript runtime
          * where its subscriber function was called) *responds* by publishing b, b arrives at the subscriber
          * function of A, before the promise of A's publish action is resolved.
          * It is hence possible to observe possible effects of an event sent by oneself, under the conditions
          * mentioned above. Practically this is used internally for the implementation of
          * {@link #EventBus.publishAndGatherReplies()}.
          *
          * @param {String} eventName
          *    the name of the event to publish
          * @param {Object} [optionalEvent]
          *    the event to publish
          * @param {Object} [optionalOptions]
          *    additional options for the publish action
          * @param {String} [optionalOptions.sender=null]
          *    the id of the event sender. Default is `null`
          * @param {Boolean} [optionalOptions.deliverToSender=true]
          *    if `false` the event will not be send to subscribers whose subscriber name matches
          *    `optionalOptions.sender`, else all subscribers will receive the event. Default is `true`
          *
          * @return {Promise}
           *   the delivery promise
          */
         EventBus.prototype.publish = function (eventName) {
            var _this2 = this;

            var optionalEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var optionalOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(eventName).hasType(String).isNotNull();

            var event = JSON.parse(JSON.stringify(optionalEvent));
            var options = Object.assign({ deliverToSender: true, sender: null }, optionalOptions);

            return new Promise(function (resolve) {
               var eventItem = {
                  meta: {
                     name: eventName,
                     cycleId: _this2.currentCycle_ > -1 ? _this2.currentCycle_ : _this2.cycleCounter_++,
                     sender: options.sender,
                     initiator: null,
                     options: options
                  },
                  event: event,
                  resolvePublish: resolve
               };
               enqueueEvent(_this2, eventItem);

               notifyInspectors(_this2, {
                  action: 'publish',
                  source: options.sender,
                  target: '-',
                  event: eventName,
                  eventObject: event,
                  cycleId: eventItem.meta.cycleId
               });
            });
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Publishes an event that follows the *request-will-did pattern* and awaits all replies. This pattern has
          * evolved over time and is of great use when handling the asynchronous nature of event bus events.
          *
          * Certain rules need to be fulfilled: First the initiator needs to call this method with an event whose
          * name has the suffix `Request`, e.g. `takeActionRequest`. All collaborators that want to react to this
          * event then either do so in the same event cycle by sending a `didTakeAction` event or announce that they
          * will do something asynchronously by publishing a `willTakeAction` event. In the latter case they need to
          * broadcast the fulfillment of their action some time later by sending a `didTakeAction` event. Note that for
          * both events the same sender name needs to be given. Otherwise they cannot be mapped and the event bus
          * doesn't know if all asynchronous replies were already received.
          *
          * Additionally a timer is started using either the globally configured `pendingDidTimeout` ms value or the
          * value provided as option to this method. If that timer expires before all `did*` events to all given
          * `will*` events were received, the error handler is called to handle the incident and the promise is
          * rejected with all responses received up to now.
          *
          * @param {String} eventName
          *    the name of the event to publish
          * @param {Object} [optionalEvent]
          *    the event to publish
          * @param {Object} [optionalOptions]
          *    additional options for the publish action
          * @param {String} [optionalOptions.sender=null]
          *    the id of the event sender. Default is `null`
          * @param {Number} [optionalOptions.pendingDidTimeout]
          *    the timeout in milliseconds for pending did* events. Default is the timeout option used when the
          *    event bus instance was created
          *
          * @return {Promise}
          *   the delivery promise. It receives a list of all collected `did*` events and according meta information
          */
         EventBus.prototype.publishAndGatherReplies = function (eventName, optionalEvent, optionalOptions) {
            var _this3 = this;

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(eventName).hasType(String).isNotNull();

            var matches = REQUEST_MATCHER.exec(eventName);
            __WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */].state(!!matches, 'Expected eventName to end with "Request" but got ' + eventName);

            var options = Object.assign({ pendingDidTimeout: this.timeoutMs_ }, optionalOptions);

            var eventNameSuffix = matches[1].toUpperCase() + matches[2];
            if (matches[3]) {
               eventNameSuffix += matches[3];
            }
            var deferred = {};
            deferred.promise = new Promise(function (resolve, reject) {
               deferred.resolve = resolve;
               deferred.reject = reject;
            });
            var willWaitingForDid = [];
            var givenDidResponses = [];
            var cycleFinished = false;

            var unsubscribeWillCollector = this.subscribe('will' + eventNameSuffix, function (event, meta) {
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(meta.sender).hasType(String).isNotNull('A response with will to a request-event must contain a sender.');

               willWaitingForDid.push(meta.sender);
            }, { subscriber: options.sender });

            var unsubscribeDidCollector = this.subscribe('did' + eventNameSuffix, function (event, meta) {
               givenDidResponses.push({ event: event, meta: meta });
               var senderIndex = void 0;
               do {
                  senderIndex = willWaitingForDid.indexOf(meta.sender);
                  if (senderIndex !== -1) {
                     willWaitingForDid.splice(senderIndex, 1);
                  }
               } while (senderIndex !== -1);

               if (willWaitingForDid.length === 0 && cycleFinished) {
                  finish();
               }
            }, { subscriber: options.sender });

            var timeoutRef = this.timeoutFunction_(function () {
               if (willWaitingForDid.length > 0) {
                  var message = 'Timeout while waiting for pending did' + eventNameSuffix + ' on ' + eventName + '.';
                  _this3.errorHandler_(message, {
                     'Sender': options.sender,
                     'After ms timeout': options.pendingDidTimeout,
                     'Responses missing from': willWaitingForDid.join(', ')
                  });
                  finish(true);
               }
            }, options.pendingDidTimeout);

            this.publish(eventName, optionalEvent, options).then(function () {
               unsubscribeWillCollector();
               if (willWaitingForDid.length === 0) {
                  // either there was no will or all did responses were already given in the same cycle as the will
                  finish();
                  return;
               }
               cycleFinished = true;
            });

            function finish(wasCanceled) {
               clearTimeout(timeoutRef);
               unsubscribeDidCollector();
               (wasCanceled ? deferred.reject : deferred.resolve)(givenDidResponses);
            }

            return deferred.promise;
         };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function enqueueEvent(self, eventItem) {
            if (self.eventQueue_.length === 0) {
               self.nextTick_(function () {
                  var queuedEvents = self.eventQueue_;

                  self.eventQueue_ = [];

                  processWaitingPublishPromises(self, processQueue(self, queuedEvents));
               });
            }
            self.eventQueue_.push(eventItem);
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function processQueue(self, queuedEvents) {
            return queuedEvents.map(function (eventItem) {
               var meta = eventItem.meta;
               self.currentCycle_ = meta.cycleId;

               var subscribers = findSubscribers(self, meta.name);
               if (subscribers.length === 0) {
                  self.currentCycle_ = -1;
                  return eventItem.resolvePublish;
               }

               var serializedEvent = null;
               if (subscribers.length > 1) {
                  serializedEvent = JSON.stringify(eventItem.event);
               }

               var senderName = meta.sender;
               var options = meta.options;

               subscribers.forEach(function (subscriberItem) {
                  var subscriberName = subscriberItem.subscriberName;
                  if (!options.deliverToSender && senderName && senderName === subscriberName) {
                     return;
                  }

                  try {
                     var event = void 0;
                     if (subscriberItem.options.clone) {
                        event = serializedEvent ? JSON.parse(serializedEvent) : eventItem.event;
                     } else {
                        event = eventItem.event;
                     }
                     subscriberItem.subscriber(event, meta);
                  } catch (e) {
                     var message = 'error while calling subscriber "' + subscriberName + '"' + (' for event ' + meta.name) + (' published by "' + senderName + '" (subscribed to: ' + subscriberItem.name + ')');
                     self.errorHandler_(message, {
                        'Exception': e,
                        'Published event': eventItem.event,
                        'Event meta information': meta,
                        'Caused by Subscriber': subscriberItem
                     });
                  }

                  notifyInspectors(self, {
                     action: 'deliver',
                     source: senderName,
                     target: subscriberName,
                     event: meta.name,
                     eventObject: eventItem.event,
                     subscribedTo: subscriberItem.name,
                     cycleId: meta.cycleId
                  });
               });

               self.currentCycle_ = -1;

               return eventItem.resolvePublish;
            });
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function processWaitingPublishPromises(self, newPromiseResolves) {
            var waitingResolves = self.waitingPromiseResolves_;
            self.waitingPromiseResolves_ = newPromiseResolves;

            waitingResolves.forEach(function (resolve) {
               return resolve();
            });

            if (self.eventQueue_.length === 0) {
               // nothing was queued by any subscriber. The publishers can instantly be notified of delivery.
               newPromiseResolves.forEach(function (resolve) {
                  return resolve();
               });
               self.waitingPromiseResolves_ = [];
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function unsubscribeRecursively(self, node, parts, subscriber) {
            if (parts.length === 0 && Array.isArray(node[SUBSCRIBER_FIELD])) {
               var subscribers = node[SUBSCRIBER_FIELD];
               for (var i = subscribers.length - 1; i >= 0; --i) {
                  if (subscribers[i].subscriber === subscriber) {
                     notifyInspectors(self, {
                        action: 'unsubscribe',
                        source: subscribers[i].subscriberName,
                        target: '-',
                        event: subscribers[i].name,
                        cycleId: self.currentCycle_
                     });
                     subscribers.splice(i, 1);
                  }
               }
            }

            var _parts = _toArray(parts),
                part = _parts[0],
                rest = _parts.slice(1);

            var searchPart = part || WILDCARD;
            if (searchPart in node) {
               unsubscribeRecursively(self, node[searchPart], rest, subscriber);
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function findSubscribers(self, eventName) {
            var subscribers = [];
            var parts = eventName.split(TOPIC_SEPARATOR);
            var node = self.subscriberTree_;

            findSubscribersRecursively(node, parts, subscribers);
            subscribers.sort(function (a, b) {
               var aWeight = a.subscriptionWeight;
               var bWeight = b.subscriptionWeight;
               if (aWeight[0] === bWeight[0]) {
                  return bWeight[1] - aWeight[1];
               }

               return bWeight[0] - aWeight[0];
            });

            return subscribers;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function findSubscribersRecursively(node, parts, subscribers) {
            if (Array.isArray(node[SUBSCRIBER_FIELD])) {
               subscribers.push.apply(subscribers, _toConsumableArray(node[SUBSCRIBER_FIELD]));
            }

            if (parts.length === 0) {
               return;
            }

            var _parts2 = _toArray(parts),
                part = _parts2[0],
                remainder = _parts2.slice(1);

            if (part.indexOf(SUB_TOPIC_SEPARATOR) !== -1) {
               var index = part.length;
               var currentPart = part;
               do {
                  currentPart = currentPart.substring(0, index);
                  if (currentPart in node) {
                     findSubscribersRecursively(node[currentPart], remainder, subscribers);
                  }
                  index = currentPart.lastIndexOf(SUB_TOPIC_SEPARATOR);
               } while (index !== -1);
            } else if (part in node) {
               findSubscribersRecursively(node[part], remainder, subscribers);
            }

            if (WILDCARD in node) {
               findSubscribersRecursively(node[WILDCARD], remainder, subscribers);
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function calculateSubscriptionWeight(eventName) {
            var parts = eventName.split(TOPIC_SEPARATOR);
            var weight = [0, 0];
            parts.forEach(function (part) {
               if (part.length > 0) {
                  weight[0]++;
                  weight[1] += part.split(SUB_TOPIC_SEPARATOR).length - 1;
               }
            });
            return weight;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function notifyInspectors(self, infoObject) {
            self.inspectors_.forEach(function (inspector) {
               inspector(infoObject);
            });
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function createLogErrorHandler(log) {
            return function (message, optionalErrorInformation) {
               var sensitiveData = ['Published event'];

               log.error('EventBus: ' + message);

               if (optionalErrorInformation) {
                  __WEBPACK_IMPORTED_MODULE_1__utilities_object__["forEach"](optionalErrorInformation, function (info, title) {
                     var formatString = '   - [0]: [1:%o]';
                     if (sensitiveData.indexOf(title) !== -1) {
                        formatString = '   - [0]: [1:%o:anonymize]';
                     }

                     log.error(formatString, title, info);

                     if (info instanceof Error && info.stack) {
                        log.error('   - Stacktrace: ' + info.stack);
                     }
                  });
               }
            };
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Creates and returns a new event bus instance using the given configuration.
          *
          * @param {Object} configuration
          *    configuration for the event bus instance.
          *    The key `eventBusTimeoutMs` is used to determine the will/did timeout.
          * @param {Object} log
          *    a logger to use for error reporting
          * @param {Function} nextTick
          *    a next tick function like `process.nextTick` or AngularJS' `$timeout`
          * @param {Function} timeoutFunction
          *    a timeout function like `window.setTimeout` or AngularJS' `$timeout`
          * @param {Function} [errorHandler]
          *    a custom handler for thrown exceptions. By default exceptions are logged using the global logger.
          *
          * @return {EventBus}
          *    an event bus instance
          *
          * @private
          */
         function create(configuration, log, nextTick, timeoutFunction, errorHandler) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(configuration.ensure).hasType(Function).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(log.error).hasType(Function).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(nextTick).hasType(Function).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(timeoutFunction).hasType(Function).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(errorHandler).hasType(Function);

            return new EventBus(configuration, log, nextTick, timeoutFunction, errorHandler);
         }

         /***/
      },
      /* 19 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_object__ = __webpack_require__(1);
         /* unused harmony export TARGET_SELF */
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Module providing the FlowController factory.
          *
          * This service is internal to LaxarJS and not available to widgets and activities.
          *
          * @module flow_controller
          * @private
          */

         var SESSION_KEY_TIMER = 'navigationTimer';
         var DEFAULT_PLACE = '';

         var TARGET_SELF = '_self';

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Creates and returns a new flow controller from its dependencies.
          *
          * @param {ArtifactProvider} artifactProvider
          *    an artifact provider, needed to fetch the flow definition
          * @param {Configuration} configuration
          *    a configuration instance, to determine the name of the flow to load
          * @param {EventBus} eventBus
          *    an event bus instance, used to subscribe to navigateRequest events, and to publish will/did-responses
          * @param {Logger} log
          *    a logger that is used for reporting flow validation and navigation problems
          * @param {PageService} pageService
          *    the page service to use for actual page transitions (setup, teardown) during navigation
          * @param {Router} router
          *    router to register places with, and to use for URL construction
          * @param {Timer} timer
          *    timer to use for measuring page transitions
          *
          * @return {FlowController}
          *    a flow controller instance
          */
         function create(artifactProvider, configuration, eventBus, log, pageService, router, timer) {

            var COLLABORATOR_ID = 'AxFlowController';
            var availablePlaces = {};

            var activeParameters = {};
            var activePlace = void 0;
            var navigationInProgress = false;
            var requestedTarget = null;

            eventBus.subscribe('navigateRequest', function (_ref) {
               var target = _ref.target,
                   data = _ref.data;

               if (navigationInProgress) {
                  return;
               }
               requestedTarget = target;
               navigateToTarget(target, Object.assign({}, activeParameters, data));
            }, { subscriber: COLLABORATOR_ID });

            /**
             * A flow controller can load a flow definition, setup routes, and allows to navigate between places. The
             * flow controller handles router-initiated navigation as well as `navigateRequest` events and triggers
             * instantiation/destruction of the associated pages.
             *
             * @name FlowController
             * @constructor
             */
            return {
               constructAbsoluteUrl: constructAbsoluteUrl,
               loadFlow: loadFlow
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Starts loading the configured flow definition and configures the router.
             *
             * @return {Promise}
             *    a promise that is resolved when all routes have been registered
             */
            function loadFlow() {
               var flowName = configuration.ensure('flow.name');
               return artifactProvider.forFlow(flowName).definition().then(function (flow) {
                  return router.registerRoutes(assembleRoutes(flow), createFallbackHandler(flow));
               });
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Get the place definition for a given target or place. If the provided identifier is a target of the
             * current place, the definition of the referenced place is returned. Otherwise, the current place is
             * returned.
             *
             * @param {String} targetOrPlaceId
             *    a string identifying the target or place to obtain a definition for
             * @param {Object} place
             *    the corresponding place definition
             *
             * @return {Object}
             *    a place definition with `targets` and `patterns` as specified in the flow definition, plus `id`
             */
            function placeForTarget(targetOrPlaceId) {
               var place = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : activePlace;

               var placeId = place ? place.targets[targetOrPlaceId] : null;
               if (placeId == null) {
                  placeId = targetOrPlaceId;
               }
               __WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */].state(placeId in availablePlaces, 'Unknown target or place "' + targetOrPlaceId + '". Current place: "' + place.id + '"');
               return availablePlaces[placeId];
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Constructs an absolute URL to the given target or place using the given parameters. If a target is
             * given as first argument, it is resolved using the currently active place.
             *
             * @param {String} targetOrPlace
             *    the target or place ID to construct a URL for
             * @param {Object} [optionalParameters]
             *    optional map of place parameters. Missing parameters are filled base on the parameters that were
             *    passed to the currently active place
             *
             * @return {String}
             *    the generated absolute URL
             *
             * @memberof FlowService
             */
            function constructAbsoluteUrl(targetOrPlace, optionalParameters) {
               var place = placeForTarget(targetOrPlace);
               return router.constructAbsoluteUrl(place.patterns, withoutRedundantParameters(place, optionalParameters));
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function navigateToTarget(targetOrPlaceId, parameters, redirectFrom) {
               var place = placeForTarget(targetOrPlaceId, redirectFrom);
               router.navigateTo(place.patterns, withoutRedundantParameters(place, parameters), !!redirectFrom);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function handleRouteChange(place, routerParameters) {
               var parameters = Object.assign({}, place.defaultParameters, routerParameters);
               if (activePlace && place.id === activePlace.id && equals(parameters, activeParameters)) {
                  navigationInProgress = false;
                  log.trace('Canceling navigation to "' + place.id + '". Already there with same parameters.');
                  return Promise.resolve();
               }
               if (navigationInProgress) {
                  log.trace('Canceling navigation to "' + place.id + '". Navigation already in progress.');
                  return Promise.resolve();
               }
               navigationInProgress = true;

               var fromPlace = activePlace ? activePlace.targets[TARGET_SELF] : '';
               var navigationTimer = timer.started({
                  label: 'navigation (' + fromPlace + ' -> ' + place.targets[TARGET_SELF] + ')',
                  persistenceKey: SESSION_KEY_TIMER
               });

               var event = {
                  target: requestedTarget || place.id,
                  place: place.id,
                  data: parameters
               };
               requestedTarget = null;

               var options = { sender: COLLABORATOR_ID };
               return eventBus.publish('willNavigate.' + event.target, event, options).then(function () {
                  if (activePlace && place.id === activePlace.id) {
                     activeParameters = parameters;
                     return Promise.resolve();
                  }

                  return pageService.controller().tearDownPage().then(function () {
                     log.setTag('PLCE', place.id);
                     activeParameters = parameters;
                     activePlace = place;
                     return pageService.controller().setupPage(place.page);
                  });
               }).then(function () {
                  navigationInProgress = false;
                  navigationTimer.stopAndLog('didNavigate');
                  return eventBus.publish('didNavigate.' + event.target, event, options);
               }).catch(function (err) {
                  log.error('Failed to navigate to place "' + place.id + '". Error: [0]\n', err.stack);
                  return Promise.reject(err);
               });
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createFallbackHandler(flow) {
               var redirectOn = flow.redirectOn,
                   places = flow.places;

               return function (path) {
                  log.warn('Received request for unknown route "' + path + '".');
                  if (redirectOn.unknownPlace in places) {
                     log.trace('- Redirecting to error place ("' + redirectOn.unknownPlace + '").');
                     handleRouteChange(places[redirectOn.unknownPlace], {});
                  } else if (DEFAULT_PLACE in places) {
                     log.trace('- Redirecting to default place ("' + DEFAULT_PLACE + '").');
                     handleRouteChange(places[DEFAULT_PLACE], {});
                  } else {
                     log.trace('- Got no unknownPlace redirect and no default place. Doing nothing.');
                  }
               };
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function assembleRoutes(_ref2) {
               var places = _ref2.places;

               var routeMap = {};
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["forEach"])(places, function (place, placeId) {
                  place.id = placeId;
                  place.patterns = place.patterns || ['/' + placeId];
                  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["setPath"])(place, 'targets.' + TARGET_SELF, place.id);

                  var id = place.id,
                      patterns = place.patterns,
                      page = place.page,
                      redirectTo = place.redirectTo;

                  availablePlaces[id] = place;

                  if (redirectTo) {
                     patterns.forEach(function (pattern) {
                        routeMap[pattern] = function (parameters) {
                           navigateToTarget(redirectTo, parameters, place);
                        };
                     });
                     return;
                  }

                  if (!page) {
                     log.error('flow: invalid empty place: ' + id);
                     return;
                  }

                  patterns.forEach(function (pattern) {
                     routeMap[pattern] = function (parameters) {
                        handleRouteChange(place, parameters);
                     };
                  });
               });
               return routeMap;
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function withoutRedundantParameters(place, parameters) {
            var _place$defaultParamet = place.defaultParameters,
                defaultParameters = _place$defaultParamet === undefined ? {} : _place$defaultParamet;

            var remainingParameters = {};
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["forEach"])(parameters, function (value, key) {
               if (!(key in defaultParameters) || defaultParameters[key] !== value) {
                  remainingParameters[key] = value;
               }
            });
            return remainingParameters;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function equals(a, b) {
            var aKeys = Object.keys(a);
            var bKeys = Object.keys(b);
            return aKeys.length === bKeys.length && aKeys.every(function (key) {
               return key in b && a[key] === b[key];
            });
         }

         /***/
      },
      /* 20 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony export (immutable) */
         __webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Module providing the FlowService factory.
          *
          * To access the FlowService in a widget, request the {@link widget_services#axFlowService axFlowService}
          * injection.
          *
          * @module flow_service
          */

         /**
          * Creates a flow service  backed by the given flow controller.
          *
          * @param {FlowController} flowController
          *    a flow controller, needed to respect default parameter values when generating URLs
          *
          * @return {FlowService}
          *    a flow service instance
          *
          * @private
          */
         function create(flowController) {

            /**
             * Allows widgets to create valid URLs without knowledge about the current place, its routing patterns, or
             * about the actual routing implementation.
             *
             * @name FlowService
             * @constructor
             */
            return {
               constructAbsoluteUrl: constructAbsoluteUrl
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Constructs an absolute URL to the given target or place using the given parameters. If a target is
             * given as first argument, it is resolved using the currently active place.
             *
             * @param {String} targetOrPlace
             *    the target or place ID to construct a URL for
             * @param {Object} [optionalParameters]
             *    optional map of place parameters. Missing parameters are filled base on the parameters that were
             *    passed to the currently active place
             *
             * @return {String}
             *    the generated absolute URL
             *
             * @memberof FlowService
             */
            function constructAbsoluteUrl(targetOrPlace) {
               var optionalParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

               return flowController.constructAbsoluteUrl(targetOrPlace, optionalParameters);
            }
         }

         /***/
      },
      /* 21 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony export (immutable) */
         __webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Module providing the Heartbeat factory.
          *
          * To use the Heartbeat service in a widget, request the {@link widget_services#axHeartbeat axHeartbeat}
          * injection.
          *
          * @module heartbeat
          */

         /**
          * Creates a heartbeat backed by the given scheduler.
          *
          * @param {Function} [customNextTick]
          *    a function that takes a callback, and will asynchronously execute that callback as soon as possible,
          *    but asynchronously (that is, after the calling execution stack has finished running).
          *    If omitted, the callback is scheduled using `Promise.resolve().then( ... )`.
          * @param {Function} [customTimeout]
          *    an optional replacement for `window.setTimeout`, used to run coalesced callbacks in a second stage
          *    after the immediately scheduled operation
          *
          * @return {FlowService}
          *    a flow service instance
          *
          * @private
          */
         function create(customNextTick, customTimeout) {

            var nextTick = customNextTick || function (f) {
               Promise.resolve().then(f);
            };
            var timeout = customTimeout || function (f) {
               setTimeout(f, 0);
            };

            var heartbeatListeners = [];
            var nextQueue = [];
            var beforeQueue = [];
            var afterQueue = [];

            var beatRequested = false;

            /**
             * Scheduler for tasks that possibly synchronously trigger creation of new tasks, that need some common
             * work to be done before or after all of these tasks (and all tasks scheduled in the meantime) are
             * finished.
             *
             * An example would be model-manipulating operations in an application using AngularJS, that need to run
             * `$rootScope.$apply` after all operations are done, but only *once*.
             *
             * @name Heartbeat
             * @constructor
             */
            return {
               registerHeartbeatListener: registerHeartbeatListener,
               onBeforeNext: onBeforeNext,
               onNext: onNext,
               onAfterNext: onAfterNext
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Registers a listener, that is called whenever a heartbeat occurs.
             * It is called after the before and next queues were processed, but before working off the after queue has
             * started.
             * In contrast to the `on*` methods, listeners are not removed after a tick, but will be called again each
             * time a heartbeat occurs.
             * Instead this method returns a function to manually remove the listener again.
             *
             * @param  {Function} listener
             *    the listener to register
             *
             * @return {Function}
             *    a function to remove the listener again
             *
             * @memberof Heartbeat
             */
            function registerHeartbeatListener(listener) {
               heartbeatListeners.push(listener);

               return function () {
                  var index = void 0;
                  while ((index = heartbeatListeners.indexOf(listener)) !== -1) {
                     heartbeatListeners.splice(index, 1);
                  }
               };
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Schedules a function for the next heartbeat.
             * If no heartbeat was triggered yet, it will be requested now.
             *
             * @param {Function} func
             *    a function to schedule for the next tick
             *
             * @memberof Heartbeat
             */
            function onNext(func) {
               if (!beatRequested) {
                  beatRequested = true;
                  nextTick(function () {
                     while (beforeQueue.length) {
                        beforeQueue.shift()();
                     }
                     while (nextQueue.length) {
                        nextQueue.shift()();
                     }
                     heartbeatListeners.forEach(function (listener) {
                        return listener();
                     });
                     if (afterQueue.length) {
                        // run after-queue once all directly resolvable promises are through.
                        timeout(function () {
                           // Ensure that no further event bus deliveries were scheduled
                           if (!beatRequested) {
                              while (afterQueue.length) {
                                 afterQueue.shift()();
                              }
                           }
                        });
                     }
                     beatRequested = false;
                  });
               }
               nextQueue.push(func);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Schedules a function to be called before the next heartbeat occurs.
             * Note that `func` may never be called, if there is no next heartbeat since calling this function won't
             * trigger a new heartbeat.
             *
             * @param {Function} func
             *    a function to call before the next heartbeat
             *
             * @memberof Heartbeat
             */
            function onBeforeNext(func) {
               beforeQueue.push(func);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Schedules a function to be called after the next heartbeat occured.
             * Note that `func` may never be called, if there is no next heartbeat since calling this function won't
             * trigger a new heartbeat.
             *
             * @param {Function} func
             *    a function to call after the next heartbeat
             *
             * @memberof Heartbeat
             */
            function onAfterNext(func) {
               afterQueue.push(func);
            }
         }

         /***/
      },
      /* 22 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__area_helper__ = __webpack_require__(3);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         function create(areaHelper, className, widget) {

            var exports = {
               createController: createController,
               domAttachTo: domAttachTo,
               domDetach: domDetach,
               destroy: destroy
            };
            var layoutNode = void 0;
            var deregister = function deregister() {};

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createController() {}
            // noop


            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function domAttachTo(areaElement, htmlTemplate) {
               if (layoutNode) {
                  areaElement.appendChild(layoutNode);
                  return;
               }

               layoutNode = document.createElement('div');
               layoutNode.id = widget.id;
               layoutNode.className = className;
               layoutNode.innerHTML = htmlTemplate;

               var areas = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__area_helper__["b" /* findWidgetAreas */])(layoutNode);
               var deregisterFuncs = Object.keys(areas).map(function (areaName) {
                  return areaHelper.register(widget.id + '.' + areaName, areas[areaName]);
               });
               deregister = function deregister() {
                  return deregisterFuncs.forEach(function (func) {
                     return func();
                  });
               };

               areaElement.appendChild(layoutNode);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function domDetach() {
               if (layoutNode.parentNode) {
                  layoutNode.parentNode.removeChild(layoutNode);
               }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function destroy() {
               deregister();
               layoutNode = null;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            return exports;
         }

         /***/
      },
      /* 23 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_object__ = __webpack_require__(1);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         var senderOptions = { sender: 'AxPageController' };
         var subscriberOptions = { subscriber: 'AxPageController' };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * The LocaleManager initializes the locale(s) and implements changes to them.
          *
          * Before publishing the state of all configured locales, it listens to change requests, allowing
          * widgets and activities (such as a LocaleSwitcherWidget) to influence the state of locales before
          * the navigation is complete.
          */

         function create(eventBus, configuration) {

            var exports = {
               initialize: initialize,
               subscribe: subscribe,
               unsubscribe: unsubscribe
            };

            var configLocales = configuration.ensure('i18n.locales');
            var i18n = void 0;
            var initialized = void 0;
            var unsubscribeFromEventBus = function unsubscribeFromEventBus() {};

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function publish(locale) {
               var event = { locale: locale, languageTag: i18n[locale] };
               return eventBus.publish('didChangeLocale.' + locale, event, senderOptions);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function initialize() {
               initialized = true;
               return Promise.all(Object.keys(configLocales).map(publish));
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function unsubscribe() {
               unsubscribeFromEventBus();
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function subscribe() {
               i18n = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["deepClone"])(configLocales);
               initialized = false;

               unsubscribeFromEventBus = eventBus.subscribe('changeLocaleRequest', function (event) {
                  i18n[event.locale] = event.languageTag;
                  if (initialized) {
                     publish(event.locale);
                  }
               }, subscriberOptions);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            return exports;
         }

         /***/
      },
      /* 24 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__area_helper__ = __webpack_require__(3);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__layout_widget_adapter__ = __webpack_require__(22);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
               for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
               }return arr2;
            } else {
               return Array.from(arr);
            }
         }

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         function create(eventBus, pageLoader, layoutLoader, widgetLoader, localeManager, visibilityManager, pagesCollector) {

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(eventBus).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(pageLoader).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(layoutLoader).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(widgetLoader).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(localeManager).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(visibilityManager).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(pagesCollector).isNotNull();

            var pageController = void 0;

            var pageServiceApi = {
               createControllerFor: function createControllerFor(pageElement) {
                  __WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */].state(!pageController, 'Cannot create a page controller more than once.');
                  __WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */].state(pageElement instanceof HTMLElement, 'A page controller can only be created for a valid DOM element.');

                  pageController = createPageController(pageElement);
                  return pageController;
               },
               controller: function controller() {
                  return pageController;
               }
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createPageController(pageElement) {

               var _areaHelper = null;
               var api = {
                  setupPage: setupPage,
                  tearDownPage: tearDownPage,
                  areaHelper: function areaHelper() {
                     return _areaHelper;
                  }
               };

               /** Delay between sending didLifeCycle and attaching widget templates. */
               var WIDGET_ATTACH_DELAY_MS = 5;
               var COLLABORATOR_ID = 'AxPageController';
               var LIFECYCLE_EVENT = { lifecycleId: 'default' };
               var EVENT_OPTIONS = { sender: COLLABORATOR_ID };
               var DEFAULT_AREAS = [{ name: 'activities', hidden: true }, { name: 'popups' }, { name: 'popovers' }];

               var activeWidgetAdapterWrappers = [];
               var cleanUpLayout = function cleanUpLayout() {};

               pageElement.innerHTML = '';

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function setupPage(pageName) {
                  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(pageName).hasType(String).isNotNull();

                  return pageLoader.load(pageName).then(function (page) {
                     _areaHelper = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__area_helper__["a" /* create */])(page);
                     visibilityManager.setAreaHelper(_areaHelper);

                     var layoutPromise = layoutLoader.load(page.layout).then(function (layoutInfo) {
                        cleanUpLayout = renderLayout(pageElement, _areaHelper, layoutInfo);
                     });

                     localeManager.subscribe();
                     var layoutWidget = function layoutWidget(widget) {
                        return layoutWidgetAdapterFor(_areaHelper, widget);
                     };

                     // instantiate controllers wrapped by widget adapters
                     var widgetPromises = widgetsForPage(page).map(function (widget) {
                        return 'layout' in widget ? layoutWidget(widget) : widgetLoader.load(widget);
                     });

                     return Promise.all([].concat(_toConsumableArray(widgetPromises), [layoutPromise])).then(function (results) {
                        return results.slice(0, -1);
                     });
                  }).then(function (widgetAdapterWrappers) {
                     pagesCollector.collectCurrentPage(pageName);
                     activeWidgetAdapterWrappers = widgetAdapterWrappers;
                  }).then(localeManager.initialize).then(function () {
                     return eventBus.publishAndGatherReplies('beginLifecycleRequest.default', LIFECYCLE_EVENT, EVENT_OPTIONS);
                  }).then(visibilityManager.initialize)
                  // Give the widgets (a little) time to settle on the event bus before $digesting and painting:
                  .then(function () {
                     return delay(WIDGET_ATTACH_DELAY_MS);
                  }).then(function () {
                     return _areaHelper.attachWidgets(activeWidgetAdapterWrappers);
                  });
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function tearDownPage() {
                  visibilityManager.unsubscribe();
                  localeManager.unsubscribe();

                  return eventBus.publishAndGatherReplies('endLifecycleRequest.default', LIFECYCLE_EVENT, EVENT_OPTIONS).then(function () {
                     activeWidgetAdapterWrappers.forEach(function (wrapper) {
                        return wrapper.destroy();
                     });
                     activeWidgetAdapterWrappers = [];
                     cleanUpLayout();
                     cleanUpLayout = function cleanUpLayout() {};
                  });
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function widgetsForPage(page) {
                  return Object.keys(page.areas).reduce(function (widgets, areaName) {
                     var areaWidgets = page.areas[areaName];
                     return areaWidgets.reduce(function (widgets, widget) {
                        widget.area = areaName;
                        return [].concat(_toConsumableArray(widgets), [widget]);
                     }, widgets);
                  }, []);
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function layoutWidgetAdapterFor(areaHelper, widget) {
                  return layoutLoader.load(widget.layout).then(function (_ref) {
                     var className = _ref.className,
                         html = _ref.html;

                     var adapter = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__layout_widget_adapter__["a" /* create */])(areaHelper, className, {
                        area: widget.area,
                        id: widget.id,
                        path: widget.layout
                     });

                     return {
                        id: widget.id,
                        adapter: adapter,
                        destroy: adapter.destroy,
                        templatePromise: Promise.resolve(html)
                     };
                  });
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function renderLayout(pageElement, areaHelper, layoutInfo) {
                  addClass(pageElement, layoutInfo.className);
                  pageElement.innerHTML = layoutInfo.html;

                  var areas = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__area_helper__["b" /* findWidgetAreas */])(pageElement);
                  var deregisterFuncs = Object.keys(areas).map(function (areaName) {
                     return areaHelper.register(areaName, areas[areaName]);
                  });

                  DEFAULT_AREAS.forEach(function (area) {
                     if (areaHelper.exists(area.name)) {
                        return;
                     }

                     var node = document.createElement('div');
                     // We only set the attribute here for debugging purposes
                     node.setAttribute('ax-widget-area', area.name);
                     if (area.hidden) {
                        node.style.display = 'none';
                     }
                     deregisterFuncs.push(areaHelper.register(area.name, node));
                     pageElement.appendChild(node);
                  });

                  return function () {
                     deregisterFuncs.forEach(function (func) {
                        return func();
                     });
                     removeClass(pageElement, layoutInfo.className);
                  };
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               return api;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            return pageServiceApi;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function addClass(element, cssClass) {
            if (element.classList) {
               element.classList.add(cssClass);
               return;
            }
            element.className += ' ' + cssClass;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function removeClass(element, cssClass) {
            if (element.classList) {
               element.classList.remove(cssClass);
               return;
            }
            element.className = element.className.split(' ').map(function (c) {
               return c.trim();
            }).filter(function (c) {
               return c !== cssClass;
            }).join(' ');
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function delay(ms) {
            return new Promise(function (resolve) {
               return setTimeout(resolve, ms);
            });
         }

         /***/
      },
      /* 25 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_object__ = __webpack_require__(1);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         var _slicedToArray = function () {
            function sliceIterator(arr, i) {
               var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                     _arr.push(_s.value);if (i && _arr.length === i) break;
                  }
               } catch (err) {
                  _d = true;_e = err;
               } finally {
                  try {
                     if (!_n && _i["return"]) _i["return"]();
                  } finally {
                     if (_d) throw _e;
                  }
               }return _arr;
            }return function (arr, i) {
               if (Array.isArray(arr)) {
                  return arr;
               } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
               } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
               }
            };
         }();

         var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
            return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
         } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
         };

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /**
          * Module providing the page.js router factory.
          *
          * @module pagejs_router
          */

         var ROUTE_PARAM_MATCHER = /\/:([^/?(]+)(\(\.\*\)|\?)?/g;
         var TRAILING_SEGMENTS_MATCHER = /\/(_\/)*_?$/;

         /**
          * Creates and returns a new page.js router instance from its dependencies.
          *
          * @param {Object} pagejs
          *    the pagejs router module (or a compatible mock)
          * @param {Browser} browser
          *    the browser, used to determine the document base href
          * @param {Configuration} configuration
          *    the configuration instance, used to lookup router configuration as described above
          *
          * @return {PagejsRouter}
          *    a router instance that will route as soon as `registerRoutes` is invoked
          *
          * @private
          */
         function create(pagejs, browser, configuration) {

            var hashbang = configuration.get('router.pagejs.hashbang', false);
            var queryEnabled = configuration.ensure('router.query.enabled');

            var base = configuration.get('router.base') || fallbackBase(hashbang);
            var origin = originFromLocation(browser.location());
            var absoluteBase = browser.resolve(base, origin);

            /**
             * Router implementation based on [page.js](https://visionmedia.github.io/page.js/).
             *
             * This router allows to register flow patterns in page.js syntax so that their handler is activated when
             * the corresponding URL is entered in the browser. While that alone does not add much to the
             * functionality built into page.js, this router also allows to construct URLs based on a pattern and
             * corresponding substitution parameters. Finally, users can trigger navigation directly.
             *
             * Note that the router supports various configuration options:
             *
             *  - `router.pagejs`: configuration object that is directly passed to page.js (such as `click`,
             *    `popstate`, `dispatch`, `hashbang`). The application is responsible for specifying the required
             *    options, as LaxarJS does not touch the page.js defaults otherwise. Consult the page.js documentation
             *    for more information
             *  - `router.query.enabled`: if `true`, query parameters are automatically transformed into additional
             *    place parameters and vice versa. The default is `false`
             *  - `router.base`: The base path under which to perform routing. If omitted, the document base href is
             *    used
             *
             * Note that this router encodes/decodes certain parameters in a way that is different from page.js:
             *
             *  - when the value `null` is encoded into a URL path segment, it is encoded as `_`
             *  - the value `/` is double-encoded
             *
             * @name PagejsRouter
             * @constructor
             */
            return {
               registerRoutes: registerRoutes,
               navigateTo: navigateTo,
               constructAbsoluteUrl: constructAbsoluteUrl
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Register all routes defined in the given route map, as well as a fallback route that should be used
             * when none of the other routes match. Also causes the initial route to be triggered.
             *
             * @param {Object.<String, Function>} routeMap
             *    a map of routing patterns in page.js syntax to the corresponding handler functions. When invoked,
             *    the handler functions will receive the decoded parameter values for their pattern and (if configured)
             *    from the query string, as a map from string parameter name to string value
             * @param {Function} fallbackHandler
             *    a handler that is invoked when none of the configured routes match. It receives the failed path as
             *    a string argument
             *
             * @memberof PagejsRouter
             */
            function registerRoutes(routeMap, fallbackHandler) {
               pagejs.base(base);
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["forEach"])(routeMap, function (handler, pattern) {
                  pagejs(pattern, function (context) {
                     handler(collectParameters(pattern, context));
                  });
               });
               pagejs('*', function (context) {
                  fallbackHandler(context.path);
               });
               pagejs.start(configuration.get('router.pagejs', {}));
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Change the browser location to a different routable URL, from pattern and parameters. This is also
             * called reverse-routing.
             *
             * @param {String[]} patterns
             *    a list of patterns to choose from. This allows the router to pick the "best" pattern, such as the
             *    pattern containing the largest number of given parameters. This router always picks the first pattern
             *    for now.
             * @param {Object} parameters
             *    parameter values to substitute into the pattern to generate a URL
             * @param {Boolean} [replaceHistory=true]
             *    if `true`, the current history entry is replaced with the new one, otherwise a new entry is pushed.
             *    Useful to express redirects
             *
             * @memberof PagejsRouter
             */
            function navigateTo(patterns, parameters) {
               var replaceHistory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

               var path = constructPath(patterns, parameters);
               (replaceHistory ? pagejs.redirect : pagejs.show)(path);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Create a routable URL, from pattern and parameters. This allows to create link-hrefs without repeating
             * URL patterns throughout the code base.
             *
             * @param {Array<String>} patterns
             *    a list of patterns to choose from. This allows the router to pick the "best" pattern, such as the
             *    pattern containing the largest number of given parameters. This router always picks the first pattern
             *    for now.
             * @param {Object} parameters
             *    parameter values to substitute into the pattern to generate a URL
             * @param {Object} parameterDefaults
             *    only applicable if query strings are enabled by configuration: before a parameter is encoded into the
             *    query string, it is checked against the default. Only values that are different from their default
             *    are kept
             *
             * @return {String} the resulting URL, including schema and host
             *
             * @memberof PagejsRouter
             */
            function constructAbsoluteUrl(patterns, parameters, parameterDefaults) {
               var routingPath = constructPath(patterns, parameters, parameterDefaults);
               return hashbang ? absoluteBase + '#!' + routingPath : '' + absoluteBase + routingPath;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function constructPath(patterns, parameters) {
               var bestPattern = patterns[0];
               var path = bestPattern.replace(ROUTE_PARAM_MATCHER, function ($0, $param, $modifier) {
                  var replacement = encodeSegment(parameters[$param], $modifier === '(.*)');
                  delete parameters[$param];
                  return '/' + replacement;
               }).replace(TRAILING_SEGMENTS_MATCHER, '/');

               if (queryEnabled) {
                  var _ret = function () {
                     var query = [];
                     __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["forEach"])(parameters, function (value, parameterName) {
                        var encodedKey = encodeURIComponent(parameterName);
                        if (value === true) {
                           query.push(encodedKey);
                           return;
                        }
                        if (value === false || value == null) {
                           return;
                        }
                        query.push(encodedKey + '=' + encodeURIComponent(value));
                     });

                     if (query.length) {
                        return {
                           v: path + '?' + query.join('&')
                        };
                     }
                  }();

                  if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
               }

               return path;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function collectParameters(pattern, context) {
               var _context$querystring = context.querystring,
                   querystring = _context$querystring === undefined ? '' : _context$querystring,
                   _context$params = context.params,
                   params = _context$params === undefined ? {} : _context$params;

               var parameters = {};
               if (queryEnabled && querystring.length) {
                  querystring.split('&').map(function (_) {
                     return _.split('=').map(decodeURIComponent);
                  }).forEach(function (_ref) {
                     var _ref2 = _slicedToArray(_ref, 2),
                         key = _ref2[0],
                         value = _ref2[1];

                     parameters[key] = value !== undefined ? value : true;
                  });
               }
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["forEach"])(params, function (value, key) {
                  var isMultiSegment = pattern.indexOf('/:' + key + '(.*)') !== -1;
                  parameters[key] = decodeSegment(value, isMultiSegment);
               });
               return parameters;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Encode a parameter value for use as path segment(s) in routing.
             *
             * Usually, values are simply URL-encoded, but there are special cases:
             *
             *  - `null` and `undefined` are encoded as '_',
             *  - other non-string values are converted to strings before URL encoding,
             *  - slashes ('/') are double-encoded to '%252F', so that page.js ignores them during route matching,
             *  - underscore ('_') is double-encoded to '%255F', to avoid confusion with '_' (null).
             *
             * When decoded, for use in didNavigate events, the original values will be restored, except for:
             *  - non-string input values, which will always be decoded into strings,
             *  - `undefined` values which will be decoded to `null`.
             *
             * @param {*} value
             *   the parameter to encode
             * @param {Boolean} [isMultiSegment=false]
             *   determines if encoded value may contain slashes (true) or if slashes are double-encoded so that the
             *   parameter can always be matched by a single path segment (false)
             * @return {String}
             *   the encoded value, for use as a path segment in URLs
             *
             * @private
             */
            function encodeSegment(value, isMultiSegment) {
               if (value == null) {
                  return '_';
               }
               var urlSegments = encodeURIComponent(value).replace(/_/g, '%255F');
               return isMultiSegment ? urlSegments : urlSegments.replace(/%2F/g, '%252F');
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Decodes a place parameter value from a path segment, to restore it for use in will/didNavigate events.
             *
             * Usually, this reverses the application of {#encodeSegment} after the browser has decoded a URL, except:
             *  - path-segments based on non-string input values, which will always be decoded into strings,
             *  - path-segments based on `undefined` values which will be decoded to `null`.
             *
             * Note that while the browser has already performed URL-decoding, this function replaces `%2F` into `/`
             * and `%5F` to `_`, to be compatible with the double-encoding performaed by {#encodeSegment}.
             *
             * @param {String} value
             *   the encoded parameter segment to decode
             * @param {Boolean} [isMultiSegment=false]
             *   determines if url-encoded slashes in the value were part of the original input (true) or if slashes
             *   in the given value were double-encoded by {#encodeSegment} and need additional decoding (false)
             * @return {String}
             *   the decoded value, for use as a path segment in URLs
             *
             * @private
             */
            function decodeSegment(value, isMultiSegment) {
               if (value === '_' || value == null) {
                  return null;
               }
               var segments = value.replace(/%5F/g, '_');
               return isMultiSegment ? segments : segments.replace(/%2F/g, '/');
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function fallbackBase(hashbang) {
               if (hashbang) {
                  return browser.location().pathname;
               }
               // relies on the HTML `base` element being present
               var documentBase = browser.resolve('.').replace(/\/$/, '');
               return documentBase;
            }
         }

         function originFromLocation(_ref3) {
            var protocol = _ref3.protocol,
                hostname = _ref3.hostname,
                port = _ref3.port;

            return protocol + '://' + hostname + (port ? ':' + port : '');
         }

         /***/
      },
      /* 26 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /**
          * Module providing the StorageApi factory.
          *
          * Widgets and activities can access their StorageApi instance by requesting the injection
          * {@link widget_services#axStorage axStorage}, or use
          * {@link widget_services#axGlobalStorage axGlobalStorage} for shared items.
          *
          * As such, in most cases only the {@link StorageApi} documentation is relevant.
          *
          * @module storage
          */

         var SESSION = 'sessionStorage';
         var LOCAL = 'localStorage';

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * @param {Object} backend
          *    the K/V store, probably only accepting string values
          * @param {String} namespace
          *    prefix for all keys for namespacing purposes
          *
          * @return {StorageApi}
          *    a storage wrapper to the given backend with `getItem`, `setItem` and `removeItem` methods
          *
          * @private
          */
         function createStorage(backend, namespace) {

            /**
             * Provides a convenient API over the browser's `window.localStorage` and `window.sessionStorage` objects.
             * If a browser doesn't support [web storage](http://www.w3.org/TR/webstorage/), a warning is logged to the
             * `console` (if available) and a non-persistent in-memory store will be used instead. Note that this can
             * for example also happen when using Mozilla Firefox with cookies disabled and as such isn't limited to
             * older browsers.
             *
             * Additionally, in contrast to plain *web storage* access, non-string values will be automatically passed
             * through JSON (de-) serialization on storage or retrieval. All keys will be prepended with a combination
             * of a fixed (`ax.`) and an application-specific namespace (configured using `storagePrefix` with fallback
             * to `name`) to avoid naming clashes with other (LaxarJS) web applications running on the same host and
             * port. All {@link StorageApi} accessor methods should be called without any namespace as it is
             * prepended automatically.
             *
             * @name StorageApi
             * @constructor
             */
            return {
               getItem: getItem,
               setItem: setItem,
               removeItem: removeItem
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Retrieves a `value` by `key` from the store. JSON deserialization will automatically be applied.
             *
             * @param {String} key
             *    the key of the item to retrieve (without namespace prefix)
             *
             * @return {*}
             *    the value or `null` if it doesn't exist in the store
             *
             * @memberof StorageApi
             */
            function getItem(key) {
               var item = backend.getItem(namespace + '.' + key);
               return item && JSON.parse(item);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Sets a `value` for a `key`. The value must be JSON serializable. An existing value will be overwritten.
             *
             * @param {String} key
             *    the key of the item to set (without namespace prefix)
             * @param {*} value
             *    the new value to set
             *
             * @memberof StorageApi
             */
            function setItem(key, value) {
               var nsKey = namespace + '.' + key;
               if (value === undefined) {
                  backend.removeItem(nsKey);
               } else {
                  backend.setItem(nsKey, JSON.stringify(value));
               }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Removes the value associated with `key` from the store.
             *
             * @param {String} key
             *    the key of the item to remove (without namespace prefix)
             *
             * @memberof StorageApi
             */
            function removeItem(key) {
               backend.removeItem(namespace + '.' + key);
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function getOrFakeBackend(browser, webStorageName) {
            var browserConsole = browser.console();
            var store = window[webStorageName];
            if (store.setItem && store.getItem && store.removeItem) {
               try {
                  var testKey = 'ax_.storage.test';
                  // In iOS Safari Private Browsing, this will fail:
                  store.setItem(testKey, 1);
                  store.removeItem(testKey);
                  return store;
               } catch (e) {
                  // setItem failed: must use fake storage
               }
            }

            if (browserConsole) {
               var method = 'warn' in browserConsole ? 'warn' : 'log';
               browserConsole[method]('window.' + webStorageName + ' not available: Using non-persistent polyfill. \n' + 'Try disabling private browsing or enabling cookies.');
            }

            var backend = {};
            return {
               getItem: function getItem(key) {
                  return backend[key] || null;
               },
               setItem: function setItem(key, val) {
                  backend[key] = val;
               },
               removeItem: function removeItem(key) {
                  if (key in backend) {
                     delete backend[key];
                  }
               }
            };
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function applicationPrefix(configuration) {
            return configuration.get('storagePrefix', configuration.ensure('name'));
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Creates a new storage factory. In most cases this module will be called without arguments,
          * but having the ability to provide them is useful e.g. for mocking purposes within tests.
          * If the arguments are omitted, an attempt is made to access the native browser WebStorage api.
          * If that fails, storage is only mocked by an in memory map (thus actually unavailable).
          *
          * Developers are free to use polyfills to support cases where local- or session-storage may not be
          * available. Just make sure to initialize the polyfills before this module.
          *
          * @param {Object} configuration
          *    a configuration service instance, to determine a storage prefix based on the configured name
          * @param {Object} browser
          *    the browser api adapter
          * @param {Object} [localStorageBackend]
          *    the backend for local storage. Default is `window.localStorage`
          * @param {Object} [sessionStorageBackend]
          *    the backend for session storage. Default is `window.sessionStorage`
          *
          * @return {StorageFactory}
          *    a new storage factory
          *
          * @private
          */
         function create(configuration, browser, localStorageBackend, sessionStorageBackend) {

            var localBackend = localStorageBackend || getOrFakeBackend(browser, LOCAL);
            var sessionBackend = sessionStorageBackend || getOrFakeBackend(browser, SESSION);
            var prefix = 'ax.' + applicationPrefix(configuration) + '.';

            /**
             * The API returned by the module's `create` function.
             *
             * @name StorageFactory
             * @constructor
             */
            return {

               /**
                * Returns a local storage object for a specific local namespace.
                *
                * @param {String} namespace
                *    the namespace to prepend to keys
                *
                * @return {StorageApi}
                *    the local storage object
                *
                * @memberof StorageFactory
                */
               getLocalStorage: function getLocalStorage(namespace) {
                  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(namespace).hasType(String).isNotNull();

                  return createStorage(localBackend, prefix + namespace);
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * Returns a session storage object for a specific local namespace.
                *
                * @param {String} namespace
                *    the namespace to prepend to keys
                *
                * @return {StorageApi}
                *    the session storage object
                *
                * @memberof StorageFactory
                */
               getSessionStorage: function getSessionStorage(namespace) {
                  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(namespace).hasType(String).isNotNull();

                  return createStorage(sessionBackend, prefix + namespace);
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * Returns the local storage object for application scoped keys. This is equivalent to
                * `storage.getLocalStorage( 'app' )`.
                *
                * @return {StorageApi}
                *    the application local storage object
                *
                * @memberof StorageFactory
                */
               getApplicationLocalStorage: function getApplicationLocalStorage() {
                  return createStorage(localBackend, prefix + 'app');
               },

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * Returns the session storage object for application scoped keys. This is equivalent to
                * `storage.getSessionStorage( 'app' )`.
                *
                * @return {StorageApi}
                *    the application session storage object
                *
                * @memberof StorageFactory
                */
               getApplicationSessionStorage: function getApplicationSessionStorage() {
                  return createStorage(sessionBackend, prefix + 'app');
               }
            };
         }

         /***/
      },
      /* 27 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_object__ = __webpack_require__(1);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         function create(log) {

            var api = {
               started: started
            };

            var idCounter = 0;

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function started(optionalOptions) {
               var timer = new Timer(optionalOptions);
               timer.start();
               return timer;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function Timer(optionalOptions) {
               this.options_ = Object.assign({
                  label: 'timer' + idCounter++
               }, optionalOptions);
               this.startTime_ = null;
               this.stopTime_ = null;
               this.splitTimes_ = [];
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            Timer.prototype.getData = function () {
               return {
                  label: this.options_.label,
                  startTime: this.startTime_,
                  stopTime: this.stopTime_,
                  splitTimes: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["deepClone"])(this.splitTimes_)
               };
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            Timer.prototype.start = function () {
               this.startTime_ = Date.now();
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            Timer.prototype.splitTime = function (optionalLabel) {
               this.splitTimes_.push({
                  time: Date.now(),
                  label: optionalLabel || 'split' + this.splitTimes_.length
               });
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            Timer.prototype.stop = function () {
               this.stopTime_ = Date.now();
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            Timer.prototype.stopAndLog = function (optionalLabel) {
               this.stop();

               var startTime = this.startTime_;
               var endTime = Date.now();
               var label = optionalLabel || 'Timer Stopped';
               this.splitTimes_.push({ label: label, time: endTime });

               var message = [];
               message.push('Timer "', this.options_.label, '": ');
               message.push('start at ', new Date(startTime).toISOString(), ' (client), ');
               message.push(label, ' after ', (endTime - startTime).toFixed(0), 'ms ');
               message.push('(checkpoints: ');
               var intervals = [];
               this.splitTimes_.reduce(function (from, data) {
                  intervals.push('"' + data.label + '"=' + (data.time - from).toFixed(0) + 'ms');
                  return data.time;
               }, startTime);
               message.push(intervals.join(', '), ')');
               log.info(message.join(''));
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            return api;
         }

         /***/
      },
      /* 28 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony export (immutable) */
         __webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         var senderOptions = { sender: 'AxPageController', deliverToSender: false };
         var subscriberOptions = { subscriber: 'AxPageController' };

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * The visibility event manager initializes and coordinates events for widget area visibility.
          *
          * It subscribes to all visibility changes and propagates them to nested widget areas
          * (if applicable). It is not concerned with the resulting DOM-visibility of individual controls:
          * the `axVisibilityService` takes care of that.
          *
          * @param {EventBus} eventBus
          *    an event bus instance
          * @return {Object}
          *    a function to trigger initialization of the manager and initial widget visibility
          */
         function create(eventBus) {

            var exports = {
               initialize: initialize,
               setAreaHelper: setAreaHelper,
               unsubscribe: unsubscribe
            };

            var areaHelper = void 0;
            var unsubscribeFromAreaVisibilityRequest = function unsubscribeFromAreaVisibilityRequest() {};
            var unsubscribeFromWidgetVisibilityRequest = function unsubscribeFromWidgetVisibilityRequest() {};
            var ROOT = '';

            function setAreaHelper(_) {
               areaHelper = _;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function initialize() {
               // broadcast visibility changes in individual widgets to their nested areas
               unsubscribeFromWidgetVisibilityRequest = eventBus.subscribe('changeWidgetVisibilityRequest', function (event) {
                  var affectedAreas = areaHelper.areasInWidget(event.widget);
                  var will = ['willChangeWidgetVisibility', event.widget, event.visible].join('.');
                  var did = ['didChangeWidgetVisibility', event.widget, event.visible].join('.');

                  eventBus.publish(will, event, senderOptions);

                  Promise.all((affectedAreas || []).map(event.visible ? show : hide)).then(function () {
                     return eventBus.publish(did, event, senderOptions);
                  });
               }, subscriberOptions);

               // broadcast visibility changes in widget areas to their nested areas
               unsubscribeFromAreaVisibilityRequest = eventBus.subscribe('changeAreaVisibilityRequest', function (event) {
                  return initiateAreaChange(event.area, event.visible);
               }, subscriberOptions);

               return implementAreaChange(ROOT, true);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function show(area) {
               return requestAreaChange(area, true);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function hide(area) {
               return requestAreaChange(area, false);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * First, publish a `changeAreaVisibilityRequest` to ask if some widget would like to manage the
             * given area's visibility.
             * If no widget responds, self-issue a will/did-response to notify interested widgets in the area
             * of their new visibility status.
             * In either case, manage the propagation to nested areas and inform the area helper so that it
             * may compile and attach the templates of any newly visible widgets.
             *
             * @param {String} area
             *    the area whose visibility to update
             * @param {Boolean} visible
             *    the new visibility state of the given area, to the best knowledge of the client
             * @return {Promise}
             *    promise that is resolved after the change request is completed
             */
            function requestAreaChange(area, visible) {
               var request = ['changeAreaVisibilityRequest', area].join('.');
               var event = { area: area, visible: visible };
               return eventBus.publishAndGatherReplies(request, event, senderOptions).then(function (responses) {
                  if (responses.length === 0) {
                     // no one took responsibility, so the event manager determines visibility by area nesting
                     return initiateAreaChange(area, visible);
                  }
                  // assume the first 'did'-response to be authoritative:
                  var response = responses[0];
                  return implementAreaChange(area, response.event.visible);
               });
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            // eslint-disable-next-line valid-jsdoc
            /**
             * Set the new visibility state for the given area, then issue requests for the child areas.
             * Inform the area helper so that it may compile and attach the templates of any newly visible
             * widgets.
             */
            function initiateAreaChange(area, visible) {
               var will = ['willChangeAreaVisibility', area, visible].join('.');
               var event = { area: area, visible: visible };
               return eventBus.publish(will, event, senderOptions).then(function () {
                  return implementAreaChange(area, visible);
               }).then(function () {
                  var did = ['didChangeAreaVisibility', area, visible].join('.');
                  return eventBus.publish(did, event, senderOptions);
               });
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function implementAreaChange(ofArea, areaVisible) {
               areaHelper.setVisibility(ofArea, areaVisible);
               var children = areaHelper.areasInArea(ofArea);
               if (!children) {
                  return Promise.resolve();
               }

               return Promise.all(children.map(areaVisible ? show : hide));
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function unsubscribe() {
               unsubscribeFromWidgetVisibilityRequest();
               unsubscribeFromAreaVisibilityRequest();
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            return exports;
         }

         /***/
      },
      /* 29 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__runtime_log__ = __webpack_require__(4);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__widget_services_i18n__ = __webpack_require__(30);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__widget_services_visibility__ = __webpack_require__(31);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /**
          * Factory for the services that are available to the controller of a widget, regardless of the underlying
          * view framework.
          *
          * @module widget_services
          */

         var INVALID_ID_MATCHER = /[^A-Za-z0-9_.-]/g;
         var ID_SEPARATOR = '-';

         function create(artifactProvider, configuration, controlLoader, globalEventBus, flowService, log, heartbeat, pageService, storage, toolingProviders) {

            var i18nOptions = configuration.ensure('i18n');

            return {
               forWidget: function forWidget(specification, widgetConfiguration, features) {
                  var decorators = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                  var widgetId = widgetConfiguration.id;
                  var widgetName = specification.name;

                  var instances = {
                     /**
                      * Area helper service instance.
                      *
                      * @type {AxAreaHelper}
                      */
                     axAreaHelper: null,

                     /**
                      * widget asset accessor instance.
                      *
                      * @type {AxAssets}
                      */
                     axAssets: null,

                     /**
                      * Interface to the configuration the application was bootstrapped with.
                      *
                      * @type {Configuration}
                      */
                     axConfiguration: null,

                     /**
                      * Context information and tiny service collection.
                      *
                      * @type {AxContext}
                      */
                     axContext: null,

                     /**
                      * The control loader api to provide access to control modules used by a widget.
                      *
                      * @type {ControlLoader}
                      */
                     axControls: null,

                     /**
                      * Event bus instance specifically enriched for a widget instance.
                      *
                      * @type {AxEventBus}
                      */
                     axEventBus: null,

                     /**
                      * The features the widget was configured with.
                      * Its structure depends solely on the schema defined in the widget's descriptor file
                      * (`widget.json`)
                      *
                      * @type {Object}
                      */
                     axFeatures: null,

                     /**
                      * Injection for the flow service.
                      *
                      * @type {FlowService}
                      */
                     axFlowService: null,

                     /**
                      * The global event bus instance of the application.
                      * {@link axEventBus} should always be prefered over this, since for example unsubscribing from
                      * event subscriptions on widget destruction needs be done manually and can lead to severe memory
                      * leaks if omitted.
                      * One valid use case could be an activity, that has permanent knowledge about the application's
                      * state and lifetime, and for example adds an inspector to the event bus.
                      *
                      * @type {EventBus}
                      */
                     axGlobalEventBus: null,

                     /**
                      * The global logger instance.
                      *
                      * @type {Logger}
                      */
                     axGlobalLog: null,

                     /**
                      * The global storage factory.
                      *
                      * @type {StorageFactory}
                      */
                     axGlobalStorage: null,

                     /**
                      * The heartbeat instance.
                      *
                      * @type {Heartbeat}
                      */
                     axHeartbeat: null,

                     /**
                      * I18n api specifically for the widget instance.
                      *
                      * @type {AxI18n}
                      */
                     axI18n: null,

                     /**
                      * A function that generates page wide unique ids based on ids that are unique within the scope
                      * of a widget.
                      *
                      * A common use case is the connection of a `label` HTML element and an `input` element via `for`
                      * and `id` attributes.
                      * For such cases ids should **always** be generated using this service.
                      *
                      * Example:
                      * ```js
                      * widgetDom.querySelector( 'label' ).setAttribute( 'for', axId( 'myField' ) );
                      * widgetDom.querySelector( 'input' ).setAttribute( 'id', axId( 'myField' ) );
                      * ```
                      *
                      * @param {String} localUniqueId
                      *    an identifier that is unique within a widget
                      *
                      * @return {String}
                      *    an identifier that is unique for the current page
                      *
                      * @type {Function}
                      */
                     axId: null,

                     /**
                      * The widget logger instance.
                      * This is basically the same as the {@link #axGlobalLog}, but adds the name of the widget as
                      * prefix and its id as suffix to every log message.
                      *
                      * @type {Logger}
                      */
                     axLog: null,

                     /**
                      * Ready to use storage apis for a widget.
                      * All keys are namespaced by the widget id to limit visibility to this specific instance.
                      *
                      * @type {AxStorage}
                      */
                     axStorage: null,

                     /**
                      * Access to the tooling provider API.
                      * TODO Fix the type (and document toolingProviders)
                      *
                      * @type {*}
                      */
                     axTooling: null,

                     /**
                      * Visibility services for a widget instance.
                      * @type {AxVisibility}
                      */
                     axVisibility: null
                  };

                  var services = Object.assign({}, instances);
                  var releaseHandlers = [];

                  registerServiceFactory('axAreaHelper', function () {
                     return createAreaHelperForWidget(widgetId);
                  }, function () {
                     instances.axAreaHelper.release();
                  });
                  registerServiceFactory('axAssets', function () {
                     return createAssetsServiceForWidget(widgetName);
                  });
                  registerService('axConfiguration', configuration);
                  registerServiceFactory('axContext', function () {
                     return createContextForWidget(widgetConfiguration, widgetId, services);
                  });
                  registerService('axControls', controlLoader);
                  registerServiceFactory('axEventBus', function () {
                     return createEventBusForWidget(services.axGlobalEventBus, widgetName, widgetId);
                  }, function () {
                     instances.axEventBus.release();
                  });
                  registerService('axFeatures', features);
                  registerService('axFlowService', flowService);
                  registerService('axGlobalEventBus', globalEventBus);
                  registerService('axGlobalLog', log);
                  registerService('axGlobalStorage', storage);
                  registerService('axHeartbeat', heartbeat);

                  registerServiceFactory('axI18n', function () {
                     return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__widget_services_i18n__["a" /* create */])(services.axContext, i18nOptions);
                  });
                  registerServiceFactory('axId', function () {
                     return createIdGeneratorForWidget(widgetId);
                  });
                  registerServiceFactory('axLog', function () {
                     return createLoggerForWidget(log, widgetName, widgetId);
                  });
                  registerServiceFactory('axStorage', function () {
                     return createStorageForWidget(storage, widgetId);
                  });
                  registerServiceFactory('axVisibility', function () {
                     return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__widget_services_visibility__["a" /* create */])(services.axContext, services.axAreaHelper);
                  });
                  registerService('axTooling', toolingProviders);

                  return {
                     services: services,
                     releaseServices: function releaseServices() {
                        releaseHandlers.forEach(function (f) {
                           f();
                        });
                     }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////

                  function registerService(name, instance) {
                     var decorate = decorators[name];
                     instances[name] = services[name] = decorate ? decorate(instance) : instance;
                  }

                  /////////////////////////////////////////////////////////////////////////////////////////////////////

                  function registerServiceFactory(name, factory, optionalRelease) {
                     Object.defineProperty(services, name, {
                        get: function get() {
                           if (!instances[name]) {
                              var decorate = decorators[name];
                              var instance = factory();
                              instances[name] = decorate ? decorate(instance) : instance;
                              if (optionalRelease) {
                                 releaseHandlers.push(optionalRelease);
                              }
                           }
                           return instances[name];
                        }
                     });
                  }
               }
            };

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createContextForWidget(widgetConfiguration, widgetId, services) {

               /**
                * This object encapsulates widget context information and provides access to the most important widget
                * specific service instances.
                * Most commonly this is used when working with
                * [LaxarJS Patterns](https://github.com/LaxarJS/laxar-patterns).
                *
                * @name AxContext
                * @constructor
                */
               return {

                  /**
                   * The event bus instance of the widget. This is the same as {@link #axEventBus}.
                   *
                   * @type {AxEventBus}
                   * @memberof AxContext
                   */
                  eventBus: services.axEventBus,

                  /**
                   * The configured features of the widget. This is the same as {@link #axFeatures}.
                   *
                   * @type {Object}
                   * @memberof AxContext
                   */
                  features: services.axFeatures,

                  /**
                   * The unique id generator function. This is the same as {@link #axId}.
                   *
                   * @type {Function}
                   * @memberof AxContext
                   */
                  id: services.axId,

                  /**
                   * The widget local log instance. This is the same as {@link #axLog}.
                   *
                   * @type {AxLog}
                   * @memberof AxContext
                   */
                  log: services.axLog,

                  /**
                   * Some information regarding the widget instance.
                   *
                   * The following fields are available:
                   * - `area`: full name of the area the widget is located in
                   * - `id`: the unique id of the widget on the page
                   * - `path`: path of the widget that was used to reference it in the according page or composition.
                   *    This is not the actual path on the file system, but most probably an alias known by the used
                   *    module loader.
                   *
                   * @type {Object}
                   * @memberof AxContext
                   */
                  widget: {
                     area: widgetConfiguration.area,
                     id: widgetId,
                     path: widgetConfiguration.widget
                  }
               };
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createAreaHelperForWidget(widgetId) {
               var deregisterFuncs = [];

               /**
                * @name AxAreaHelper
                * @constructor
                */
               return {

                  /**
                   * Query if a given widget area is currently visible by accessing the underlying area status through
                   * the page controller. Can be used to determine the current visibility state of an area without
                   * having to constantly observe visibility events.
                   *
                   * @param {String} fullAreaName
                   *    the global name of the area
                   *
                   * @return {Boolean}
                   *    the current visibility state of the given area
                   */
                  isVisible: function isVisible(fullAreaName) {
                     return pageService.controller().areaHelper().isVisible(fullAreaName);
                  },

                  /**
                   * Looks up the global name of a widget area within a widget, as generated by LaxarJS.
                   * This is the reverse of {@link #AxAreaHelper.localName()}.
                   *
                   * @param {String} localAreaName
                   *    the widget-local name of the area
                   *
                   * @return {String}
                   *    the globally valid name of the area
                   *
                   * @memberof AxAreaHelper
                   */
                  fullName: function fullName(localAreaName) {
                     __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(localAreaName || null).hasType(String).isNotNull();
                     return qualify(localAreaName);
                  },

                  /**
                   * Returns the local part of a global area name.
                   * This is the reverse of {@link #AxAreaHelper.fullName()}.
                   *
                   * @param {String} fullAreaName
                   *    the global name of the area
                   *
                   * @return {String}
                   *    the name of the area as it is known to the widget
                   *
                   * @memberof AxAreaHelper
                   */
                  localName: function localName(fullAreaName) {
                     __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(fullAreaName).hasType(String).isNotNull();
                     return unqualify(fullAreaName);
                  },

                  /**
                   * Registers a DOM element as area of a widget with the area helper.
                   *
                   * @param {String} localAreaName
                   *    the widget-local name of the area
                   * @param {HTMLElement} element
                   *    the element to register as widget area
                   *
                   * @memberof AxAreaHelper
                   */
                  register: function register(localAreaName, element) {
                     __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(localAreaName).hasType(String).isNotNull();
                     __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(element).hasType(Object).isNotNull();
                     var areaHelper = pageService.controller().areaHelper();
                     deregisterFuncs.push(areaHelper.register(qualify(localAreaName), element));
                  },
                  release: function release() {
                     deregisterFuncs.forEach(function (_) {
                        _();
                     });
                  }
               };

               function qualify(localAreaName) {
                  return widgetId + '.' + localAreaName;
               }

               function unqualify(fullAreaName) {
                  return fullAreaName.slice(widgetId.length + 1);
               }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createAssetsServiceForWidget(widgetName) {
               var widgetArtifacts = artifactProvider.forWidget(widgetName);

               /**
                * _Note:_ This service is a function with the {@link #AxAssets.url()}, {@link #AxAssets.forTheme()} and
                * {@link #AxAssets.urlForTheme()} functions as properties.
                *
                * Resolves an asset located directly in the widget folder or a subfolder of it.
                * Valid assets are all non-binary files like JSON or text files.
                * For binary files there exists the {@link #AxAssets.url} function.
                *
                * Example:
                * ```
                * function Controller( axAssets ) {
                *    axAssets( 'data.json' ).then( fileContent => { ... } );
                * }
                * ```
                *
                * @param {String} name
                *    name of the asset to resolve
                *
                * @return {Promise}
                *    promise for the asset
                *
                * @name AxAssets
                */
               var assetService = function assetService(name) {
                  return widgetArtifacts.asset(name);
               };

               /**
                * Resolves the absolute url to the given asset located directly in the widget folder or a subfolder of
                * it.
                * This can then be safely used in e.g. `video` or `img` tags.
                *
                * Example:
                * ```
                * function Controller( axAssets ) {
                *    axAssets.url( 'tux.jpg' ).then( url => { img.src = url; } );
                * }
                * ```
                *
                * @param  {String} name
                *    name of the asset the url should be returned of
                *
                * @return {Promise}
                *    promise for the url
                *
                * @memberof AxAssets
                */
               assetService.url = function (name) {
                  return widgetArtifacts.assetUrl(name);
               };

               /**
                * Resolves an asset from one of the `*.theme` subfolders of the widget.
                * The folder from which the asset is taken, depends on the selected theme and the availability of the
                * file within that theme (See
                * [here](http://laxarjs.org/docs/laxar-latest/manuals/creating_themes/#how-the-runtime-finds-css) for
                * further information on theme asset lookup).
                * Valid assets are all non-binary files like JSON or text files.
                * For binary files there exists the {@link #AxAssets.urlForTheme} function.
                *
                * Example:
                * ```
                * function Controller( axAssets ) {
                *    axAssets.forTheme( 'some-template.html' ).then( template => { ... } );
                * }
                * ```
                *
                * @param {String} name
                *    name of the asset to resolve
                *
                * @return {Promise}
                *    promise for the asset
                *
                * @memberof AxAssets
                */
               assetService.forTheme = function (name) {
                  return widgetArtifacts.assetForTheme(name);
               };

               /**
                * Resolves the absolute url to the given asset from one of the `*.theme` subfolders of the widget.
                * This can then be safely used in e.g. `video` or `img` tags.
                * The folder from which the asset is taken, depends on the selected theme and the availability of the
                * file within that theme (See
                * [here](http://laxarjs.org/docs/laxar-latest/manuals/creating_themes/#how-the-runtime-finds-css) for
                * further information on theme asset lookup).
                *
                * Example:
                * ```
                * function Controller( axAssets ) {
                *    axAssets.urlForTheme( 'icon.jpg' ).then( url => { img.src = url; } );
                * }
                * ```
                *
                * @param  {String} name
                *    name of the asset the url should be returned of
                *
                * @return {Promise}
                *    promise for the url
                *
                * @memberof AxAssets
                */
               assetService.urlForTheme = function (name) {
                  return widgetArtifacts.assetUrlForTheme(name);
               };
               return assetService;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createLoggerForWidget(logger, widgetName, widgetId) {
               var newLogger = Object.create(logger);
               newLogger.log = function (level, message) {
                  for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                     rest[_key - 2] = arguments[_key];
                  }

                  return logger.log.apply(logger, [level, enrich(message)].concat(rest, [__WEBPACK_IMPORTED_MODULE_1__runtime_log__["b" /* BLACKBOX */]]));
               };
               Object.keys(logger.levels).map(function (_) {
                  return _.toLowerCase();
               }).forEach(function (method) {
                  newLogger[method] = function (message) {
                     for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                        rest[_key2 - 1] = arguments[_key2];
                     }

                     return logger[method].apply(logger, [enrich(message)].concat(rest, [__WEBPACK_IMPORTED_MODULE_1__runtime_log__["b" /* BLACKBOX */]]));
                  };
               });
               return newLogger;

               function enrich(message) {
                  return widgetName + ': ' + message + ' (widget-id: ' + widgetId + ')';
               }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createStorageForWidget(storage, widgetId) {
               var namespace = 'widget-' + widgetId;

               /**
                * Ready to use storage API for a single widget instance.
                * All keys are namespaced by the widget id to limit visibility to this specific instance.
                *
                * @name AxStorage
                * @constructor
                */
               return {
                  /**
                   * An instance of the storage api using the persistent `window.localStorage`.
                   *
                   * @type {StorageApi}
                   * @memberof AxStorage
                   */
                  local: storage.getLocalStorage(namespace),

                  /**
                   * An instance of the storage api using the non-persistent `window.sessionStorage`.
                   *
                   * @type {StorageApi}
                   * @memberof AxStorage
                   */
                  session: storage.getSessionStorage(namespace)
               };
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createIdGeneratorForWidget(widgetId) {
               var charCodeOfA = 'a'.charCodeAt(0);
               function fixLetter(l) {
                  // We map invalid characters deterministically to valid lower case letters. Thereby a collision of
                  // two IDs with different invalid characters at the same positions is less likely to occur.
                  return String.fromCharCode(charCodeOfA + l.charCodeAt(0) % 26);
               }

               var prefix = 'ax' + ID_SEPARATOR + widgetId.replace(INVALID_ID_MATCHER, fixLetter) + ID_SEPARATOR;
               return function (localId) {
                  return prefix + ('' + localId).replace(INVALID_ID_MATCHER, fixLetter);
               };
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function createEventBusForWidget(eventBus, widgetName, widgetId) {

               var collaboratorId = 'widget.' + widgetName + '#' + widgetId;
               var inspectorRemoveFunctions = [];
               var unsubscribeFunctions = [];

               /**
                * This is an extension of the global {@link event_bus#EventBus EventBus} by widget specific information
                * and tasks.
                * For example a combination of the widget's name and its id is always used as subscriber and sender
                * id.
                * Hence for example {@link event_bus#EventBus.publishAndGatherReplies EventBus.publishAndGatherReplies}
                * works without passing in any options.
                *
                * Additionally all subscriptions of a widget are removed as soon as the widget itself is destroyed.
                * So in practice a widget will receive no further events after the `endLifecycleRequest` event
                * processing has finished.
                *
                * The documentation for the events bus api can be found {@linkplain event_bus here}.
                *
                * @name AxEventBus
                * @constructor
                */
               return {
                  addInspector: function addInspector(inspector) {
                     return makeAutoRemovable(inspectorRemoveFunctions, eventBus.addInspector(inspector));
                  },
                  unsubscribe: function unsubscribe(subscriber) {
                     return eventBus.unsubscribe(subscriber);
                  },
                  subscribe: function subscribe(eventName, subscriber, optionalOptions) {
                     var options = Object.assign({}, optionalOptions, { subscriber: collaboratorId });
                     var unsubscribe = eventBus.subscribe(eventName, subscriber, options);

                     return makeAutoRemovable(unsubscribeFunctions, unsubscribe);
                  },
                  publish: function publish(eventName, optionalEvent, optionalOptions) {
                     var options = Object.assign({}, optionalOptions, { sender: collaboratorId });
                     return eventBus.publish(eventName, optionalEvent, options);
                  },
                  publishAndGatherReplies: function publishAndGatherReplies(eventName, optionalEvent, optionalOptions) {
                     var options = Object.assign({}, optionalOptions, { sender: collaboratorId });
                     return eventBus.publishAndGatherReplies(eventName, optionalEvent, options);
                  },
                  release: function release() {
                     purgeAutoRemoveRegistries(inspectorRemoveFunctions, unsubscribeFunctions);
                  }
               };

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function makeAutoRemovable(registry, removeFunction) {
                  registry.push(removeFunction);
                  return function () {
                     removeFunction();
                     var index = registry.indexOf(removeFunction);
                     if (index !== -1) {
                        registry.splice(index, 1);
                     }
                  };
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function purgeAutoRemoveRegistries() {
                  for (var _len3 = arguments.length, registries = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                     registries[_key3] = arguments[_key3];
                  }

                  registries.forEach(function (registry) {
                     registry.forEach(function (_) {
                        _();
                     });
                     registry.length = 0;
                  });
               }
            }
         }

         /***/
      },
      /* 30 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_object__ = __webpack_require__(1);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__utilities_string__ = __webpack_require__(2);
         /* harmony export (immutable) */__webpack_exports__["a"] = create;
         var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
            return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
         } : function (obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
         };

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /**
          * Factory for i18n widget service instances.
          *
          * @module widget_services_i18n
          */

         var noDeliveryToSender = { deliverToSender: false };

         var primitives = {
            string: true,
            number: true,
            boolean: true
         };

         var normalize = memoize(function (languageTag) {
            return languageTag.toLowerCase().replace(/[_]/g, '-');
         });

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Creates a widget-specific helper for `didChangeLocale` events.
          *
          * The helper automatically observes the any changes to the locale that was configured under the `i18n`
          * feature, and can be asked for localization based on that locale. It also allows to `track` the current
          * language tag for all observed locale topics under the object `i18n.tags`. This object can be used to set
          * up value bindings and/or watchers so that other components may react to locale-changes in a data-driven
          * way.
          *
          * The i18n helper is an {@link AxI18nHandler} for the feauture "i18n" by default, but allows to create
          * handlers for other feature-paths using the `forFeature` method.
          * Using `release`, it is possible to free the eventBus subscription held by an i18n helper instance and by
          * all feature-handlers created by it.
          *
          * @param {AxContext} context
          *    the widget context/scope that the handler should work with. It uses the `eventBus` property there
          *    with which it can do the event handling
          * @param {Object} [optionalOptions]
          *    the fallback language tag to use when no localization is available for a locale's current language tag
          * @param {String} [optionalOptions.fallback]
          *    the fallback language tag to use when no localization is available for a locale's current language tag
          * @param {Boolean} [optionalOptions.strict]
          *    if `true`, localizations are only used if the language tags exactly match the current locale's tag
          *    (after normalizing case and dash/underscore). If `false` (default), specific requests can be satisfied
          *    by general localizations (e.g. a translation for 'en' may be used when missing 'en_GB' was requested).
          *
          * @return {AxI18n}
          *    an i18n instance
          */
         function create(context) {
            var optionalOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var features = context.features,
                eventBus = context.eventBus;
            var _optionalOptions$fall = optionalOptions.fallback,
                fallback = _optionalOptions$fall === undefined ? 'en' : _optionalOptions$fall,
                _optionalOptions$stri = optionalOptions.strict,
                strict = _optionalOptions$stri === undefined ? false : _optionalOptions$stri;

            var handlers = {};
            var tags = {};
            var callbacks = {};

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            var release = eventBus.subscribe('didChangeLocale', handleLocaleChange);

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * An i18n instance allows to create {@link #AxI18nHandler} instances for any feature, but is itself also
             * an i18n handler for the feature `i18n`.
             * So if the widget using the {@link widget_services#axI18n axI18n} injection uses the recommended
             * name `i18n` for the localization feature, use this directly with the i18n handler API.
             *
             * @constructor
             * @name AxI18n
             */
            return Object.assign({
               forFeature: forFeature,
               release: release
            }, forFeature('i18n'));

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Creates and returns an i18n handler for the loclization configuration under the given
             * [feature path](../glossary#feature-path).
             * The configuration value is expected to be an object with the key `locale` that is configured with the
             * locale to use in the widget instance.
             *
             * @param {String} featurePath
             *    the feature path localization configuration can be found at
             *
             * @return {AxI18nHandler}
             *    the i18n handler for the given feature path
             *
             * @memberof AxI18n
             */
            function forFeature(featurePath) {
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(featurePath).hasType(String).isNotNull();
               if (handlers[featurePath]) {
                  return handlers[featurePath];
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * @constructor
                * @name AxI18nHandler
                */
               var api = {
                  format: format,
                  languageTag: languageTag,

                  /**
                   * Localize the given internationalized object using the given languageTag.
                   *
                   * If i18n is configured to be _strict_, the currently active language tag is used to lookup a
                   * translation.
                   * If nothing is found, the `languageTag` argument is tried.
                   * If still nothing is found, `undefined` is returned.
                   *
                   * In the case _strict_ is set to `false`, the behavior is the same as in _strict_ mode if an exact
                   * localization is available.
                   * If not, the language tag is successively generalized by stripping off the rightmost sub-tags
                   * until a localization is found.
                   * Eventually, a fallback (default: 'en') is used.
                   * This behavior is especially useful for controls (such as a datepicker), where we cannot
                   * anticipate all required language tags, as they may be app-specific.
                   *
                   * @param {*} i18nValue
                   *    a possibly internationalized value:
                   *    - when passing a primitive value, it is returned as-is
                   *    - when passing an object, the languageTag is used as a key within that object
                   * @param {*} [optionalFallbackValue]
                   *    a value to use if no localization is available for the given language tag
                   * @param {String} [languageTag]
                   *    a language tag to override the current locale tag. Only available in _strict_ mode
                   *
                   * @return {*}
                   *    the localized value if found, the fallback (or `undefined`) otherwise
                   *
                   * @memberof AxI18nHandler
                   * @name localize
                   */
                  localize: strict ? localizeStrict : localizeRelaxed,
                  track: track,
                  update: update,
                  whenLocaleChanged: whenLocaleChanged
               };
               handlers[featurePath] = api;
               var locale = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["path"])(features, featurePath + '.locale');
               __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(locale).hasType(String).isNotNull('axI18n: missing feature-configuration \'' + featurePath + '.locale\' (widget: ' + context.widget.id + ')');
               return api;

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * Updates the language tag for the configured locale by emitting the according `changeLocaleRequest`
                * event.
                *
                * @param {String} languageTag
                *    the language tag to propagate
                *
                * @return {Promise}
                *    the promise of the event cycle
                *
                * @memberof AxI18nHandler
                */
               function update(languageTag) {
                  return eventBus.publishAndGatherReplies('changeLocaleRequest.' + locale, {
                     locale: locale,
                     languageTag: languageTag
                  }, noDeliveryToSender).then(function () {
                     tags[locale] = languageTag;
                  });
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * Returns the language tag set for the configured locale.
                * If no tag is available, `undefined` is returned.
                *
                * @return {String}
                *    the active language tag or `undefined`
                *
                * @memberof AxI18nHandler
                */
               function languageTag() {
                  return tags[locale];
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * References the current i18n state as an object under the given property of the context.
                *
                * If this method is not used, changes to the locale are still observed by the handler, but not
                * tracked on the context object. Use this to react to locale-changes in a data-driven fashion, for
                * example by using an AngularJS watcher.
                *
                * By default, the i18n state is stored under the feature path used to create this i18n handler ("i18n"
                * for the default handler provided by the "axI18n" widget service injection).
                *
                * The tracking structure stored under the property is an object that has two properties:
                *
                *   - `locale` is the constant locale topic that was configured for the tracked feature
                *   - `tags` is an object mapping all locale names to their normalized current language tag
                *
                * Note that tracked language tags are *normalized*, i.e. converted to lowercase with underscores (`_`)
                * replaced by dashes (`-`).
                *
                * @param {*} [property=featurePath]
                *    name of the context property to store the state under, defaults to the feature path
                *
                * @memberof AxI18nHandler
                */
               function track() {
                  var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : featurePath;

                  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["setPath"])(context, property, { locale: locale, tags: tags });
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * Format an i18n value, by first localizing it and then applying substitutions.
                *
                * These are equivalent:
                * - `string.format( axI18n.localize( i18nValue ), numericArgs, namedArgs )`
                * - `axI18n.format( i18nValue, numericArgs, namedArgs )`.
                *
                * @param {String} i18nValue
                *    the value to localize and then format
                * @param {Array} [optionalIndexedReplacements]
                *    replacements for any numeric placeholders in the localized value
                * @param {Object} [optionalNamedReplacements]
                *    replacements for any named placeholders in the localized value
                *
                * @return {String}
                *    the formatted string after localization
                *
                * @memberof AxI18nHandler
                */
               function format(i18nValue, optionalIndexedReplacements, optionalNamedReplacements) {
                  var formatString = api.localize(i18nValue);
                  return formatString && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utilities_string__["format"])(formatString, optionalIndexedReplacements, optionalNamedReplacements);
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               /**
                * Registers a callback that is called whenever the new valid locale was received via event.
                *
                * @param {Function} callback
                *    the function to call on locale change
                *
                * @memberof AxI18nHandler
                */
               function whenLocaleChanged(callback) {
                  callbacks[locale] = callbacks[locale] || [];
                  callbacks[locale].push(callback);
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function localizeRelaxed(i18nValue, optionalFallbackValue) {
                  if (!i18nValue || primitives[typeof i18nValue === 'undefined' ? 'undefined' : _typeof(i18nValue)]) {
                     // value is not internationalized
                     return i18nValue;
                  }

                  var tag = tags[locale];
                  var tagParts = tag ? tag.replace(/-/g, '_').split('_') : [];
                  while (tagParts.length > 0) {
                     var currentLocaleTag = tagParts.join('-');
                     var value = localizeStrict(i18nValue, undefined, currentLocaleTag);
                     if (value !== undefined) {
                        return value;
                     }
                     tagParts.pop();
                  }

                  return fallback ? localizeStrict(i18nValue, optionalFallbackValue, fallback) : optionalFallbackValue;
               }

               ////////////////////////////////////////////////////////////////////////////////////////////////////////

               function localizeStrict(i18nValue, optionalFallbackValue) {
                  var languageTag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : tags[locale];

                  if (!i18nValue || primitives[typeof i18nValue === 'undefined' ? 'undefined' : _typeof(i18nValue)]) {
                     // Value is not i18n
                     return i18nValue;
                  }
                  if (!languageTag) {
                     return optionalFallbackValue;
                  }

                  // Try one direct lookup before scanning the input keys,
                  // assuming that language-tags are written in consistent style.
                  var value = i18nValue[languageTag];
                  if (value !== undefined) {
                     return value;
                  }

                  var lookupKey = normalize(languageTag);
                  var availableTags = Object.keys(i18nValue);
                  var n = availableTags.length;
                  for (var i = 0; i < n; ++i) {
                     var t = availableTags[i];
                     if (normalize(t) === lookupKey) {
                        return i18nValue[t];
                     }
                  }

                  return optionalFallbackValue;
               }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function handleLocaleChange(_ref) {
               var locale = _ref.locale,
                   languageTag = _ref.languageTag;

               var newTag = normalize(languageTag);
               if (newTag === tags[locale]) {
                  return;
               }
               tags[locale] = newTag;
               callbacks[locale] = callbacks[locale] || [];
               callbacks[locale].forEach(function (f) {
                  f(languageTag);
               });
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function memoize(f) {
            var cache = {};
            return function (key) {
               var value = cache[key];
               if (value === undefined) {
                  value = f(key);
                  cache[key] = value;
               }
               return value;
            };
         }

         /***/
      },
      /* 31 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony export (immutable) */
         __webpack_exports__["a"] = create;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /**
          * Factory for i18n widget service instances.
          *
          * @module widget_services_visibility
          */

         // <-- temporary guard until https://github.com/LaxarJS/laxar-dox/issues/21 is fixed
         var noDeliveryToSender = { deliverToSender: false };
         var noOp = function noOp() {};

         /**
          * Creates a widget-specific helper for `didChangeAreaVisibility` events.
          *
          * @param {AxContext} context
          *    the widget context/scope that the handler should work with. It uses the `eventBus` property there
          *    with which it can do the event handling. The visibility handler will set the boolean context property
          *    `isVisible` which can be used to determine the visibility state of the entire widget, e.g. for use in
          *    templates.
          *
          * @param {AxAreaHelper} areaHelper
          *    an area helper to qualify/unqualify names for this widget's areas
          *
          * @return {AxVisibility}
          *    a visibility handler instance
          */
         function create(context, areaHelper) {

            /**
             * @constructor
             * @name AxVisibility
             */
            var api = {
               /**
                * Query the current visibility state.
                *
                * @return {Boolean}
                *    this current visibility status as determined through eventBus events
                *
                * @memberof AxVisibility
                */
               isVisible: function isVisible() {
                  return areaHelper.isVisible(context.widget.area);
               },
               onChange: onChange,
               onHide: onHide,
               onShow: onShow,
               release: release,
               track: track,
               unsubscribe: unsubscribe,
               updateAreaVisibility: updateAreaVisibility,
               updateWidgetVisibility: updateWidgetVisibility
            };

            var isVisible = api.isVisible();

            var eventBus = context.eventBus;

            // state used for tracking the widget visibility

            var trackingProperty = void 0;
            var showListeners = [];
            var hideListeners = [];
            var unsubscribeToChanges = noOp;

            // state used for setting the visibility of the widget and its areas
            var visibilityByArea = {};
            var overrideByArea = {};
            var unsubscribeToAreaRequests = noOp;

            return api;

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Registers a callback to be run when this widget becomes hidden.
             *
             * @param {Function} callback
             *    a callback to be invoked whenever the widget becomes visible, with a boolean argument indicating
             *    the new visibility state (`false`). The callback will *not* be invoked for the start value (`false`).
             *
             * @return {AxVisibility}
             *    this instance for chaining
             *
             * @memberof AxVisibility
             */
            function onHide(callback) {
               hideListeners.push(callback);
               updateChangeSubscription();
               return api;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Registers a callback to be run when this widget becomes visbile.
             *
             * @param {Function} callback
             *    a callback to be invoked whenever the widget becomes visible, with a boolean argument indicating
             *    the new visibility state (`true`).
             *
             * @return {AxVisibility}
             *    this instance for chaining
             *
             * @memberof AxVisibility
             */
            function onShow(callback) {
               showListeners.push(callback);
               updateChangeSubscription();
               return api;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Registers a callback for changes to this widget's visibility.
             *
             * @param {Function} callback
             *    a callback to be invoked whenever the widget visibility changes, with a boolean argument indicating
             *    the new visibility state. The callback will *not* be invoked for the start value (`false`).
             *
             * @return {AxVisibility}
             *    this instance for chaining
             *
             * @memberof AxVisibility
             */
            function onChange(callback) {
               showListeners.push(callback);
               hideListeners.push(callback);
               updateChangeSubscription();
               return api;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Starts tracking visibility as a property on the context.
             *
             * Calling this repeatedly with different property names will stop previous properties from receiving
             * further updates, but will not remove previously set tracking properties from the context object.
             *
             * @param {String} property
             *    the name of the context property to maintain
             *
             * @return {AxVisibility}
             *    this instance for chaining
             *
             * @memberof AxVisibility
             */
            function track() {
               var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'isVisible';

               trackingProperty = property;
               if (property !== null) {
                  context[property] = isVisible;
               }
               updateChangeSubscription();
               return api;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Triggers a visibility change to the given area. The visibility of the area and its nested areas is
             * re-evaluated over the event bus. Use this to implement e.g. tabbing/accordion/expander widgets.
             *
             * @param {Object} visibilityByLocalArea
             *   A mapping of local area names (without the widget ID) to their new visibility state (Boolean).
             *   Areas that are omitted here are left as is. Areas that have not been set at all just assume the
             *   visibility state of the containing area.
             * @param {Object} [optionalOptions]
             *   Additional options
             * @param {Object} [optionalOptions.overrideContainer]
             *   Allows the specified areas to become visible even if the widget's container area is not visible.
             *
             * @return {Promise}
             *    a promise that is resolved (without a value) when the visibility change was applied
             *
             * @memberof AxVisibility
             */
            function updateAreaVisibility(visibilityByLocalArea) {
               var optionalOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
               var _optionalOptions$over = optionalOptions.overrideContainer,
                   overrideContainer = _optionalOptions$over === undefined ? false : _optionalOptions$over;

               if (unsubscribeToAreaRequests === noOp) {
                  var requestEvent = 'changeAreaVisibilityRequest.' + context.widget.id;
                  unsubscribeToAreaRequests = eventBus.subscribe(requestEvent, responder(isAreaVisible));
               }

               var promises = Object.keys(visibilityByLocalArea).map(function (name) {
                  var oldVisible = visibilityByArea[name];
                  var oldOverride = overrideByArea[name];
                  var visible = visibilityByArea[name] = visibilityByLocalArea[name];
                  if (overrideContainer) {
                     overrideByArea[name] = overrideContainer;
                  } else if (oldOverride) {
                     delete overrideByArea[name];
                  }
                  if (oldVisible !== visible || oldOverride !== overrideByArea[name]) {
                     var area = areaHelper.fullName(name);
                     var eventName = 'changeAreaVisibilityRequest.' + area + '.' + visible;
                     return eventBus.publishAndGatherReplies(eventName, { area: area, visible: visible }, noDeliveryToSender);
                  }
                  return Promise.resolve();
               });

               return Promise.all(promises).then(noOp);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /* @private helper for updateAreaVisibility */
            function isAreaVisible(localAreaName, containerVisible) {
               var areaVisible = visibilityByArea[localAreaName];
               if (areaVisible === undefined) {
                  return containerVisible;
               }
               return areaVisible && (containerVisible || overrideByArea[localAreaName]);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Triggers a visibility change the widget itself and all its areas, always overriding its container
             * visibility with the given value.
             * This simplifies implementing popup/popover/layer widgets, which always live in an invisible container
             * area, but need to show/hide all their owned areas.
             *
             * To control the visibility of individual areas, use #updateAreaVisibility
             *
             * @param {Boolean} visible
             *   The new visibility state of the widget.
             *
             * @return {AxVisibility}
             *    this instance for chaining
             *
             * @memberof AxVisibility
             */
            function updateWidgetVisibility(visible) {
               var widget = context.widget.id;
               var eventName = 'changeWidgetVisibilityRequest.' + widget + '.' + visible;
               return eventBus.publishAndGatherReplies(eventName, { widget: widget, visible: visible }, noDeliveryToSender);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            /**
             * Remove the given callback (registered through one or more of the on... methods) from any subscriptions.
             *
             * @param {Function} callback
             *    a callback that was previously registered using any of the `on...` methods.
             *    It will be removed from all registrations. Passing an unknown callback has no effect.
             *
             * @return {AxVisibility}
             *    this instance for chaining
             *
             * @memberof AxVisibility
             */
            function unsubscribe(callback) {
               [showListeners, hideListeners].forEach(remove);

               function remove(array) {
                  var index = array.indexOf(callback);
                  if (index === -1) {
                     return;
                  }
                  array.splice(index, 1);
                  remove(array);
               }
               return api;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function release() {
               unsubscribeToAreaRequests();
               unsubscribeToChanges();
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function updateChangeSubscription() {
               var needsSubscription = trackingProperty || showListeners.length + hideListeners.length;
               if (needsSubscription && unsubscribeToChanges === noOp) {
                  unsubscribeToChanges = eventBus.subscribe('didChangeAreaVisibility.' + context.widget.area, function (_ref) {
                     var visible = _ref.visible;

                     if (visible === isVisible) {
                        return;
                     }
                     isVisible = visible;
                     if (trackingProperty) {
                        context[trackingProperty] = visible;
                     }
                     (visible ? showListeners : hideListeners).forEach(function (f) {
                        return f(visible);
                     });
                  });
               } else if (unsubscribeToChanges && !needsSubscription) {
                  unsubscribeToChanges();
                  unsubscribeToChanges = noOp;
               }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////

            function responder(callback) {
               return function (_ref2) {
                  var area = _ref2.area,
                      containerVisible = _ref2.visible;

                  var visible = callback(areaHelper.localName(area), containerVisible);
                  if (visible === true || visible === false) {
                     var didEvent = 'didChangeAreaVisibility.' + area + '.' + visible;
                     eventBus.publish(didEvent, { area: area, visible: visible }, noDeliveryToSender);
                  }
               };
            }
         }

         /***/
      },
      /* 32 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";
         /* harmony import */
         var __WEBPACK_IMPORTED_MODULE_0__pages__ = __webpack_require__(5);
         /* harmony export (immutable) */__webpack_exports__["a"] = createCollectors;
         /* harmony export (immutable) */__webpack_exports__["b"] = createProviders;
         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */
         /**
          * Accepts and keeps laxarjs application data from various laxarjs services, and makes it available to
          * development tools.
          *
          * This module has an internal API (the `collectors`-service), and an external API (the `providers` service).
          * The collectors service is fed data by the other laxarjs services, while the provider allows external
          * listeners to subscribe to that data's changes, or to retrieve snapshots of it.
          */

         // eslint-disable-next-line valid-jsdoc
         /** Collects inspection data from laxarjs services */
         function createCollectors(configuration, log) {
            return {
               pages: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__pages__["a" /* createCollector */])(configuration, log)
            };
         }

         // eslint-disable-next-line valid-jsdoc
         /** Exposes inspection data from laxarjs services to development tools */
         function createProviders(collectors) {
            return {
               pages: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__pages__["b" /* createProvider */])(collectors.pages)
            };
         }

         /***/
      },
      /* 33 */
      /***/function (module, exports) {

         module.exports = __WEBPACK_EXTERNAL_MODULE_33__;

         /***/
      },
      /* 34 */
      /***/function (module, __webpack_exports__, __webpack_require__) {

         "use strict";

         Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__lib_utilities_assert__ = __webpack_require__(0);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__lib_utilities_object__ = __webpack_require__(1);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__lib_utilities_string__ = __webpack_require__(2);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__lib_runtime_services__ = __webpack_require__(7);
         /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__lib_runtime_plain_adapter__ = __webpack_require__(6);
         /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "assert", function () {
            return __WEBPACK_IMPORTED_MODULE_0__lib_utilities_assert__["a"];
         });
         /* harmony reexport (module object) */__webpack_require__.d(__webpack_exports__, "object", function () {
            return __WEBPACK_IMPORTED_MODULE_1__lib_utilities_object__;
         });
         /* harmony reexport (module object) */__webpack_require__.d(__webpack_exports__, "string", function () {
            return __WEBPACK_IMPORTED_MODULE_2__lib_utilities_string__;
         });
         /* harmony reexport (module object) */__webpack_require__.d(__webpack_exports__, "plainAdapter", function () {
            return __WEBPACK_IMPORTED_MODULE_4__lib_runtime_plain_adapter__;
         });
         /* harmony export (immutable) */__webpack_exports__["bootstrap"] = bootstrap;
         /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "instances", function () {
            return instances;
         });
         function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
               for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
               }return arr2;
            } else {
               return Array.from(arr);
            }
         }

         /**
          * Copyright 2016 aixigo AG
          * Released under the MIT license.
          * http://laxarjs.org/license
          */

         /**
          * The API entry point for boostrapping LaxarJS applications.
          * Also, provides a couple of utilities to deal with assertions, objects and strings.
          *
          * @module laxar
          */

         // Get a reference to the global object of the JS environment.
         // See http://stackoverflow.com/a/6930376 for details
         var global = void 0;
         try {
            // eslint-disable-next-line no-new-func, no-eval
            global = Function('return this')() || (1, eval)('this');
         } catch (_) {
            // if it forbids eval, it's probably a browser
            global = window;
         }

         /**
          * Bootstraps AngularJS on the provided `anchorElement` and sets up the LaxarJS runtime.
          *
          * @param {HTMLElement} anchorElement
          *    the element to insert the page in
          * @param {Object} [optionalOptions]
          *    optional options for bootstrapping
          * @param {Array} optionalOptions.widgetAdapters
          *    widget adapters that are used in this application
          * @param {Object} optionalOptions.configuration
          *    configuration for the laxar application. See http://laxarjs.org/docs/laxar-latest/manuals/configuration/
          *    for further information on available properties
          * @param {Object} optionalOptions.artifacts
          *    an artifact listing for the application, generated by the utilized built tool (e.g. webpack)
          *
          * @memberof laxar
          */
         function bootstrap(anchorElement) {
            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref$widgetAdapters = _ref.widgetAdapters,
                widgetAdapters = _ref$widgetAdapters === undefined ? [] : _ref$widgetAdapters,
                _ref$configuration = _ref.configuration,
                configuration = _ref$configuration === undefined ? {} : _ref$configuration,
                _ref$artifacts = _ref.artifacts,
                artifacts = _ref$artifacts === undefined ? {} : _ref$artifacts;

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lib_utilities_assert__["a" /* default */])(anchorElement).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lib_utilities_assert__["a" /* default */])(widgetAdapters).hasType(Array).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lib_utilities_assert__["a" /* default */])(artifacts).hasType(Object).isNotNull();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__lib_utilities_assert__["a" /* default */])(configuration).hasType(Object).isNotNull();

            var services = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_runtime_services__["a" /* create */])(configuration, artifacts);

            var log = services.log,
                themeLoader = services.themeLoader,
                widgetLoader = services.widgetLoader;

            themeLoader.load();

            var adapterServices = {
               adapterUtilities: services.adapterUtilities,
               artifactProvider: services.artifactProvider,
               configuration: services.configuration,
               flowService: services.flowService,
               globalEventBus: services.globalEventBus,
               heartbeat: services.heartbeat,
               log: log,
               storage: services.storage,
               tooling: services.toolingProviders,
               // TODO (https://github.com/LaxarJS/laxar/issues/363 and https://github.com/LaxarJS/laxar/issues/397)
               // Fixing the latter issue broke laxar-mocks, since it could no longer access the widget loader.
               // To temporarily fix this, we re-add the widget loader to the exposed services.
               // Nevertheless on the medium /short term we want to be able to load single widgets into the page
               // (the first issue above) and use the api that will be created for this in laxar-mocks.
               widgetLoader: widgetLoader
            };
            var adapterModules = [__WEBPACK_IMPORTED_MODULE_4__lib_runtime_plain_adapter__].concat(_toConsumableArray(widgetAdapters));
            var adapters = bootstrapWidgetAdapters(anchorElement, adapterServices, adapterModules, artifacts);
            widgetLoader.registerWidgetAdapters(adapters);

            announceInstance(services);

            var flowName = services.configuration.get('flow.name');
            if (!flowName) {
               log.trace('LaxarJS Bootstrap complete: No `flow.name` configured.');
               return;
            }

            whenDocumentReady(function () {
               log.trace('LaxarJS loading Flow: ' + flowName);
               services.pageService.createControllerFor(anchorElement);
               services.flowController.loadFlow().then(function () {
                  log.trace('Flow loaded');
               }, function (err) {
                  log.fatal('LaxarJS failed to load flow.');
                  log.fatal('Error [0].\nStack: [1]', err, err && err.stack);
               });
            });
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function whenDocumentReady(callback) {
            if (document.readyState === 'complete') {
               callback();
            } else {
               document.addEventListener('DOMContentLoaded', callback);
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function bootstrapWidgetAdapters(anchorElement, services, adapterModules, artifacts) {
            var log = services.log;

            var adapterModulesByTechnology = {};
            var artifactsByTechnology = {};

            adapterModules.forEach(function (module) {
               adapterModulesByTechnology[module.technology] = module;
               artifactsByTechnology[module.technology] = { widgets: [], controls: [] };
            });

            ['widgets', 'controls'].forEach(function (type) {
               artifacts[type].forEach(function (artifact) {
                  var technology = artifact.descriptor.integration.technology;

                  if (!adapterModulesByTechnology[technology]) {
                     var name = artifact.descriptor.name;

                     log.fatal('Unknown widget technology: [0], required by [1] "[2]"', technology, type, name);
                     return;
                  }
                  artifactsByTechnology[technology][type].push(artifact);
               });
            });

            var adaptersByTechnology = {};
            Object.keys(adapterModulesByTechnology).forEach(function (technology) {
               var adapterModule = adapterModulesByTechnology[technology];
               var artifacts = artifactsByTechnology[technology];
               adaptersByTechnology[technology] = adapterModule.bootstrap(artifacts, services, anchorElement);
            });
            return adaptersByTechnology;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         function announceInstance(services) {
            var configuration = services.configuration,
                log = services.log,
                storage = services.storage;

            if (configuration.get('tooling.enabled')) {
               instances()[configuration.get('name', 'unnamed')] = services;
            }

            var idGenerator = configuration.get('logging.instanceId', simpleId);
            if (idGenerator === false) {
               return;
            }

            var instanceIdStorageKey = 'axLogTags.INST';
            var store = storage.getApplicationSessionStorage();
            var instanceId = store.getItem(instanceIdStorageKey);
            if (!instanceId) {
               instanceId = idGenerator();
               store.setItem(instanceIdStorageKey, instanceId);
            }
            log.addTag('INST', instanceId);

            function simpleId() {
               return '' + Date.now() + Math.floor(Math.random() * 100);
            }
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////

         /**
          * Provide tooling access to LaxarJS services.
          *
          * Each laxar#bootstrap call creates a new set of services such as a logger, global event bus etc. For tools
          * like the laxar-developer-tools-widget, it may be necessary to access these services for a given instance,
          * or for all instances.
          *
          * @param {String} [optionalName]
          *   The configuration name of a LaxarJS instance to inspect.
          *   May be omitted to access all application instances by name.
          *
          * @return {Object}
          *   The tooling services for a specified instance, or for all instances that have tooling enabled.
          *
          * @memberof laxar
          */
         function instances(optionalName) {
            var instances = global.laxarInstances = global.laxarInstances || {};
            return optionalName ? instances[optionalName] : instances;
         }

         //////////////////////////////////////////////////////////////////////////////////////////////////////////////


         /***/
      }])
   );
});
//# sourceMappingURL=laxar.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)(module)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(15);

var emptyFunction = __webpack_require__(9);
var warning = __webpack_require__(2);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (true) {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (true) {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      // eslint-disable-line valid-typeof
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // eslint-disable-line valid-typeof
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (true) {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (true) {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }

});

SyntheticEvent.Interface = EventInterface;

if (true) {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
               true ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
     true ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ?  true ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  true ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (true) {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (true) {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName:  true ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(12);

var warning = __webpack_require__(2);
var canDefineProperty = __webpack_require__(59);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(92);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (true) {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (true) {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
       true ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
       true ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (true) {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (true) {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (true) {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactChildren = __webpack_require__(207);
var ReactComponent = __webpack_require__(56);
var ReactPureComponent = __webpack_require__(211);
var ReactClass = __webpack_require__(208);
var ReactDOMFactories = __webpack_require__(209);
var ReactElement = __webpack_require__(16);
var ReactPropTypes = __webpack_require__(210);
var ReactVersion = __webpack_require__(212);

var onlyChild = __webpack_require__(214);
var warning = __webpack_require__(2);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (true) {
  var ReactElementValidator = __webpack_require__(93);
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (true) {
  var warned = false;
  __spread = function () {
     true ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

module.exports = React;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactRef = __webpack_require__(178);
var ReactInstrumentation = __webpack_require__(8);

var warning = __webpack_require__(2);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
  ) {
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
       true ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (true) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }

};

module.exports = ReactReconciler;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = __webpack_require__(42);
var setInnerHTML = __webpack_require__(35);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(49);
var setTextContent = __webpack_require__(90);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 21 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 22 */,
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (true) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var EventPluginRegistry = __webpack_require__(30);
var EventPluginUtils = __webpack_require__(43);
var ReactErrorUtils = __webpack_require__(47);

var accumulateInto = __webpack_require__(84);
var forEachAccumulated = __webpack_require__(85);
var invariant = __webpack_require__(1);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ?  true ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ?  true ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(24);
var EventPluginUtils = __webpack_require__(43);

var accumulateInto = __webpack_require__(84);
var forEachAccumulated = __webpack_require__(85);
var warning = __webpack_require__(2);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (true) {
     true ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(18);


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? 'undefined' : _typeof3(exports)) === 'object' && ( false ? 'undefined' : _typeof3(module)) === 'object') module.exports = factory(__webpack_require__(11));else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof3(exports)) === 'object') exports["laxar-mocks"] = factory(require("laxar"));else root["laxar-mocks"] = factory(root["laxar"]);
})(this, function (__WEBPACK_EXTERNAL_MODULE_8__) {
  return (/******/function (modules) {
      // webpackBootstrap
      /******/ // The module cache
      /******/var installedModules = {};
      /******/
      /******/ // The require function
      /******/function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId])
          /******/return installedModules[moduleId].exports;
        /******/
        /******/ // Create a new module (and put it into the cache)
        /******/var module = installedModules[moduleId] = {
          /******/i: moduleId,
          /******/l: false,
          /******/exports: {}
          /******/ };
        /******/
        /******/ // Execute the module function
        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/return module.exports;
        /******/
      }
      /******/
      /******/
      /******/ // expose the modules object (__webpack_modules__)
      /******/__webpack_require__.m = modules;
      /******/
      /******/ // expose the module cache
      /******/__webpack_require__.c = installedModules;
      /******/
      /******/ // identity function for calling harmony imports with the correct context
      /******/__webpack_require__.i = function (value) {
        return value;
      };
      /******/
      /******/ // define getter function for harmony exports
      /******/__webpack_require__.d = function (exports, name, getter) {
        /******/if (!__webpack_require__.o(exports, name)) {
          /******/Object.defineProperty(exports, name, {
            /******/configurable: false,
            /******/enumerable: true,
            /******/get: getter
            /******/ });
          /******/
        }
        /******/
      };
      /******/
      /******/ // getDefaultExport function for compatibility with non-harmony modules
      /******/__webpack_require__.n = function (module) {
        /******/var getter = module && module.__esModule ?
        /******/function getDefault() {
          return module['default'];
        } :
        /******/function getModuleExports() {
          return module;
        };
        /******/__webpack_require__.d(getter, 'a', getter);
        /******/return getter;
        /******/
      };
      /******/
      /******/ // Object.prototype.hasOwnProperty.call
      /******/__webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/
      /******/ // __webpack_public_path__
      /******/__webpack_require__.p = "";
      /******/
      /******/ // Load entry module and return exports
      /******/return __webpack_require__(__webpack_require__.s = 24);
      /******/
    }(
    /************************************************************************/
    /******/[
    /* 0 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["c"] = options;
      /* harmony export (immutable) */__webpack_exports__["b"] = forEach;
      /* harmony export (immutable) */__webpack_exports__["e"] = path;
      /* harmony export (immutable) */__webpack_exports__["d"] = setPath;
      /* harmony export (immutable) */__webpack_exports__["f"] = deepClone;
      /* harmony export (immutable) */__webpack_exports__["a"] = tabulate;
      var _typeof = typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof3(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof3(obj);
      };

      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Utilities for dealing with objects.
       *
       * When requiring `laxar`, it is available as `laxar.object`.
       *
       * @module object
       */

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Returns all properties from `obj` with missing properties completed from `defaults`. If `obj` is `null`
       * or `undefined`, an empty object is automatically created. `obj` and `defaults` are not modified by this
       * function. This is very useful for optional map arguments, resembling some kind of configuration.
       *
       * Example:
       * ```js
       * object.options( { validate: true }, {
       *    validate: false,
       *    highlight: true
       * } );
       * // =>
       * // {
       * //    validate: true,
       * //    highlight: true
       * // }
       * ```
       *
       * @param {Object} obj
       *    the options object to use as source, may be `null` or `undefined`
       * @param {Object} defaults
       *    the defaults to take missing properties from
       *
       * @return {Object}
       *    the completed options object
       */
      function options(obj, defaults) {
        return Object.assign({}, defaults, obj);
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Iterates over the keys of an object and calls the given iterator function for each entry.
       * On each iteration the iterator function is passed the `value`, the `key` and the complete `object` as
       * arguments.
       * If `object` is an array, the native `Array.prototype.forEach` function is called.
       * In this case the keys are the indices of the array.
       *
       * Example:
       * ```
       * object.forEach( { name: Peter, age: 12 }, ( value, key ) => {
       *    console.log( `${key} = ${value}\n` );
       * });
       * // =>
       * // name = Peter
       * // age = 12
       * ```
       *
       * @param {Object} object
       *    the object to run the iterator function on
       * @param {Function} iteratorFunction
       *    the iterator function to run on each key-value pair
       */
      function forEach(object, iteratorFunction) {
        if (Array.isArray(object)) {
          object.forEach(iteratorFunction);
          return;
        }

        for (var key in object) {
          if (hasOwnProperty(object, key)) {
            iteratorFunction(object[key], key, object);
          }
        }
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Finds a property in a nested object structure by a given path. A path is a string of keys, separated
       * by a dot from each other, used to traverse that object and find the value of interest. An additional
       * default is returned, if otherwise the value would yield `undefined`.
       *
       * Note that `path()` must only be used in situations where all path segments are also valid
       * JavaScript identifiers, and should never be used with user-specified paths:
       *
       *  - there is no mechanism to escape '.' in path segments; a dot always separates keys,
       *  - an empty string as a path segment will abort processing and return the entire sub-object under the
       *    respective position. For historical reasons, the path interpretation differs from that performed by
       *    {@link #setPath()}.
       *
       *
       * Example:
       *
       * ```js
       * object.path( { one: { two: 3 } }, 'one.two' ); // => 3
       * object.path( { one: { two: 3 } }, 'one.three' ); // => undefined
       * object.path( { one: { two: 3 } }, 'one.three', 42 ); // => 42
       * object.path( { one: { two: 3 } }, 'one.' ); // => { two: 3 }
       * object.path( { one: { two: 3 } }, '' ); // => { one: { two: 3 } }
       * object.path( { one: { two: 3 } }, '.' ); // => { one: { two: 3 } }
       * ```
       *
       * @param {Object} obj
       *    the object to traverse
       * @param {String} thePath
       *    the path to search for
       * @param {*} [optionalDefault]
       *    the value to return instead of `undefined` if nothing is found
       *
       * @return {*}
       *    the value at the given path
       */
      function path(obj, thePath) {
        var optionalDefault = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

        var pathArr = thePath.split('.');
        var node = obj;
        var key = pathArr.shift();

        while (key) {
          if (node && (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && hasOwnProperty(node, key)) {
            node = node[key];
            key = pathArr.shift();
          } else {
            return optionalDefault;
          }
        }

        return node;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Sets a property in a nested object structure at a given path to a given value. A path is a string of
       * keys, separated by a dot from each other, used to traverse that object and find the place where the
       * value should be set. Any missing subtrees along the path are created.
       *
       * Note that `setPath()` must only be used in situations where all path segments are also valid
       * JavaScript identifiers, and should never be used with user-specified paths:
       *
       *  - there is no mechanism to escape '.' in path segments; a dot will always create separate keys,
       *  - an empty string as a path segment will create an empty string key in the object graph where missing.
       *    For historical reasons, this path interpretation differs from that performed by #path (see there).
       *
       *
       * Example:
       *
       * ```js
       * object.setPath( {}, 'name.first', 'Peter' ); // => { name: { first: 'Peter' } }
       * object.setPath( {}, 'pets.1', 'Hamster' ); // => { pets: [ null, 'Hamster' ] }
       * object.setPath( {}, '', 'Hamster' ); // => { '': 'Hamster' } }
       * object.setPath( {}, '.', 'Hamster' ); // => { '': { '': 'Hamster' } } }
       * ```
       *
       * @param {Object} obj
       *    the object to modify
       * @param {String} path
       *    the path to set a value at
       * @param {*} value
       *    the value to set at the given path
       *
       * @return {*}
       *    the full object (for chaining)
       */
      function setPath(obj, path, value) {
        var node = obj;
        var pathArr = path.split('.');
        var last = pathArr.pop();

        pathArr.forEach(function (pathFragment, index) {
          if (!node[pathFragment] || _typeof(node[pathFragment]) !== 'object') {
            var lookAheadFragment = pathArr[index + 1] || last;
            if (lookAheadFragment.match(/^[0-9]+$/)) {
              node[pathFragment] = [];
              fillArrayWithNull(node[pathFragment], parseInt(lookAheadFragment, 10));
            } else {
              node[pathFragment] = {};
            }
          }

          node = node[pathFragment];
        });

        if (Array.isArray(node) && last > node.length) {
          fillArrayWithNull(node, last);
        }

        node[last] = value;

        return obj;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Returns a deep clone of the given object. Note that the current implementation is intended to be used
       * for simple object literals only. There is no guarantee that cloning objects instantiated via
       * constructor function works and cyclic references will lead to endless recursion.
       *
       * @param {*} object
       *    the object to clone
       *
       * @return {*}
       *    the clone
       */
      function deepClone(object) {
        if (!object || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object') {
          return object;
        }

        // Using plain for-loops here for performance-reasons.
        var result = void 0;
        if (Array.isArray(object)) {
          result = [];
          for (var i = 0, length = object.length; i < length; ++i) {
            result[i] = deepClone(object[i]);
          }
        } else {
          result = {};
          for (var key in object) {
            if (hasOwnProperty(object, key)) {
              result[key] = deepClone(object[key]);
            }
          }
        }

        return result;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Creates a lookup table from a function and a list of inputs to the function.
       *
       * @param {Function} fn
       *    The callback to apply to all inputs
       * @param {String[]|Number[]|Boolean[]} keys
       *    The keys for the lookup table, and inputs to the function.
       *
       * @return {Object}
       *    An object mapping the given keys to their values under `fn`.
       */
      function tabulate(fn, keys) {
        return keys.reduce(function (table, k) {
          table[k] = fn(k);return table;
        }, {});
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      // eslint-disable-next-line valid-jsdoc
      /**
       * Sets all entries of the given array to `null`.
       *
       * @private
       */
      function fillArrayWithNull(arr, toIndex) {
        for (var i = arr.length; i < toIndex; ++i) {
          arr[i] = null;
        }
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      var hasOwnProp = Object.prototype.hasOwnProperty;
      // eslint-disable-next-line valid-jsdoc
      /**
       * @private
       */
      function hasOwnProperty(object, property) {
        return hasOwnProp.call(object, property);
      }

      /***/
    },
    /* 1 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* unused harmony export codeIsUnreachable */
      /* unused harmony export state */

      var _typeof = typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof3(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof3(obj);
      };

      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */
      /**
       * The *assert* module provides some simple assertion methods for type checks, truthyness tests and guards
       * invalid code paths.
       * When importing the module as `default` module, it is the {@link assert} function itself.
       *
       * When requiring `laxar`, it is available as `laxar.assert`.
       *
       * @module assert
       */

      /**
       * Constructor for an Assertion.
       *
       * @param {*} subject
       *    the object assertions are made for
       * @param {String} [optionalDetails]
       *    details that should be printed in case no specific details are given for an assertion method
       *
       * @constructor
       * @private
       */
      function Assertion(subject, optionalDetails) {
        this.subject_ = subject;
        this.details_ = optionalDetails || null;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Throws an error if the subject is `null` or `undefined`.
       *
       * @param {String} [optionalDetails]
       *    details to append to the error message
       *
       * @return {Assertion}
       *    this instance
       */
      Assertion.prototype.isNotNull = function isNotNull(optionalDetails) {
        if (this.subject_ == null) {
          fail('Expected value to be defined and not null.', optionalDetails || this.details_);
        }

        return this;
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Throws an error if the subject is not of the given type. No error is thrown for `null` or `undefined`.
       *
       * @param {Function} type
       *    the expected type of the subject
       * @param {String} [optionalDetails]
       *    details to append to the error message
       *
       * @return {Assertion}
       *    this instance
       */
      Assertion.prototype.hasType = function hasType(type, optionalDetails) {
        if (typeof this.subject_ === 'undefined' || this.subject_ === null) {
          return this;
        }

        if (typeof type !== 'function') {
          fail('type must be a constructor function. Got ' + (typeof type === 'undefined' ? 'undefined' : _typeof(type)) + '.');
        }

        if (!checkType(this.subject_, type)) {
          var actualString = functionName(this.subject_.constructor);
          var expectedString = functionName(type);

          fail('Expected value to be an instance of "' + expectedString + '" but was "' + actualString + '".', optionalDetails || this.details_);
        }

        return this;
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Throws an error if the subject is no object or the given property is not defined on it.
       *
       * @param {String} property
       *    the property that is expected for the subject
       * @param {String} [optionalDetails]
       *    details to append to the error message
       *
       * @return {Assertion}
       *    this instance
       */
      Assertion.prototype.hasProperty = function hasProperty(property, optionalDetails) {
        if (_typeof(this.subject_) !== 'object') {
          fail('value must be an object. Got ' + _typeof(this.subject_) + '.');
        }

        if (!(property in this.subject_)) {
          fail('value is missing mandatory property "' + property + '".', optionalDetails || this.details_);
        }

        return this;
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function fail(message, optionalDetails) {
        var details = '';
        if (optionalDetails) {
          var detailString = (typeof optionalDetails === 'undefined' ? 'undefined' : _typeof(optionalDetails)) === 'object' ? JSON.stringify(optionalDetails) : optionalDetails;
          details = ' Details: ' + detailString;
        }
        throw new Error('Assertion error: ' + message + details);
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      var TYPE_TO_CONSTRUCTOR = {
        'string': String,
        'number': Number,
        'boolean': Boolean,
        'function': Function
      };
      function checkType(subject, type) {
        if ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) === 'object') {
          return subject instanceof type;
        }

        var actualType = TYPE_TO_CONSTRUCTOR[typeof subject === 'undefined' ? 'undefined' : _typeof(subject)];
        return actualType === type;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      var FUNCTION_NAME_MATCHER = /^function ([^(]*)\(/i;
      function functionName(func) {
        var match = FUNCTION_NAME_MATCHER.exec(func.toString().trim());
        return match[1].length ? match[1] : 'n/a';
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Creates and returns a new `Assertion` instance for the given `subject`.
       *
       * **Note**: this function is no member of the module, but the module itself. Thus when using `assert` via
       * laxar, `assert` is will be no simple object, but this function having the other functions as
       * properties.
       *
       * Example:
       * ```js
       * define( [ 'laxar' ], function( ax ) {
       *    ax.assert( ax.assert ).hasType( Function );
       *    ax.assert.state( typeof ax.assert.codeIsUnreachable === 'function' );
       * } );
       * ```
       *
       * @param {*} subject
       *    the object assertions are made for
       * @param {String} [optionalDetails]
       *    details that should be printed in case no specific details are given when calling an assertion method
       *
       * @return {Assertion}
       *    the assertion instance
       */
      function assert(subject, optionalDetails) {
        return new Assertion(subject, optionalDetails);
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Marks a code path as erroneous by throwing an error when reached.
       *
       * @param {String} [optionalDetails]
       *    details to append to the error message
       */
      assert.codeIsUnreachable = function codeIsUnreachable(optionalDetails) {
        fail('Code should be unreachable!', optionalDetails);
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Throws an error if the given expression is falsy.
       *
       * @param {*} expression
       *    the expression to test for truthyness
       * @param {String} [optionalDetails]
       *    details to append to the error message
       */
      assert.state = function state(expression, optionalDetails) {
        if (!expression) {
          fail('State does not hold.', optionalDetails);
        }
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /* harmony default export */__webpack_exports__["a"] = assert;
      var codeIsUnreachable = assert.codeIsUnreachable;
      var state = assert.state;

      /***/
    },
    /* 2 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(1);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_object__ = __webpack_require__(0);
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
      */

      /**
       * Allows to create mock implementations of {@link Configuration}, compatible to the "axConfiguration"
       * injection.
       *
       * @module configuration_mock
       */

      /**
       * Creates a mock {@link Configuration}, compatible to the "axConfiguration" injection of a widget.
       *
       * The accessor methods `get` and `ensure` are spied.
       *
       * The mock behaves just like the actual configuration, except that configuration values may be initialized
       * from paths, not just regular nested JSON objects. This simplifies mocking of nested configuration such as
       * `logging.threshold`. Usage of this feature is optional, nested objects work just as well.
       *
       * @param {Object} configByPath
       *    path-to-value mappings for the mock
       *
       * @return {Configuration}
       *    a fresh mock instance
       */
      function create() {
        var configByPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var get = jasmine.createSpy('configuration.get').and.callFake(function (key, fallback) {
          var config = {};
          Object.keys(configByPath).forEach(function (path) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["d" /* setPath */])(config, path, configByPath[path]);
          });
          return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["e" /* path */])(config, key, fallback);
        });

        var ensure = jasmine.createSpy('configuration.ensure').and.callFake(function (key) {
          var value = get(key);
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(value).isNotNull('Configuration mock is missing mandatory entry: ' + key);
          return value;
        });

        return { ensure: ensure, get: get };
      }

      /***/
    },
    /* 3 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__utilities_object__ = __webpack_require__(0);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__runtime_log__ = __webpack_require__(12);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__configuration_mock__ = __webpack_require__(2);
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Allows to create mock implementations of {@link Log}, compatible to the "axLog" and "axGlobalLog"
       * injections.
       *
       * @module log_mock
       */

      /**
       * Creates a log mock that does not actually log anywhere, but can be spied upon.
       *
       * @return {AxLog}
       *    a fresh mock instance
       */
      function create() {
        var config = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__configuration_mock__["a" /* create */])({ 'logging.threshold': 'INFO' });
        var logger = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__runtime_log__["a" /* create */])(config, false);
        return Object.assign({ levels: __WEBPACK_IMPORTED_MODULE_1__runtime_log__["b" /* levels */] }, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["a" /* tabulate */])(function (method) {
          return jasmine.createSpy('log.' + method);
        }, Object.keys(logger.constructor.prototype)));
      }

      /***/
    },
    /* 4 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Allows to instantiate a mock implementations of {@link Storage}, compatible to the "axGlobalStorage"
       * injection. For the widget-specific "axStorage" injection, refer to the {@link widget_services_storage_mock}
       * module.
       *
       * @module storage_mock
       */

      /**
       * Creates a storage mock that does not actually change the browser's local- or session-storage.
       *
       * @return {StorageMock}
       *    a fresh mock instance
       */
      function create() {

        var spy = function spy(name) {
          return jasmine.createSpy(name);
        };

        var mockBackends = {
          local: {},
          session: {}
        };

        /**
         * A mock for {@link Storage} that does not actually change the browser's local- or session-storage.
         * Instances of this mock are compatible to the "axGlobalStorage" injection.
         *
         * Do not confuse this with the {@AxStorageMock}, which is compatible to the "axStorage" injection offered
         * by the widget services.
         *
         * Note that the mock does erform JSON transformations of the value objects, just like the actual Storage.
         *
         * @name StorageMock
         * @constructor
         * @extends {Storage}
         */
        return {
          getLocalStorage: spy('getLocalStorage').and.callFake(mockStorage('local')),
          getSessionStorage: spy('getSessionStorage').and.callFake(mockStorage('session')),

          /**
           * Provides access to the backing stores of the storage mock.
           *
           * Has a `local` and a `session` property, each of which has spies for `getItem`/`setItem`/`removeItem`.
           * The `local` and `session` properties also provide direct access to their respective backing `store`
           * objects, accessible in this manner:
           *
           * ```js
           *    const storageMock = create();
           *    storageMock.getLocalStorage( 'myNs' ).setItem( 'k', 'v' );
           *    expect( storageMock.mockBackends.local.myNs.k ).toEqual( '"v"' );  // note the JSON transform
           * ```
           *
           * @memberof {StorageMock}
           * @type {Object}
           */
          mockBackends: mockBackends
        };

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function mockBackend(type) {
          var store = {};
          return {
            setItem: spy(type + '.setItem').and.callFake(function (k, v) {
              store[k] = v === undefined ? v : JSON.stringify(v);
            }),
            getItem: spy(type + '.getItem').and.callFake(function (k) {
              return store[k] && JSON.parse(store[k]);
            }),
            removeItem: spy(type + '.removeItem').and.callFake(function (k) {
              delete store[k];
            }),
            store: store
          };
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function mockStorage(type) {
          return function (prefix) {
            if (!mockBackends[type][prefix]) {
              mockBackends[type][prefix] = mockBackend(type);
            }
            return mockBackends[type][prefix];
          };
        }
      }

      /***/
    },
    /* 5 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = create;
      /**
       * Allows to instantiate a mock implementations of {@link AxAreaHelper}, compatible to the "axAreaHelper"
       * widget service injection.
       *
       * @module widget_services_area_helper_mock
       */

      /**
       * Creates a mock for the widget-specific "axAreaHelper" injection.
       *
       * @param {AxContext} context
       *    an object with a `widget.id` property
       *
       * @return {AxVisibilityMock}
       *    an `axVisibility`-compatible mock object
       */
      function create(context) {

        return {
          isVisible: jasmine.createSpy('areaHelper.isVisible').and.returnValue(false),
          register: jasmine.createSpy('areaHelper.register'),
          fullName: jasmine.createSpy('areaHelper.fullName').and.callFake(function (localName) {
            return context.widget.id + '.' + localName;
          }),
          localName: jasmine.createSpy('areaHelper.localName').and.callFake(function (fullName) {
            return fullName.substring(context.widget.id.length + 1);
          }),
          release: jasmine.createSpy('areaHelper.release')
        };
      }

      /***/
    },
    /* 6 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */
      /**
       * Instatiate an Ajv instance with the configuration required by LaxarJS.
       * @module ajv
       */

      var _typeof2 = typeof Symbol === "function" && _typeof3(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof3(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof3(obj);
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
      };

      exports.create = create;

      var _ajv = __webpack_require__(9);

      var _ajv2 = _interopRequireDefault(_ajv);

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }

      // JSON schema formats:
      var TOPIC_IDENTIFIER = '([a-z][+a-zA-Z0-9]*|[A-Z][+A-Z0-9]*)';
      var SUB_TOPIC_FORMAT = '^' + TOPIC_IDENTIFIER + '$';
      var TOPIC_FORMAT = '^(' + TOPIC_IDENTIFIER + '(-' + TOPIC_IDENTIFIER + ')*)$';
      var FLAG_TOPIC_FORMAT = '^[!]?(' + TOPIC_IDENTIFIER + '(-' + TOPIC_IDENTIFIER + ')*)$';
      // simplified RFC-5646 language-tag matcher with underscore/dash relaxation:
      // the parts are: language *("-"|"_" script|region|constant) *("-"|"_" extension|privateuse)
      var LANGUAGE_TAG_FORMAT = /^[a-z]{2,8}([-_][a-z0-9]{2,8})*([-_][a-z0-9][-_][a-z0-9]{2,8})*$/i;

      var AJV_FORMATS = {
        // allows 'myTopic', 'myTopic-mySubTopic-SUB_0815+OK' and variations:
        'topic': stringTest(TOPIC_FORMAT),

        // allows 'mySubTopic0815', 'MY_SUB_TOPIC+OK' and variations:
        'sub-topic': stringTest(SUB_TOPIC_FORMAT),

        // allows 'myTopic', '!myTopic-mySubTopic-SUB_0815+OK' and variations:
        'flag-topic': stringTest(FLAG_TOPIC_FORMAT),

        // allows 'de_DE', 'en-x-laxarJS' and such:
        'language-tag': stringTest(LANGUAGE_TAG_FORMAT)
      };

      var AX_FORMAT = 'axFormat';

      // ajv currently does not support formats for non-string types,
      // so we pre-process schemas to use "custom validation keywords" instead.
      var CUSTOM_KEYWORD_FORMATS = {
        // checks that object keys have the 'topic' format:
        'topic-map': keyTest(TOPIC_FORMAT),
        // checks that object keys have the 'language-tag' format:
        'localization': keyTest(LANGUAGE_TAG_FORMAT)
      };

      /**
       * @return {Ajv} an Ajv instance
       */
      function create() {
        var ajv = new _ajv2.default({ jsonPointers: true, useDefaults: true });

        Object.keys(AJV_FORMATS).forEach(function (key) {
          ajv.addFormat(key, AJV_FORMATS[key]);
        });

        ajv.addKeyword(AX_FORMAT, {
          type: 'object',
          validate: validateKeywordFormat,
          errors: false
        });

        return {
          compile: compile,
          error: error
        };

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function compile(schema, sourceRef) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var _options$isFeaturesVa = options.isFeaturesValidator,
              isFeaturesValidator = _options$isFeaturesVa === undefined ? false : _options$isFeaturesVa;

          if (!schema.$schema) {
            throw new Error('JSON schema for artifact "' + sourceRef + '" is missing "$schema" property');
          }
          if (isFeaturesValidator) {
            setAdditionalPropertiesDefault(schema);
          }
          translateCustomKeywordFormats(schema);

          try {
            var validate = ajv.compile(schema);
            return isFeaturesValidator ? decorateValidate(validate, schema, setFirstLevelDefaults) : validate;
          } catch (e) {
            throw new Error('Failed to compile JSON schema for artifact "' + sourceRef + '":\n' + e);
          }
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function error(message, errors) {
          var trim = function trim(_) {
            return _.replace(/^\s+/, '').replace(/\s+$/, '');
          };
          var ajvMessage = ajv.errorsText(errors, { dataVar: '' });
          var error = new Error(message + ': ' + trim(ajvMessage) + ' ' + JSON.stringify(errors.map(function (e) {
            return e.params;
          })));
          error.name = 'ValidationError';
          error.errors = errors;
          return error;
        }
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function setAdditionalPropertiesDefault(schema) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        return applyToSchemas(schema, function (schema) {
          if (('properties' in schema || 'patternProperties' in schema) && !('additionalProperties' in schema)) {
            schema.additionalProperties = value;
          }
        });
      }

      function translateCustomKeywordFormats(schema) {
        return applyToSchemas(schema, function (schema) {
          if (schema.format && schema.format in CUSTOM_KEYWORD_FORMATS) {
            schema[AX_FORMAT] = schema.format;
            delete schema.format;
          }
        });
      }

      function applyToSchemas(schema, callback) {

        return applyRecursively(schema);

        function applyRecursively(schema) {
          if ((typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) === 'object') {
            callback(schema);

            if (schema.items) {
              applyRecursively(schema.items);
            }
            if (schema.properties) {
              forEachValue(schema.properties, applyRecursively);
            }
            if (schema.patternProperties) {
              forEachValue(schema.patternProperties, applyRecursively);
            }
            if (schema.additionalProperties) {
              applyRecursively(schema.additionalProperties);
            }
          }
          return schema;
        }

        function forEachValue(object, callback) {
          return Object.keys(object).forEach(function (key) {
            return callback(object[key], key, object);
          });
        }
      }

      function decorateValidate(validate, schema, decorator) {
        var f = function f(object, rootPointer) {
          decorator(schema, object);
          var result = validate(object, rootPointer);
          if (!result) {
            f.errors = validate.errors;
          }
          return result;
        };
        return f;
      }

      function validateKeywordFormat(format, object) {
        return CUSTOM_KEYWORD_FORMATS[format](object);
      }

      function setFirstLevelDefaults(schema, object) {
        Object.keys(schema.properties || {}).forEach(function (key) {
          if (object[key] !== undefined) {
            return;
          }
          if (schema.properties[key].type === 'object') {
            object[key] = {};
          } else if (schema.properties[key].type === 'array') {
            object[key] = [];
          }
        });
      }

      function stringTest(format) {
        var pattern = new RegExp(format);
        return function (string) {
          return typeof string !== 'string' || pattern.test(string);
        };
      }

      function keyTest(format) {
        var pattern = new RegExp(format);
        return function (object) {
          return Object.keys(object).every(function (key) {
            return pattern.test(key);
          });
        };
      }

      /***/
    },
    /* 7 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__lib_testing_widget_services_assets_mock__ = __webpack_require__(19);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
        return __WEBPACK_IMPORTED_MODULE_0__lib_testing_widget_services_assets_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__lib_testing_widget_services_area_helper_mock__ = __webpack_require__(5);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
        return __WEBPACK_IMPORTED_MODULE_1__lib_testing_widget_services_area_helper_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__lib_testing_configuration_mock__ = __webpack_require__(2);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "d", function () {
        return __WEBPACK_IMPORTED_MODULE_2__lib_testing_configuration_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__lib_testing_event_bus_mock__ = __webpack_require__(16);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "a", function () {
        return __WEBPACK_IMPORTED_MODULE_3__lib_testing_event_bus_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__lib_testing_flow_service_mock__ = __webpack_require__(17);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "e", function () {
        return __WEBPACK_IMPORTED_MODULE_4__lib_testing_flow_service_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__lib_testing_storage_mock__ = __webpack_require__(4);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "g", function () {
        return __WEBPACK_IMPORTED_MODULE_5__lib_testing_storage_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__lib_testing_heartbeat_mock__ = __webpack_require__(18);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "h", function () {
        return __WEBPACK_IMPORTED_MODULE_6__lib_testing_heartbeat_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__lib_testing_widget_services_i18n_mock__ = __webpack_require__(20);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "i", function () {
        return __WEBPACK_IMPORTED_MODULE_7__lib_testing_widget_services_i18n_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_8__lib_testing_log_mock__ = __webpack_require__(3);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "f", function () {
        return __WEBPACK_IMPORTED_MODULE_8__lib_testing_log_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_9__lib_testing_widget_services_storage_mock__ = __webpack_require__(21);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "j", function () {
        return __WEBPACK_IMPORTED_MODULE_9__lib_testing_widget_services_storage_mock__["a"];
      });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_10__lib_testing_widget_services_visibility_mock__ = __webpack_require__(22);
      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "k", function () {
        return __WEBPACK_IMPORTED_MODULE_10__lib_testing_widget_services_visibility_mock__["a"];
      });
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Mock factories that help to tests widgets.
       * These mocks are automatically provided in place of the regular LaxarJS widget services when using
       * laxar-mocks for widget testing.
       *
       * @module laxar-widget-service-mocks
       */

      /**
       * Returns a mock of the `axAssets` injection for tests, to avoid making actual `fetch` calls.
       *
       * For details, see {@link widget_services_assets_mock#create}.
       *
       * @memberof laxar-widget-service-mocks
       * @name createAxAssetsMocks
       * @type {Function}
       */

      /**
       * Returns a mock of the `axAreaHelper` injection for tests.
       *
       * For details, see {@link widget_services_area_helper_mock#create}.
       *
       * @memberof laxar-widget-service-mocks
       * @name createAxAreaHelperMock
       * @type {Function}
       */

      /**
       * Returns a mock of the `axConfiguration` injection for tests.
       *
       * For details, see {@link configuration_mock#create}.
       *
       * @name createAxConfigurationMock
       * @memberof laxar-widget-service-mocks
       * @type {Function}
       */

      /**
       * Returns a mock of the `axEventBus` injection for tests.
       *
       * For details, see {@link event_bus_mock#create}.
       *
       * @name createAxEventBusMock
       * @memberof laxar-widget-service-mocks
       * @type {Function}
       */

      /**
       * Returns a mock of the `axFlowService` injection for tests.
       *
       * For details, see {@link flow_service_mock#create}.
       *
       * @name createAxFlowServiceMock
       * @memberof laxar-widget-service-mocks
       * @type {Function}
       */

      /**
       * Returns a mock of the `axGlobalStorage` injection for tests.
       *
       * For details, see {@link storage_mock#create}.
       *
       * @name createAxGlobalStorageMock
       * @memberof laxar-widget-service-mocks
       * @type {Function}
       */

      /**
       * Returns a mock of the `axHeartbeat` injection for tests.
       *
       * For details, see {@link heartbeat_mock#create}.
       *
       * @name createAxHeartbeatMock
       * @memberof laxar-widget-service-mocks
       * @type {Function}
       */

      /**
       * Returns a mock of the `axI18n` injection for tests.
       *
       * For details, see {@link i18n_mock#create}.
       *
       * @name createAxI18nMock
       * @memberof laxar-widget-service-mocks
       * @type {Function}
       */

      /**
       * Returns a mock of the `axLog` injection for tests.
       *
       * For details, see {@link log_mock#create}.
       *
       * @name createAxLogMock
       * @memberof laxar-widget-service-mocks
       * @type {Function}
       */

      /**
       * Returns a mock of the `axStorage` injection for tests.
       *
       * For details, see {@link widget_services_storage_mock#create}.
       *
       * @name createAxStorageMock
       * @memberof laxar-widget-service-mocks
       * @type {Function}
       */

      /**
       * Returns a mock of the `axVisibility` injection for tests.
       *
       * For details, see {@link widget_services_visibility_mock#create}.
       *
       * @name createAxVisibilityMock
       * @memberof laxar-widget-service-mocks
       * @type {Function}
       */

      /***/
    },
    /* 8 */
    /***/function (module, exports) {

      module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

      /***/
    },
    /* 9 */
    /***/function (module, exports, __webpack_require__) {

      /* WEBPACK VAR INJECTION */(function (global) {
        var require;var require;(function (f) {
          if (true) {
            module.exports = f();
          } else if (typeof define === "function" && define.amd) {
            define([], f);
          } else {
            var g;if (typeof window !== "undefined") {
              g = window;
            } else if (typeof global !== "undefined") {
              g = global;
            } else if (typeof self !== "undefined") {
              g = self;
            } else {
              g = this;
            }g.Ajv = f();
          }
        })(function () {
          var define, module, exports;return function e(t, n, r) {
            function s(o, u) {
              if (!n[o]) {
                if (!t[o]) {
                  var a = typeof require == "function" && require;if (!u && a) return require(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
                  var n = t[o][1][e];return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
              }return n[o].exports;
            }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
              s(r[o]);
            }return s;
          }({ 1: [function (require, module, exports) {
              'use strict';

              module.exports = {
                setup: setupAsync,
                compile: compileAsync
              };

              var util = require('./compile/util');

              var ASYNC = {
                '*': checkGenerators,
                'co*': checkGenerators,
                'es7': checkAsyncFunction
              };

              var TRANSPILE = {
                'nodent': getNodent,
                'regenerator': getRegenerator
              };

              var MODES = [{ async: 'co*' }, { async: 'es7', transpile: 'nodent' }, { async: 'co*', transpile: 'regenerator' }];

              var regenerator, nodent;

              function setupAsync(opts, required) {
                if (required !== false) required = true;
                var async = opts.async,
                    transpile = opts.transpile,
                    check;

                switch (typeof transpile === 'undefined' ? 'undefined' : _typeof3(transpile)) {
                  case 'string':
                    var get = TRANSPILE[transpile];
                    if (!get) throw new Error('bad transpiler: ' + transpile);
                    return opts._transpileFunc = get(opts, required);
                  case 'undefined':
                  case 'boolean':
                    if (typeof async == 'string') {
                      check = ASYNC[async];
                      if (!check) throw new Error('bad async mode: ' + async);
                      return opts.transpile = check(opts, required);
                    }

                    for (var i = 0; i < MODES.length; i++) {
                      var _opts = MODES[i];
                      if (setupAsync(_opts, false)) {
                        util.copy(_opts, opts);
                        return opts.transpile;
                      }
                    }
                    /* istanbul ignore next */
                    throw new Error('generators, nodent and regenerator are not available');
                  case 'function':
                    return opts._transpileFunc = opts.transpile;
                  default:
                    throw new Error('bad transpiler: ' + transpile);
                }
              }

              function checkGenerators(opts, required) {
                /* jshint evil: true */
                try {
                  new Function('(function*(){})()')();
                  return true;
                } catch (e) {
                  /* istanbul ignore next */
                  if (required) throw new Error('generators not supported');
                }
              }

              function checkAsyncFunction(opts, required) {
                /* jshint evil: true */
                try {
                  new Function('(async function(){})()')();
                  /* istanbul ignore next */
                  return true;
                } catch (e) {
                  if (required) throw new Error('es7 async functions not supported');
                }
              }

              function getRegenerator(opts, required) {
                try {
                  if (!regenerator) {
                    var name = 'regenerator';
                    regenerator = require(name);
                    regenerator.runtime();
                  }
                  if (!opts.async || opts.async === true) opts.async = 'es7';
                  return regeneratorTranspile;
                } catch (e) {
                  /* istanbul ignore next */
                  if (required) throw new Error('regenerator not available');
                }
              }

              function regeneratorTranspile(code) {
                return regenerator.compile(code).code;
              }

              function getNodent(opts, required) {
                /* jshint evil: true */
                try {
                  if (!nodent) {
                    var name = 'nodent';
                    nodent = require(name)({ log: false, dontInstallRequireHook: true });
                  }
                  if (opts.async != 'es7') {
                    if (opts.async && opts.async !== true) console.warn('nodent transpiles only es7 async functions');
                    opts.async = 'es7';
                  }
                  return nodentTranspile;
                } catch (e) {
                  /* istanbul ignore next */
                  if (required) throw new Error('nodent not available');
                }
              }

              function nodentTranspile(code) {
                return nodent.compile(code, '', { promises: true, sourcemap: false }).code;
              }

              /**
               * Creates validating function for passed schema with asynchronous loading of missing schemas.
               * `loadSchema` option should be a function that accepts schema uri and node-style callback.
               * @this  Ajv
               * @param {Object}   schema schema object
               * @param {Function} callback node-style callback, it is always called with 2 parameters: error (or null) and validating function.
               */
              function compileAsync(schema, callback) {
                /* eslint no-shadow: 0 */
                /* jshint validthis: true */
                var schemaObj;
                var self = this;
                try {
                  schemaObj = this._addSchema(schema);
                } catch (e) {
                  setTimeout(function () {
                    callback(e);
                  });
                  return;
                }
                if (schemaObj.validate) {
                  setTimeout(function () {
                    callback(null, schemaObj.validate);
                  });
                } else {
                  if (typeof this._opts.loadSchema != 'function') throw new Error('options.loadSchema should be a function');
                  _compileAsync(schema, callback, true);
                }

                function _compileAsync(schema, callback, firstCall) {
                  var validate;
                  try {
                    validate = self.compile(schema);
                  } catch (e) {
                    if (e.missingSchema) loadMissingSchema(e);else deferCallback(e);
                    return;
                  }
                  deferCallback(null, validate);

                  function loadMissingSchema(e) {
                    var ref = e.missingSchema;
                    if (self._refs[ref] || self._schemas[ref]) return callback(new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved'));
                    var _callbacks = self._loadingSchemas[ref];
                    if (_callbacks) {
                      if (typeof _callbacks == 'function') self._loadingSchemas[ref] = [_callbacks, schemaLoaded];else _callbacks[_callbacks.length] = schemaLoaded;
                    } else {
                      self._loadingSchemas[ref] = schemaLoaded;
                      self._opts.loadSchema(ref, function (err, sch) {
                        var _callbacks = self._loadingSchemas[ref];
                        delete self._loadingSchemas[ref];
                        if (typeof _callbacks == 'function') {
                          _callbacks(err, sch);
                        } else {
                          for (var i = 0; i < _callbacks.length; i++) {
                            _callbacks[i](err, sch);
                          }
                        }
                      });
                    }

                    function schemaLoaded(err, sch) {
                      if (err) return callback(err);
                      if (!(self._refs[ref] || self._schemas[ref])) {
                        try {
                          self.addSchema(sch, ref);
                        } catch (e) {
                          callback(e);
                          return;
                        }
                      }
                      _compileAsync(schema, callback);
                    }
                  }

                  function deferCallback(err, validate) {
                    if (firstCall) setTimeout(function () {
                      callback(err, validate);
                    });else return callback(err, validate);
                  }
                }
              }
            }, { "./compile/util": 11 }], 2: [function (require, module, exports) {
              'use strict';

              var Cache = module.exports = function Cache() {
                this._cache = {};
              };

              Cache.prototype.put = function Cache_put(key, value) {
                this._cache[key] = value;
              };

              Cache.prototype.get = function Cache_get(key) {
                return this._cache[key];
              };

              Cache.prototype.del = function Cache_del(key) {
                delete this._cache[key];
              };

              Cache.prototype.clear = function Cache_clear() {
                this._cache = {};
              };
            }, {}], 3: [function (require, module, exports) {
              'use strict';

              //all requires must be explicit because browserify won't work with dynamic requires

              module.exports = {
                '$ref': require('../dotjs/ref'),
                allOf: require('../dotjs/allOf'),
                anyOf: require('../dotjs/anyOf'),
                dependencies: require('../dotjs/dependencies'),
                'enum': require('../dotjs/enum'),
                format: require('../dotjs/format'),
                items: require('../dotjs/items'),
                maximum: require('../dotjs/_limit'),
                minimum: require('../dotjs/_limit'),
                maxItems: require('../dotjs/_limitItems'),
                minItems: require('../dotjs/_limitItems'),
                maxLength: require('../dotjs/_limitLength'),
                minLength: require('../dotjs/_limitLength'),
                maxProperties: require('../dotjs/_limitProperties'),
                minProperties: require('../dotjs/_limitProperties'),
                multipleOf: require('../dotjs/multipleOf'),
                not: require('../dotjs/not'),
                oneOf: require('../dotjs/oneOf'),
                pattern: require('../dotjs/pattern'),
                properties: require('../dotjs/properties'),
                required: require('../dotjs/required'),
                uniqueItems: require('../dotjs/uniqueItems'),
                validate: require('../dotjs/validate')
              };
            }, { "../dotjs/_limit": 14, "../dotjs/_limitItems": 15, "../dotjs/_limitLength": 16, "../dotjs/_limitProperties": 17, "../dotjs/allOf": 18, "../dotjs/anyOf": 19, "../dotjs/dependencies": 22, "../dotjs/enum": 23, "../dotjs/format": 24, "../dotjs/items": 25, "../dotjs/multipleOf": 26, "../dotjs/not": 27, "../dotjs/oneOf": 28, "../dotjs/pattern": 29, "../dotjs/properties": 31, "../dotjs/ref": 32, "../dotjs/required": 33, "../dotjs/uniqueItems": 35, "../dotjs/validate": 36 }], 4: [function (require, module, exports) {
              'use strict';

              /*eslint complexity: 0*/

              module.exports = function equal(a, b) {
                if (a === b) return true;

                var arrA = Array.isArray(a),
                    arrB = Array.isArray(b),
                    i;

                if (arrA && arrB) {
                  if (a.length != b.length) return false;
                  for (i = 0; i < a.length; i++) {
                    if (!equal(a[i], b[i])) return false;
                  }return true;
                }

                if (arrA != arrB) return false;

                if (a && b && (typeof a === 'undefined' ? 'undefined' : _typeof3(a)) === 'object' && (typeof b === 'undefined' ? 'undefined' : _typeof3(b)) === 'object') {
                  var keys = Object.keys(a);
                  if (keys.length !== Object.keys(b).length) return false;

                  var dateA = a instanceof Date,
                      dateB = b instanceof Date;
                  if (dateA && dateB) return a.getTime() == b.getTime();
                  if (dateA != dateB) return false;

                  var regexpA = a instanceof RegExp,
                      regexpB = b instanceof RegExp;
                  if (regexpA && regexpB) return a.toString() == b.toString();
                  if (regexpA != regexpB) return false;

                  for (i = 0; i < keys.length; i++) {
                    if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
                  }for (i = 0; i < keys.length; i++) {
                    if (!equal(a[keys[i]], b[keys[i]])) return false;
                  }return true;
                }

                return false;
              };
            }, {}], 5: [function (require, module, exports) {
              'use strict';

              var util = require('./util');

              var DATE = /^\d\d\d\d-(\d\d)-(\d\d)$/;
              var DAYS = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
              var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
              var HOSTNAME = /^[0-9a-z](?:(?:[-0-9a-z]{0,61})?[0-9a-z])?(\.[0-9a-z](?:(?:[-0-9a-z]{0,61})?[0-9a-z])?)*$/i;
              var URI = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i;
              var UUID = /^(?:urn\:uuid\:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
              var JSON_POINTER = /^(?:\/(?:[^~\/]|~0|~1)*)*$|^\#(?:\/(?:[a-z0-9_\-\.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
              var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:\#|(?:\/(?:[^~\/]|~0|~1)*)*)$/;

              module.exports = formats;

              function formats(mode) {
                mode = mode == 'full' ? 'full' : 'fast';
                var formatDefs = util.copy(formats[mode]);
                for (var fName in formats.compare) {
                  formatDefs[fName] = {
                    validate: formatDefs[fName],
                    compare: formats.compare[fName]
                  };
                }
                return formatDefs;
              }

              formats.fast = {
                // date: http://tools.ietf.org/html/rfc3339#section-5.6
                date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
                // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
                time: /^[0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,
                'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s][0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
                // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
                uri: /^(?:[a-z][a-z0-9+-.]*)?(?:\:|\/)\/?[^\s]*$/i,
                // email (sources from jsen validator):
                // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
                // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
                email: /^[a-z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
                hostname: HOSTNAME,
                // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
                ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
                // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
                ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
                regex: regex,
                // uuid: http://tools.ietf.org/html/rfc4122
                uuid: UUID,
                // JSON-pointer: https://tools.ietf.org/html/rfc6901
                // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
                'json-pointer': JSON_POINTER,
                // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
                'relative-json-pointer': RELATIVE_JSON_POINTER
              };

              formats.full = {
                date: date,
                time: time,
                'date-time': date_time,
                uri: uri,
                email: /^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
                hostname: hostname,
                ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
                ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
                regex: regex,
                uuid: UUID,
                'json-pointer': JSON_POINTER,
                'relative-json-pointer': RELATIVE_JSON_POINTER
              };

              formats.compare = {
                date: compareDate,
                time: compareTime,
                'date-time': compareDateTime
              };

              function date(str) {
                // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
                var matches = str.match(DATE);
                if (!matches) return false;

                var month = +matches[1];
                var day = +matches[2];
                return month >= 1 && month <= 12 && day >= 1 && day <= DAYS[month];
              }

              function time(str, full) {
                var matches = str.match(TIME);
                if (!matches) return false;

                var hour = matches[1];
                var minute = matches[2];
                var second = matches[3];
                var timeZone = matches[5];
                return hour <= 23 && minute <= 59 && second <= 59 && (!full || timeZone);
              }

              var DATE_TIME_SEPARATOR = /t|\s/i;
              function date_time(str) {
                // http://tools.ietf.org/html/rfc3339#section-5.6
                var dateTime = str.split(DATE_TIME_SEPARATOR);
                return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
              }

              function hostname(str) {
                // https://tools.ietf.org/html/rfc1034#section-3.5
                // https://tools.ietf.org/html/rfc1123#section-2
                return str.length <= 255 && HOSTNAME.test(str);
              }

              var NOT_URI_FRAGMENT = /\/|\:/;
              function uri(str) {
                // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
                return NOT_URI_FRAGMENT.test(str) && URI.test(str);
              }

              function regex(str) {
                try {
                  new RegExp(str);
                  return true;
                } catch (e) {
                  return false;
                }
              }

              function compareDate(d1, d2) {
                if (!(d1 && d2)) return;
                if (d1 > d2) return 1;
                if (d1 < d2) return -1;
                if (d1 === d2) return 0;
              }

              function compareTime(t1, t2) {
                if (!(t1 && t2)) return;
                t1 = t1.match(TIME);
                t2 = t2.match(TIME);
                if (!(t1 && t2)) return;
                t1 = t1[1] + t1[2] + t1[3] + (t1[4] || '');
                t2 = t2[1] + t2[2] + t2[3] + (t2[4] || '');
                if (t1 > t2) return 1;
                if (t1 < t2) return -1;
                if (t1 === t2) return 0;
              }

              function compareDateTime(dt1, dt2) {
                if (!(dt1 && dt2)) return;
                dt1 = dt1.split(DATE_TIME_SEPARATOR);
                dt2 = dt2.split(DATE_TIME_SEPARATOR);
                var res = compareDate(dt1[0], dt2[0]);
                if (res === undefined) return;
                return res || compareTime(dt1[1], dt2[1]);
              }
            }, { "./util": 11 }], 6: [function (require, module, exports) {
              'use strict';

              var resolve = require('./resolve'),
                  util = require('./util'),
                  stableStringify = require('json-stable-stringify'),
                  async = require('../async');

              var beautify;

              function loadBeautify() {
                if (beautify === undefined) {
                  var name = 'js-beautify';
                  try {
                    beautify = require(name).js_beautify;
                  } catch (e) {
                    beautify = false;
                  }
                }
              }

              var validateGenerator = require('../dotjs/validate');

              /**
               * Functions below are used inside compiled validations function
               */

              var co = require('co');
              var ucs2length = util.ucs2length;
              var equal = require('./equal');

              // this error is thrown by async schemas to return validation errors via exception
              var ValidationError = require('./validation_error');

              module.exports = compile;

              /**
               * Compiles schema to validation function
               * @this   Ajv
               * @param  {Object} schema schema object
               * @param  {Object} root object with information about the root schema for this schema
               * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
               * @param  {String} baseId base ID for IDs in the schema
               * @return {Function} validation function
               */
              function compile(schema, root, localRefs, baseId) {
                /* jshint validthis: true, evil: true */
                /* eslint no-shadow: 0 */
                var self = this,
                    opts = this._opts,
                    refVal = [undefined],
                    refs = {},
                    patterns = [],
                    patternsHash = {},
                    defaults = [],
                    defaultsHash = {},
                    customRules = [],
                    keepSourceCode = opts.sourceCode !== false;

                root = root || { schema: schema, refVal: refVal, refs: refs };

                var c = checkCompiling.call(this, schema, root, baseId);
                var compilation = this._compilations[c.index];
                if (c.compiling) return compilation.callValidate = callValidate;

                var formats = this._formats;
                var RULES = this.RULES;

                try {
                  var v = localCompile(schema, root, localRefs, baseId);
                  compilation.validate = v;
                  var cv = compilation.callValidate;
                  if (cv) {
                    cv.schema = v.schema;
                    cv.errors = null;
                    cv.refs = v.refs;
                    cv.refVal = v.refVal;
                    cv.root = v.root;
                    cv.$async = v.$async;
                    if (keepSourceCode) cv.sourceCode = v.sourceCode;
                  }
                  return v;
                } finally {
                  endCompiling.call(this, schema, root, baseId);
                }

                function callValidate() {
                  var validate = compilation.validate;
                  var result = validate.apply(null, arguments);
                  callValidate.errors = validate.errors;
                  return result;
                }

                function localCompile(_schema, _root, localRefs, baseId) {
                  var isRoot = !_root || _root && _root.schema == _schema;
                  if (_root.schema != root.schema) return compile.call(self, _schema, _root, localRefs, baseId);

                  var $async = _schema.$async === true;
                  if ($async && !opts.transpile) async.setup(opts);

                  var sourceCode = validateGenerator({
                    isTop: true,
                    schema: _schema,
                    isRoot: isRoot,
                    baseId: baseId,
                    root: _root,
                    schemaPath: '',
                    errSchemaPath: '#',
                    errorPath: '""',
                    RULES: RULES,
                    validate: validateGenerator,
                    util: util,
                    resolve: resolve,
                    resolveRef: resolveRef,
                    usePattern: usePattern,
                    useDefault: useDefault,
                    useCustomRule: useCustomRule,
                    opts: opts,
                    formats: formats,
                    self: self
                  });

                  sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;

                  if (opts.beautify) {
                    loadBeautify();
                    /* istanbul ignore else */
                    if (beautify) sourceCode = beautify(sourceCode, opts.beautify);else console.error('"npm install js-beautify" to use beautify option');
                  }
                  // console.log('\n\n\n *** \n', sourceCode);
                  var validate,
                      validateCode,
                      transpile = opts._transpileFunc;
                  try {
                    validateCode = $async && transpile ? transpile(sourceCode) : sourceCode;

                    var makeValidate = new Function('self', 'RULES', 'formats', 'root', 'refVal', 'defaults', 'customRules', 'co', 'equal', 'ucs2length', 'ValidationError', validateCode);

                    validate = makeValidate(self, RULES, formats, root, refVal, defaults, customRules, co, equal, ucs2length, ValidationError);

                    refVal[0] = validate;
                  } catch (e) {
                    console.error('Error compiling schema, function code:', validateCode);
                    throw e;
                  }

                  validate.schema = _schema;
                  validate.errors = null;
                  validate.refs = refs;
                  validate.refVal = refVal;
                  validate.root = isRoot ? validate : _root;
                  if ($async) validate.$async = true;
                  if (keepSourceCode) validate.sourceCode = sourceCode;
                  if (opts.sourceCode === true) {
                    validate.source = {
                      patterns: patterns,
                      defaults: defaults
                    };
                  }

                  return validate;
                }

                function resolveRef(baseId, ref, isRoot) {
                  ref = resolve.url(baseId, ref);
                  var refIndex = refs[ref];
                  var _refVal, refCode;
                  if (refIndex !== undefined) {
                    _refVal = refVal[refIndex];
                    refCode = 'refVal[' + refIndex + ']';
                    return resolvedRef(_refVal, refCode);
                  }
                  if (!isRoot && root.refs) {
                    var rootRefId = root.refs[ref];
                    if (rootRefId !== undefined) {
                      _refVal = root.refVal[rootRefId];
                      refCode = addLocalRef(ref, _refVal);
                      return resolvedRef(_refVal, refCode);
                    }
                  }

                  refCode = addLocalRef(ref);
                  var v = resolve.call(self, localCompile, root, ref);
                  if (!v) {
                    var localSchema = localRefs && localRefs[ref];
                    if (localSchema) {
                      v = resolve.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self, localSchema, root, localRefs, baseId);
                    }
                  }

                  if (v) {
                    replaceLocalRef(ref, v);
                    return resolvedRef(v, refCode);
                  }
                }

                function addLocalRef(ref, v) {
                  var refId = refVal.length;
                  refVal[refId] = v;
                  refs[ref] = refId;
                  return 'refVal' + refId;
                }

                function replaceLocalRef(ref, v) {
                  var refId = refs[ref];
                  refVal[refId] = v;
                }

                function resolvedRef(refVal, code) {
                  return (typeof refVal === 'undefined' ? 'undefined' : _typeof3(refVal)) == 'object' ? { code: code, schema: refVal, inline: true } : { code: code, $async: refVal && refVal.$async };
                }

                function usePattern(regexStr) {
                  var index = patternsHash[regexStr];
                  if (index === undefined) {
                    index = patternsHash[regexStr] = patterns.length;
                    patterns[index] = regexStr;
                  }
                  return 'pattern' + index;
                }

                function useDefault(value) {
                  switch (typeof value === 'undefined' ? 'undefined' : _typeof3(value)) {
                    case 'boolean':
                    case 'number':
                      return '' + value;
                    case 'string':
                      return util.toQuotedString(value);
                    case 'object':
                      if (value === null) return 'null';
                      var valueStr = stableStringify(value);
                      var index = defaultsHash[valueStr];
                      if (index === undefined) {
                        index = defaultsHash[valueStr] = defaults.length;
                        defaults[index] = value;
                      }
                      return 'default' + index;
                  }
                }

                function useCustomRule(rule, schema, parentSchema, it) {
                  var validateSchema = rule.definition.validateSchema;
                  if (validateSchema && self._opts.validateSchema !== false) {
                    var valid = validateSchema(schema);
                    if (!valid) {
                      var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
                      if (self._opts.validateSchema == 'log') console.error(message);else throw new Error(message);
                    }
                  }

                  var compile = rule.definition.compile,
                      inline = rule.definition.inline,
                      macro = rule.definition.macro;

                  var validate;
                  if (compile) {
                    validate = compile.call(self, schema, parentSchema, it);
                  } else if (macro) {
                    validate = macro.call(self, schema, parentSchema, it);
                    if (opts.validateSchema !== false) self.validateSchema(validate, true);
                  } else if (inline) {
                    validate = inline.call(self, it, rule.keyword, schema, parentSchema);
                  } else {
                    validate = rule.definition.validate;
                  }

                  var index = customRules.length;
                  customRules[index] = validate;

                  return {
                    code: 'customRule' + index,
                    validate: validate
                  };
                }
              }

              /**
               * Checks if the schema is currently compiled
               * @this   Ajv
               * @param  {Object} schema schema to compile
               * @param  {Object} root root object
               * @param  {String} baseId base schema ID
               * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
               */
              function checkCompiling(schema, root, baseId) {
                /* jshint validthis: true */
                var index = compIndex.call(this, schema, root, baseId);
                if (index >= 0) return { index: index, compiling: true };
                index = this._compilations.length;
                this._compilations[index] = {
                  schema: schema,
                  root: root,
                  baseId: baseId
                };
                return { index: index, compiling: false };
              }

              /**
               * Removes the schema from the currently compiled list
               * @this   Ajv
               * @param  {Object} schema schema to compile
               * @param  {Object} root root object
               * @param  {String} baseId base schema ID
               */
              function endCompiling(schema, root, baseId) {
                /* jshint validthis: true */
                var i = compIndex.call(this, schema, root, baseId);
                if (i >= 0) this._compilations.splice(i, 1);
              }

              /**
               * Index of schema compilation in the currently compiled list
               * @this   Ajv
               * @param  {Object} schema schema to compile
               * @param  {Object} root root object
               * @param  {String} baseId base schema ID
               * @return {Integer} compilation index
               */
              function compIndex(schema, root, baseId) {
                /* jshint validthis: true */
                for (var i = 0; i < this._compilations.length; i++) {
                  var c = this._compilations[i];
                  if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
                }
                return -1;
              }

              function patternCode(i, patterns) {
                return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
              }

              function defaultCode(i) {
                return 'var default' + i + ' = defaults[' + i + '];';
              }

              function refValCode(i, refVal) {
                return refVal[i] ? 'var refVal' + i + ' = refVal[' + i + '];' : '';
              }

              function customRuleCode(i) {
                return 'var customRule' + i + ' = customRules[' + i + '];';
              }

              function vars(arr, statement) {
                if (!arr.length) return '';
                var code = '';
                for (var i = 0; i < arr.length; i++) {
                  code += statement(i, arr);
                }return code;
              }
            }, { "../async": 1, "../dotjs/validate": 36, "./equal": 4, "./resolve": 7, "./util": 11, "./validation_error": 12, "co": 47, "json-stable-stringify": 48 }], 7: [function (require, module, exports) {
              'use strict';

              var url = require('url'),
                  equal = require('./equal'),
                  util = require('./util'),
                  SchemaObject = require('./schema_obj');

              module.exports = resolve;

              resolve.normalizeId = normalizeId;
              resolve.fullPath = getFullPath;
              resolve.url = resolveUrl;
              resolve.ids = resolveIds;
              resolve.inlineRef = inlineRef;
              resolve.schema = resolveSchema;

              /**
               * [resolve and compile the references ($ref)]
               * @this   Ajv
               * @param  {Function} compile reference to schema compilation funciton (localCompile)
               * @param  {Object} root object with information about the root schema for the current schema
               * @param  {String} ref reference to resolve
               * @return {Object|Function} schema object (if the schema can be inlined) or validation function
               */
              function resolve(compile, root, ref) {
                /* jshint validthis: true */
                var refVal = this._refs[ref];
                if (typeof refVal == 'string') {
                  if (this._refs[refVal]) refVal = this._refs[refVal];else return resolve.call(this, compile, root, refVal);
                }

                refVal = refVal || this._schemas[ref];
                if (refVal instanceof SchemaObject) {
                  return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
                }

                var res = resolveSchema.call(this, root, ref);
                var schema, v, baseId;
                if (res) {
                  schema = res.schema;
                  root = res.root;
                  baseId = res.baseId;
                }

                if (schema instanceof SchemaObject) {
                  v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
                } else if (schema) {
                  v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);
                }

                return v;
              }

              /**
               * Resolve schema, its root and baseId
               * @this Ajv
               * @param  {Object} root root object with properties schema, refVal, refs
               * @param  {String} ref  reference to resolve
               * @return {Object} object with properties schema, root, baseId
               */
              function resolveSchema(root, ref) {
                /* jshint validthis: true */
                var p = url.parse(ref, false, true),
                    refPath = _getFullPath(p),
                    baseId = getFullPath(root.schema.id);
                if (refPath !== baseId) {
                  var id = normalizeId(refPath);
                  var refVal = this._refs[id];
                  if (typeof refVal == 'string') {
                    return resolveRecursive.call(this, root, refVal, p);
                  } else if (refVal instanceof SchemaObject) {
                    if (!refVal.validate) this._compile(refVal);
                    root = refVal;
                  } else {
                    refVal = this._schemas[id];
                    if (refVal instanceof SchemaObject) {
                      if (!refVal.validate) this._compile(refVal);
                      if (id == normalizeId(ref)) return { schema: refVal, root: root, baseId: baseId };
                      root = refVal;
                    } else {
                      return;
                    }
                  }
                  if (!root.schema) return;
                  baseId = getFullPath(root.schema.id);
                }
                return getJsonPointer.call(this, p, baseId, root.schema, root);
              }

              /* @this Ajv */
              function resolveRecursive(root, ref, parsedRef) {
                /* jshint validthis: true */
                var res = resolveSchema.call(this, root, ref);
                if (res) {
                  var schema = res.schema;
                  var baseId = res.baseId;
                  root = res.root;
                  if (schema.id) baseId = resolveUrl(baseId, schema.id);
                  return getJsonPointer.call(this, parsedRef, baseId, schema, root);
                }
              }

              var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
              /* @this Ajv */
              function getJsonPointer(parsedRef, baseId, schema, root) {
                /* jshint validthis: true */
                parsedRef.hash = parsedRef.hash || '';
                if (parsedRef.hash.slice(0, 2) != '#/') return;
                var parts = parsedRef.hash.split('/');

                for (var i = 1; i < parts.length; i++) {
                  var part = parts[i];
                  if (part) {
                    part = util.unescapeFragment(part);
                    schema = schema[part];
                    if (!schema) break;
                    if (schema.id && !PREVENT_SCOPE_CHANGE[part]) baseId = resolveUrl(baseId, schema.id);
                    if (schema.$ref) {
                      var $ref = resolveUrl(baseId, schema.$ref);
                      var res = resolveSchema.call(this, root, $ref);
                      if (res) {
                        schema = res.schema;
                        root = res.root;
                        baseId = res.baseId;
                      }
                    }
                  }
                }
                if (schema && schema != root.schema) return { schema: schema, root: root, baseId: baseId };
              }

              var SIMPLE_INLINED = util.toHash(['type', 'format', 'pattern', 'maxLength', 'minLength', 'maxProperties', 'minProperties', 'maxItems', 'minItems', 'maximum', 'minimum', 'uniqueItems', 'multipleOf', 'required', 'enum']);
              function inlineRef(schema, limit) {
                if (limit === false) return false;
                if (limit === undefined || limit === true) return checkNoRef(schema);else if (limit) return countKeys(schema) <= limit;
              }

              function checkNoRef(schema) {
                var item;
                if (Array.isArray(schema)) {
                  for (var i = 0; i < schema.length; i++) {
                    item = schema[i];
                    if ((typeof item === 'undefined' ? 'undefined' : _typeof3(item)) == 'object' && !checkNoRef(item)) return false;
                  }
                } else {
                  for (var key in schema) {
                    if (key == '$ref') return false;
                    item = schema[key];
                    if ((typeof item === 'undefined' ? 'undefined' : _typeof3(item)) == 'object' && !checkNoRef(item)) return false;
                  }
                }
                return true;
              }

              function countKeys(schema) {
                var count = 0,
                    item;
                if (Array.isArray(schema)) {
                  for (var i = 0; i < schema.length; i++) {
                    item = schema[i];
                    if ((typeof item === 'undefined' ? 'undefined' : _typeof3(item)) == 'object') count += countKeys(item);
                    if (count == Infinity) return Infinity;
                  }
                } else {
                  for (var key in schema) {
                    if (key == '$ref') return Infinity;
                    if (SIMPLE_INLINED[key]) {
                      count++;
                    } else {
                      item = schema[key];
                      if ((typeof item === 'undefined' ? 'undefined' : _typeof3(item)) == 'object') count += countKeys(item) + 1;
                      if (count == Infinity) return Infinity;
                    }
                  }
                }
                return count;
              }

              function getFullPath(id, normalize) {
                if (normalize !== false) id = normalizeId(id);
                var p = url.parse(id, false, true);
                return _getFullPath(p);
              }

              function _getFullPath(p) {
                var protocolSeparator = p.protocol || p.href.slice(0, 2) == '//' ? '//' : '';
                return (p.protocol || '') + protocolSeparator + (p.host || '') + (p.path || '') + '#';
              }

              var TRAILING_SLASH_HASH = /#\/?$/;
              function normalizeId(id) {
                return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
              }

              function resolveUrl(baseId, id) {
                id = normalizeId(id);
                return url.resolve(baseId, id);
              }

              /* @this Ajv */
              function resolveIds(schema) {
                /* eslint no-shadow: 0 */
                /* jshint validthis: true */
                var id = normalizeId(schema.id);
                var localRefs = {};
                _resolveIds.call(this, schema, getFullPath(id, false), id);
                return localRefs;

                /* @this Ajv */
                function _resolveIds(schema, fullPath, baseId) {
                  /* jshint validthis: true */
                  if (Array.isArray(schema)) {
                    for (var i = 0; i < schema.length; i++) {
                      _resolveIds.call(this, schema[i], fullPath + '/' + i, baseId);
                    }
                  } else if (schema && (typeof schema === 'undefined' ? 'undefined' : _typeof3(schema)) == 'object') {
                    if (typeof schema.id == 'string') {
                      var id = baseId = baseId ? url.resolve(baseId, schema.id) : schema.id;
                      id = normalizeId(id);

                      var refVal = this._refs[id];
                      if (typeof refVal == 'string') refVal = this._refs[refVal];
                      if (refVal && refVal.schema) {
                        if (!equal(schema, refVal.schema)) throw new Error('id "' + id + '" resolves to more than one schema');
                      } else if (id != normalizeId(fullPath)) {
                        if (id[0] == '#') {
                          if (localRefs[id] && !equal(schema, localRefs[id])) throw new Error('id "' + id + '" resolves to more than one schema');
                          localRefs[id] = schema;
                        } else {
                          this._refs[id] = fullPath;
                        }
                      }
                    }
                    for (var key in schema) {
                      _resolveIds.call(this, schema[key], fullPath + '/' + util.escapeFragment(key), baseId);
                    }
                  }
                }
              }
            }, { "./equal": 4, "./schema_obj": 9, "./util": 11, "url": 45 }], 8: [function (require, module, exports) {
              'use strict';

              var ruleModules = require('./_rules'),
                  toHash = require('./util').toHash;

              module.exports = function rules() {
                var RULES = [{ type: 'number',
                  rules: ['maximum', 'minimum', 'multipleOf'] }, { type: 'string',
                  rules: ['maxLength', 'minLength', 'pattern', 'format'] }, { type: 'array',
                  rules: ['maxItems', 'minItems', 'uniqueItems', 'items'] }, { type: 'object',
                  rules: ['maxProperties', 'minProperties', 'required', 'dependencies', 'properties'] }, { rules: ['$ref', 'enum', 'not', 'anyOf', 'oneOf', 'allOf'] }];

                var ALL = ['type', 'additionalProperties', 'patternProperties'];
                var KEYWORDS = ['additionalItems', '$schema', 'id', 'title', 'description', 'default'];
                var TYPES = ['number', 'integer', 'string', 'array', 'object', 'boolean', 'null'];
                RULES.all = toHash(ALL);

                RULES.forEach(function (group) {
                  group.rules = group.rules.map(function (keyword) {
                    ALL.push(keyword);
                    var rule = RULES.all[keyword] = {
                      keyword: keyword,
                      code: ruleModules[keyword]
                    };
                    return rule;
                  });
                });

                RULES.keywords = toHash(ALL.concat(KEYWORDS));
                RULES.types = toHash(TYPES);
                RULES.custom = {};

                return RULES;
              };
            }, { "./_rules": 3, "./util": 11 }], 9: [function (require, module, exports) {
              'use strict';

              var util = require('./util');

              module.exports = SchemaObject;

              function SchemaObject(obj) {
                util.copy(obj, this);
              }
            }, { "./util": 11 }], 10: [function (require, module, exports) {
              'use strict';

              // https://mathiasbynens.be/notes/javascript-encoding
              // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode

              module.exports = function ucs2length(str) {
                var length = 0,
                    len = str.length,
                    pos = 0,
                    value;
                while (pos < len) {
                  length++;
                  value = str.charCodeAt(pos++);
                  if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
                    // high surrogate, and there is a next character
                    value = str.charCodeAt(pos);
                    if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
                  }
                }
                return length;
              };
            }, {}], 11: [function (require, module, exports) {
              'use strict';

              module.exports = {
                copy: copy,
                checkDataType: checkDataType,
                checkDataTypes: checkDataTypes,
                coerceToTypes: coerceToTypes,
                toHash: toHash,
                getProperty: getProperty,
                escapeQuotes: escapeQuotes,
                ucs2length: require('./ucs2length'),
                varOccurences: varOccurences,
                varReplace: varReplace,
                cleanUpCode: cleanUpCode,
                cleanUpVarErrors: cleanUpVarErrors,
                schemaHasRules: schemaHasRules,
                schemaHasRulesExcept: schemaHasRulesExcept,
                stableStringify: require('json-stable-stringify'),
                toQuotedString: toQuotedString,
                getPathExpr: getPathExpr,
                getPath: getPath,
                getData: getData,
                unescapeFragment: unescapeFragment,
                escapeFragment: escapeFragment,
                escapeJsonPointer: escapeJsonPointer
              };

              function copy(o, to) {
                to = to || {};
                for (var key in o) {
                  to[key] = o[key];
                }return to;
              }

              function checkDataType(dataType, data, negate) {
                var EQUAL = negate ? ' !== ' : ' === ',
                    AND = negate ? ' || ' : ' && ',
                    OK = negate ? '!' : '',
                    NOT = negate ? '' : '!';
                switch (dataType) {
                  case 'null':
                    return data + EQUAL + 'null';
                  case 'array':
                    return OK + 'Array.isArray(' + data + ')';
                  case 'object':
                    return '(' + OK + data + AND + 'typeof ' + data + EQUAL + '"object"' + AND + NOT + 'Array.isArray(' + data + '))';
                  case 'integer':
                    return '(typeof ' + data + EQUAL + '"number"' + AND + NOT + '(' + data + ' % 1)' + AND + data + EQUAL + data + ')';
                  default:
                    return 'typeof ' + data + EQUAL + '"' + dataType + '"';
                }
              }

              function checkDataTypes(dataTypes, data) {
                switch (dataTypes.length) {
                  case 1:
                    return checkDataType(dataTypes[0], data, true);
                  default:
                    var code = '';
                    var types = toHash(dataTypes);
                    if (types.array && types.object) {
                      code = types.null ? '(' : '(!' + data + ' || ';
                      code += 'typeof ' + data + ' !== "object")';
                      delete types.null;
                      delete types.array;
                      delete types.object;
                    }
                    if (types.number) delete types.integer;
                    for (var t in types) {
                      code += (code ? ' && ' : '') + checkDataType(t, data, true);
                    }return code;
                }
              }

              var COERCE_TO_TYPES = toHash(['string', 'number', 'integer', 'boolean', 'null']);
              function coerceToTypes(optionCoerceTypes, dataTypes) {
                if (Array.isArray(dataTypes)) {
                  var types = [];
                  for (var i = 0; i < dataTypes.length; i++) {
                    var t = dataTypes[i];
                    if (COERCE_TO_TYPES[t]) types[types.length] = t;else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
                  }
                  if (types.length) return types;
                } else if (COERCE_TO_TYPES[dataTypes]) {
                  return [dataTypes];
                } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
                  return ['array'];
                }
              }

              function toHash(arr) {
                var hash = {};
                for (var i = 0; i < arr.length; i++) {
                  hash[arr[i]] = true;
                }return hash;
              }

              var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
              var SINGLE_QUOTE = /'|\\/g;
              function getProperty(key) {
                return typeof key == 'number' ? '[' + key + ']' : IDENTIFIER.test(key) ? '.' + key : "['" + escapeQuotes(key) + "']";
              }

              function escapeQuotes(str) {
                return str.replace(SINGLE_QUOTE, '\\$&').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\f/g, '\\f').replace(/\t/g, '\\t');
              }

              function varOccurences(str, dataVar) {
                dataVar += '[^0-9]';
                var matches = str.match(new RegExp(dataVar, 'g'));
                return matches ? matches.length : 0;
              }

              function varReplace(str, dataVar, expr) {
                dataVar += '([^0-9])';
                expr = expr.replace(/\$/g, '$$$$');
                return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
              }

              var EMPTY_ELSE = /else\s*{\s*}/g,
                  EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g,
                  EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
              function cleanUpCode(out) {
                return out.replace(EMPTY_ELSE, '').replace(EMPTY_IF_NO_ELSE, '').replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
              }

              var ERRORS_REGEXP = /[^v\.]errors/g,
                  REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,
                  REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g,
                  RETURN_VALID = 'return errors === 0;',
                  RETURN_TRUE = 'validate.errors = null; return true;',
                  RETURN_ASYNC = /if \(errors === 0\) return true;\s*else throw new ValidationError\(vErrors\);/,
                  RETURN_TRUE_ASYNC = 'return true;';

              function cleanUpVarErrors(out, async) {
                var matches = out.match(ERRORS_REGEXP);
                if (!matches || matches.length !== 2) return out;
                return async ? out.replace(REMOVE_ERRORS_ASYNC, '').replace(RETURN_ASYNC, RETURN_TRUE_ASYNC) : out.replace(REMOVE_ERRORS, '').replace(RETURN_VALID, RETURN_TRUE);
              }

              function schemaHasRules(schema, rules) {
                for (var key in schema) {
                  if (rules[key]) return true;
                }
              }

              function schemaHasRulesExcept(schema, rules, exceptKeyword) {
                for (var key in schema) {
                  if (key != exceptKeyword && rules[key]) return true;
                }
              }

              function toQuotedString(str) {
                return '\'' + escapeQuotes(str) + '\'';
              }

              function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
                var path = jsonPointers // false by default
                ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')') : isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'';
                return joinPaths(currentPath, path);
              }

              function getPath(currentPath, prop, jsonPointers) {
                var path = jsonPointers // false by default
                ? toQuotedString('/' + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
                return joinPaths(currentPath, path);
              }

              var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
              var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
              function getData($data, lvl, paths) {
                var up, jsonPointer, data, matches;
                if ($data === '') return 'rootData';
                if ($data[0] == '/') {
                  if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
                  jsonPointer = $data;
                  data = 'rootData';
                } else {
                  matches = $data.match(RELATIVE_JSON_POINTER);
                  if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
                  up = +matches[1];
                  jsonPointer = matches[2];
                  if (jsonPointer == '#') {
                    if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
                    return paths[lvl - up];
                  }

                  if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
                  data = 'data' + (lvl - up || '');
                  if (!jsonPointer) return data;
                }

                var expr = data;
                var segments = jsonPointer.split('/');
                for (var i = 0; i < segments.length; i++) {
                  var segment = segments[i];
                  if (segment) {
                    data += getProperty(unescapeJsonPointer(segment));
                    expr += ' && ' + data;
                  }
                }
                return expr;
              }

              function joinPaths(a, b) {
                if (a == '""') return b;
                return (a + ' + ' + b).replace(/' \+ '/g, '');
              }

              function unescapeFragment(str) {
                return unescapeJsonPointer(decodeURIComponent(str));
              }

              function escapeFragment(str) {
                return encodeURIComponent(escapeJsonPointer(str));
              }

              function escapeJsonPointer(str) {
                return str.replace(/~/g, '~0').replace(/\//g, '~1');
              }

              function unescapeJsonPointer(str) {
                return str.replace(/~1/g, '/').replace(/~0/g, '~');
              }
            }, { "./ucs2length": 10, "json-stable-stringify": 48 }], 12: [function (require, module, exports) {
              'use strict';

              module.exports = ValidationError;

              function ValidationError(errors) {
                this.message = 'validation failed';
                this.errors = errors;
                this.ajv = this.validation = true;
              }

              ValidationError.prototype = Object.create(Error.prototype);
              ValidationError.prototype.constructor = ValidationError;
            }, {}], 13: [function (require, module, exports) {
              'use strict';

              module.exports = function generate__formatLimit(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                out += 'var ' + $valid + ' = undefined;';
                if (it.opts.format === false) {
                  out += ' ' + $valid + ' = true; ';
                  return out;
                }
                var $schemaFormat = it.schema.format,
                    $isDataFormat = it.opts.v5 && $schemaFormat.$data,
                    $closingBraces = '';
                if ($isDataFormat) {
                  var $schemaValueFormat = it.util.getData($schemaFormat.$data, $dataLvl, it.dataPathArr),
                      $format = 'format' + $lvl,
                      $compare = 'compare' + $lvl;
                  out += ' var ' + $format + ' = formats[' + $schemaValueFormat + '] , ' + $compare + ' = ' + $format + ' && ' + $format + '.compare;';
                } else {
                  var $format = it.formats[$schemaFormat];
                  if (!($format && $format.compare)) {
                    out += '  ' + $valid + ' = true; ';
                    return out;
                  }
                  var $compare = 'formats' + it.util.getProperty($schemaFormat) + '.compare';
                }
                var $isMax = $keyword == 'formatMaximum',
                    $exclusiveKeyword = 'formatExclusive' + ($isMax ? 'Maximum' : 'Minimum'),
                    $schemaExcl = it.schema[$exclusiveKeyword],
                    $isDataExcl = it.opts.v5 && $schemaExcl && $schemaExcl.$data,
                    $op = $isMax ? '<' : '>',
                    $result = 'result' + $lvl;
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                if ($isDataExcl) {
                  var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
                      $exclusive = 'exclusive' + $lvl,
                      $opExpr = 'op' + $lvl,
                      $opStr = '\' + ' + $opExpr + ' + \'';
                  out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
                  $schemaValueExcl = 'schemaExcl' + $lvl;
                  out += ' if (typeof ' + $schemaValueExcl + ' != \'boolean\' && ' + $schemaValueExcl + ' !== undefined) { ' + $valid + ' = false; ';
                  var $errorKeyword = $exclusiveKeyword;
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || '_formatExclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'' + $exclusiveKeyword + ' should be boolean\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + __err + ']); ';
                    } else {
                      out += ' validate.errors = [' + __err + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                  out += ' }  ';
                  if ($breakOnError) {
                    $closingBraces += '}';
                    out += ' else { ';
                  }
                  if ($isData) {
                    out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'string\') ' + $valid + ' = false; else { ';
                    $closingBraces += '}';
                  }
                  if ($isDataFormat) {
                    out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';
                    $closingBraces += '}';
                  }
                  out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';
                  if ($isData) {
                    out += '' + $schemaValue;
                  } else {
                    out += '' + it.util.toQuotedString($schema);
                  }
                  out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; var ' + $exclusive + ' = ' + $schemaValueExcl + ' === true; if (' + $valid + ' === undefined) { ' + $valid + ' = ' + $exclusive + ' ? ' + $result + ' ' + $op + ' 0 : ' + $result + ' ' + $op + '= 0; } if (!' + $valid + ') var op' + $lvl + ' = ' + $exclusive + ' ? \'' + $op + '\' : \'' + $op + '=\';';
                } else {
                  var $exclusive = $schemaExcl === true,
                      $opStr = $op;
                  if (!$exclusive) $opStr += '=';
                  var $opExpr = '\'' + $opStr + '\'';
                  if ($isData) {
                    out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'string\') ' + $valid + ' = false; else { ';
                    $closingBraces += '}';
                  }
                  if ($isDataFormat) {
                    out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';
                    $closingBraces += '}';
                  }
                  out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';
                  if ($isData) {
                    out += '' + $schemaValue;
                  } else {
                    out += '' + it.util.toQuotedString($schema);
                  }
                  out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; if (' + $valid + ' === undefined) ' + $valid + ' = ' + $result + ' ' + $op;
                  if (!$exclusive) {
                    out += '=';
                  }
                  out += ' 0;';
                }
                out += '' + $closingBraces + 'if (!' + $valid + ') { ';
                var $errorKeyword = $keyword;
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || '_formatLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit:  ';
                  if ($isData) {
                    out += '' + $schemaValue;
                  } else {
                    out += '' + it.util.toQuotedString($schema);
                  }
                  out += ' , exclusive: ' + $exclusive + ' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should be ' + $opStr + ' "';
                    if ($isData) {
                      out += '\' + ' + $schemaValue + ' + \'';
                    } else {
                      out += '' + it.util.escapeQuotes($schema);
                    }
                    out += '"\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                      out += 'validate.schema' + $schemaPath;
                    } else {
                      out += '' + it.util.toQuotedString($schema);
                    }
                    out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += '}';
                return out;
              };
            }, {}], 14: [function (require, module, exports) {
              'use strict';

              module.exports = function generate__limit(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                var $isMax = $keyword == 'maximum',
                    $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
                    $schemaExcl = it.schema[$exclusiveKeyword],
                    $isDataExcl = it.opts.v5 && $schemaExcl && $schemaExcl.$data,
                    $op = $isMax ? '<' : '>',
                    $notOp = $isMax ? '>' : '<';
                if ($isDataExcl) {
                  var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
                      $exclusive = 'exclusive' + $lvl,
                      $opExpr = 'op' + $lvl,
                      $opStr = '\' + ' + $opExpr + ' + \'';
                  out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
                  $schemaValueExcl = 'schemaExcl' + $lvl;
                  out += ' var exclusive' + $lvl + '; if (typeof ' + $schemaValueExcl + ' != \'boolean\' && typeof ' + $schemaValueExcl + ' != \'undefined\') { ';
                  var $errorKeyword = $exclusiveKeyword;
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'' + $exclusiveKeyword + ' should be boolean\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + __err + ']); ';
                    } else {
                      out += ' validate.errors = [' + __err + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                  out += ' } else if( ';
                  if ($isData) {
                    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
                  }
                  out += ' ((exclusive' + $lvl + ' = ' + $schemaValueExcl + ' === true) ? ' + $data + ' ' + $notOp + '= ' + $schemaValue + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ') || ' + $data + ' !== ' + $data + ') { var op' + $lvl + ' = exclusive' + $lvl + ' ? \'' + $op + '\' : \'' + $op + '=\';';
                } else {
                  var $exclusive = $schemaExcl === true,
                      $opStr = $op;
                  if (!$exclusive) $opStr += '=';
                  var $opExpr = '\'' + $opStr + '\'';
                  out += ' if ( ';
                  if ($isData) {
                    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
                  }
                  out += ' ' + $data + ' ' + $notOp;
                  if ($exclusive) {
                    out += '=';
                  }
                  out += ' ' + $schemaValue + ' || ' + $data + ' !== ' + $data + ') {';
                }
                var $errorKeyword = $keyword;
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit: ' + $schemaValue + ', exclusive: ' + $exclusive + ' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should be ' + $opStr + ' ';
                    if ($isData) {
                      out += '\' + ' + $schemaValue;
                    } else {
                      out += '' + $schema + '\'';
                    }
                  }
                  if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                      out += 'validate.schema' + $schemaPath;
                    } else {
                      out += '' + $schema;
                    }
                    out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } ';
                if ($breakOnError) {
                  out += ' else { ';
                }
                return out;
              };
            }, {}], 15: [function (require, module, exports) {
              'use strict';

              module.exports = function generate__limitItems(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                var $op = $keyword == 'maxItems' ? '>' : '<';
                out += 'if ( ';
                if ($isData) {
                  out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
                }
                out += ' ' + $data + '.length ' + $op + ' ' + $schemaValue + ') { ';
                var $errorKeyword = $keyword;
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT have ';
                    if ($keyword == 'maxItems') {
                      out += 'more';
                    } else {
                      out += 'less';
                    }
                    out += ' than ';
                    if ($isData) {
                      out += '\' + ' + $schemaValue + ' + \'';
                    } else {
                      out += '' + $schema;
                    }
                    out += ' items\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                      out += 'validate.schema' + $schemaPath;
                    } else {
                      out += '' + $schema;
                    }
                    out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += '} ';
                if ($breakOnError) {
                  out += ' else { ';
                }
                return out;
              };
            }, {}], 16: [function (require, module, exports) {
              'use strict';

              module.exports = function generate__limitLength(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                var $op = $keyword == 'maxLength' ? '>' : '<';
                out += 'if ( ';
                if ($isData) {
                  out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
                }
                if (it.opts.unicode === false) {
                  out += ' ' + $data + '.length ';
                } else {
                  out += ' ucs2length(' + $data + ') ';
                }
                out += ' ' + $op + ' ' + $schemaValue + ') { ';
                var $errorKeyword = $keyword;
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT be ';
                    if ($keyword == 'maxLength') {
                      out += 'longer';
                    } else {
                      out += 'shorter';
                    }
                    out += ' than ';
                    if ($isData) {
                      out += '\' + ' + $schemaValue + ' + \'';
                    } else {
                      out += '' + $schema;
                    }
                    out += ' characters\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                      out += 'validate.schema' + $schemaPath;
                    } else {
                      out += '' + $schema;
                    }
                    out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += '} ';
                if ($breakOnError) {
                  out += ' else { ';
                }
                return out;
              };
            }, {}], 17: [function (require, module, exports) {
              'use strict';

              module.exports = function generate__limitProperties(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                var $op = $keyword == 'maxProperties' ? '>' : '<';
                out += 'if ( ';
                if ($isData) {
                  out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
                }
                out += ' Object.keys(' + $data + ').length ' + $op + ' ' + $schemaValue + ') { ';
                var $errorKeyword = $keyword;
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT have ';
                    if ($keyword == 'maxProperties') {
                      out += 'more';
                    } else {
                      out += 'less';
                    }
                    out += ' than ';
                    if ($isData) {
                      out += '\' + ' + $schemaValue + ' + \'';
                    } else {
                      out += '' + $schema;
                    }
                    out += ' properties\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                      out += 'validate.schema' + $schemaPath;
                    } else {
                      out += '' + $schema;
                    }
                    out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += '} ';
                if ($breakOnError) {
                  out += ' else { ';
                }
                return out;
              };
            }, {}], 18: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_allOf(it, $keyword) {
                var out = ' ';
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $it = it.util.copy(it);
                var $closingBraces = '';
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                var $currentBaseId = $it.baseId,
                    $allSchemasEmpty = true;
                var arr1 = $schema;
                if (arr1) {
                  var $sch,
                      $i = -1,
                      l1 = arr1.length - 1;
                  while ($i < l1) {
                    $sch = arr1[$i += 1];
                    if (it.util.schemaHasRules($sch, it.RULES.all)) {
                      $allSchemasEmpty = false;
                      $it.schema = $sch;
                      $it.schemaPath = $schemaPath + '[' + $i + ']';
                      $it.errSchemaPath = $errSchemaPath + '/' + $i;
                      out += '  ' + it.validate($it) + ' ';
                      $it.baseId = $currentBaseId;
                      if ($breakOnError) {
                        out += ' if (' + $nextValid + ') { ';
                        $closingBraces += '}';
                      }
                    }
                  }
                }
                if ($breakOnError) {
                  if ($allSchemasEmpty) {
                    out += ' if (true) { ';
                  } else {
                    out += ' ' + $closingBraces.slice(0, -1) + ' ';
                  }
                }
                out = it.util.cleanUpCode(out);
                return out;
              };
            }, {}], 19: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_anyOf(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $errs = 'errs__' + $lvl;
                var $it = it.util.copy(it);
                var $closingBraces = '';
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                var $noEmptySchema = $schema.every(function ($sch) {
                  return it.util.schemaHasRules($sch, it.RULES.all);
                });
                if ($noEmptySchema) {
                  var $currentBaseId = $it.baseId;
                  out += ' var ' + $errs + ' = errors; var ' + $valid + ' = false;  ';
                  var $wasComposite = it.compositeRule;
                  it.compositeRule = $it.compositeRule = true;
                  var arr1 = $schema;
                  if (arr1) {
                    var $sch,
                        $i = -1,
                        l1 = arr1.length - 1;
                    while ($i < l1) {
                      $sch = arr1[$i += 1];
                      $it.schema = $sch;
                      $it.schemaPath = $schemaPath + '[' + $i + ']';
                      $it.errSchemaPath = $errSchemaPath + '/' + $i;
                      out += '  ' + it.validate($it) + ' ';
                      $it.baseId = $currentBaseId;
                      out += ' ' + $valid + ' = ' + $valid + ' || ' + $nextValid + '; if (!' + $valid + ') { ';
                      $closingBraces += '}';
                    }
                  }
                  it.compositeRule = $it.compositeRule = $wasComposite;
                  out += ' ' + $closingBraces + ' if (!' + $valid + ') {  var err =   '; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'anyOf') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'should match some schema in anyOf\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';
                  if (it.opts.allErrors) {
                    out += ' } ';
                  }
                  out = it.util.cleanUpCode(out);
                } else {
                  if ($breakOnError) {
                    out += ' if (true) { ';
                  }
                }
                return out;
              };
            }, {}], 20: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_constant(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                if (!$isData) {
                  out += ' var schema' + $lvl + ' = validate.schema' + $schemaPath + ';';
                }
                out += 'var ' + $valid + ' = equal(' + $data + ', schema' + $lvl + '); if (!' + $valid + ') {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || 'constant') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should be equal to constant\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' }';
                return out;
              };
            }, {}], 21: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_custom(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $errs = 'errs__' + $lvl;
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                var $rule = this,
                    $definition = 'definition' + $lvl,
                    $rDef = $rule.definition,
                    $validate = $rDef.validate,
                    $compile,
                    $inline,
                    $macro,
                    $ruleValidate,
                    $validateCode;
                if ($isData && $rDef.$data) {
                  $validateCode = 'keywordValidate' + $lvl;
                  var $validateSchema = $rDef.validateSchema;
                  out += ' var ' + $definition + ' = RULES.custom[\'' + $keyword + '\'].definition; var ' + $validateCode + ' = ' + $definition + '.validate;';
                } else {
                  $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
                  $schemaValue = 'validate.schema' + $schemaPath;
                  $validateCode = $ruleValidate.code;
                  $compile = $rDef.compile;
                  $inline = $rDef.inline;
                  $macro = $rDef.macro;
                }
                var $ruleErrs = $validateCode + '.errors',
                    $i = 'i' + $lvl,
                    $ruleErr = 'ruleErr' + $lvl,
                    $asyncKeyword = $rDef.async;
                if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
                if (!($inline || $macro)) {
                  out += '' + $ruleErrs + ' = null;';
                }
                out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
                if ($validateSchema) {
                  out += ' ' + $valid + ' = ' + $definition + '.validateSchema(' + $schemaValue + '); if (' + $valid + ') {';
                }
                if ($inline) {
                  if ($rDef.statements) {
                    out += ' ' + $ruleValidate.validate + ' ';
                  } else {
                    out += ' ' + $valid + ' = ' + $ruleValidate.validate + '; ';
                  }
                } else if ($macro) {
                  var $it = it.util.copy(it);
                  $it.level++;
                  var $nextValid = 'valid' + $it.level;
                  $it.schema = $ruleValidate.validate;
                  $it.schemaPath = '';
                  var $wasComposite = it.compositeRule;
                  it.compositeRule = $it.compositeRule = true;
                  var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
                  it.compositeRule = $it.compositeRule = $wasComposite;
                  out += ' ' + $code;
                } else {
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = '';
                  out += '  ' + $validateCode + '.call( ';
                  if (it.opts.passContext) {
                    out += 'this';
                  } else {
                    out += 'self';
                  }
                  if ($compile || $rDef.schema === false) {
                    out += ' , ' + $data + ' ';
                  } else {
                    out += ' , ' + $schemaValue + ' , ' + $data + ' , validate.schema' + it.schemaPath + ' ';
                  }
                  out += ' , (dataPath || \'\')';
                  if (it.errorPath != '""') {
                    out += ' + ' + it.errorPath;
                  }
                  var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
                      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
                  out += ' , ' + $parentData + ' , ' + $parentDataProperty + ' , rootData )  ';
                  var def_callRuleValidate = out;
                  out = $$outStack.pop();
                  if ($rDef.errors === false) {
                    out += ' ' + $valid + ' = ';
                    if ($asyncKeyword) {
                      out += '' + it.yieldAwait;
                    }
                    out += '' + def_callRuleValidate + '; ';
                  } else {
                    if ($asyncKeyword) {
                      $ruleErrs = 'customErrors' + $lvl;
                      out += ' var ' + $ruleErrs + ' = null; try { ' + $valid + ' = ' + it.yieldAwait + def_callRuleValidate + '; } catch (e) { ' + $valid + ' = false; if (e instanceof ValidationError) ' + $ruleErrs + ' = e.errors; else throw e; } ';
                    } else {
                      out += ' ' + $ruleErrs + ' = null; ' + $valid + ' = ' + def_callRuleValidate + '; ';
                    }
                  }
                }
                if ($rDef.modifying) {
                  out += ' ' + $data + ' = ' + $parentData + '[' + $parentDataProperty + '];';
                }
                if ($validateSchema) {
                  out += ' }';
                }
                if ($rDef.valid) {
                  if ($breakOnError) {
                    out += ' if (true) { ';
                  }
                } else {
                  out += ' if ( ';
                  if ($rDef.valid === undefined) {
                    out += ' !';
                    if ($macro) {
                      out += '' + $nextValid;
                    } else {
                      out += '' + $valid;
                    }
                  } else {
                    out += ' ' + !$rDef.valid + ' ';
                  }
                  out += ') { ';
                  $errorKeyword = $rule.keyword;
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = '';
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + __err + ']); ';
                    } else {
                      out += ' validate.errors = [' + __err + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                  var def_customError = out;
                  out = $$outStack.pop();
                  if ($inline) {
                    if ($rDef.errors) {
                      if ($rDef.errors != 'full') {
                        out += '  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
                        if (it.opts.verbose) {
                          out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
                        }
                        out += ' } ';
                      }
                    } else {
                      if ($rDef.errors === false) {
                        out += ' ' + def_customError + ' ';
                      } else {
                        out += ' if (' + $errs + ' == errors) { ' + def_customError + ' } else {  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
                        if (it.opts.verbose) {
                          out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
                        }
                        out += ' } } ';
                      }
                    }
                  } else if ($macro) {
                    out += '   var err =   '; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError(vErrors); ';
                      } else {
                        out += ' validate.errors = vErrors; return false; ';
                      }
                    }
                  } else {
                    if ($rDef.errors === false) {
                      out += ' ' + def_customError + ' ';
                    } else {
                      out += ' if (Array.isArray(' + $ruleErrs + ')) { if (vErrors === null) vErrors = ' + $ruleErrs + '; else vErrors = vErrors.concat(' + $ruleErrs + '); errors = vErrors.length;  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + ';  ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '";  ';
                      if (it.opts.verbose) {
                        out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
                      }
                      out += ' } } else { ' + def_customError + ' } ';
                    }
                  }
                  out += ' } ';
                  if ($breakOnError) {
                    out += ' else { ';
                  }
                }
                return out;
              };
            }, {}], 22: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_dependencies(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $errs = 'errs__' + $lvl;
                var $it = it.util.copy(it);
                var $closingBraces = '';
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                var $schemaDeps = {},
                    $propertyDeps = {};
                for ($property in $schema) {
                  var $sch = $schema[$property];
                  var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
                  $deps[$property] = $sch;
                }
                out += 'var ' + $errs + ' = errors;';
                var $currentErrorPath = it.errorPath;
                out += 'var missing' + $lvl + ';';
                for (var $property in $propertyDeps) {
                  $deps = $propertyDeps[$property];
                  out += ' if (' + $data + it.util.getProperty($property) + ' !== undefined ';
                  if ($breakOnError) {
                    out += ' && ( ';
                    var arr1 = $deps;
                    if (arr1) {
                      var _$property,
                          $i = -1,
                          l1 = arr1.length - 1;
                      while ($i < l1) {
                        _$property = arr1[$i += 1];
                        if ($i) {
                          out += ' || ';
                        }
                        var $prop = it.util.getProperty(_$property);
                        out += ' ( ' + $data + $prop + ' === undefined && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? _$property : $prop) + ') ) ';
                      }
                    }
                    out += ')) {  ';
                    var $propertyPath = 'missing' + $lvl,
                        $missingProperty = '\' + ' + $propertyPath + ' + \'';
                    if (it.opts._errorDataPathProperty) {
                      it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
                    }
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ($errorKeyword || 'dependencies') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'should have ';
                        if ($deps.length == 1) {
                          out += 'property ' + it.util.escapeQuotes($deps[0]);
                        } else {
                          out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
                        }
                        out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError([' + __err + ']); ';
                      } else {
                        out += ' validate.errors = [' + __err + ']; return false; ';
                      }
                    } else {
                      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                  } else {
                    out += ' ) { ';
                    var arr2 = $deps;
                    if (arr2) {
                      var $reqProperty,
                          i2 = -1,
                          l2 = arr2.length - 1;
                      while (i2 < l2) {
                        $reqProperty = arr2[i2 += 1];
                        var $prop = it.util.getProperty($reqProperty),
                            $missingProperty = it.util.escapeQuotes($reqProperty);
                        if (it.opts._errorDataPathProperty) {
                          it.errorPath = it.util.getPath($currentErrorPath, $reqProperty, it.opts.jsonPointers);
                        }
                        out += ' if (' + $data + $prop + ' === undefined) {  var err =   '; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                          out += ' { keyword: \'' + ($errorKeyword || 'dependencies') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';
                          if (it.opts.messages !== false) {
                            out += ' , message: \'should have ';
                            if ($deps.length == 1) {
                              out += 'property ' + it.util.escapeQuotes($deps[0]);
                            } else {
                              out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
                            }
                            out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
                          }
                          if (it.opts.verbose) {
                            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                          }
                          out += ' } ';
                        } else {
                          out += ' {} ';
                        }
                        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
                      }
                    }
                  }
                  out += ' }   ';
                  if ($breakOnError) {
                    $closingBraces += '}';
                    out += ' else { ';
                  }
                }
                it.errorPath = $currentErrorPath;
                var $currentBaseId = $it.baseId;
                for (var $property in $schemaDeps) {
                  var $sch = $schemaDeps[$property];
                  if (it.util.schemaHasRules($sch, it.RULES.all)) {
                    out += ' ' + $nextValid + ' = true; if (' + $data + '[\'' + $property + '\'] !== undefined) { ';
                    $it.schema = $sch;
                    $it.schemaPath = $schemaPath + it.util.getProperty($property);
                    $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
                    out += '  ' + it.validate($it) + ' ';
                    $it.baseId = $currentBaseId;
                    out += ' }  ';
                    if ($breakOnError) {
                      out += ' if (' + $nextValid + ') { ';
                      $closingBraces += '}';
                    }
                  }
                }
                if ($breakOnError) {
                  out += '   ' + $closingBraces + ' if (' + $errs + ' == errors) {';
                }
                out = it.util.cleanUpCode(out);
                return out;
              };
            }, {}], 23: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_enum(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                var $i = 'i' + $lvl,
                    $vSchema = 'schema' + $lvl;
                if (!$isData) {
                  out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + ';';
                }
                out += 'var ' + $valid + ';';
                if ($isData) {
                  out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
                }
                out += '' + $valid + ' = false;for (var ' + $i + '=0; ' + $i + '<' + $vSchema + '.length; ' + $i + '++) if (equal(' + $data + ', ' + $vSchema + '[' + $i + '])) { ' + $valid + ' = true; break; }';
                if ($isData) {
                  out += '  }  ';
                }
                out += ' if (!' + $valid + ') {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || 'enum') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValues: schema' + $lvl + ' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should be equal to one of the allowed values\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' }';
                if ($breakOnError) {
                  out += ' else { ';
                }
                return out;
              };
            }, {}], 24: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_format(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                if (it.opts.format === false) {
                  if ($breakOnError) {
                    out += ' if (true) { ';
                  }
                  return out;
                }
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                var $unknownFormats = it.opts.unknownFormats,
                    $allowUnknown = Array.isArray($unknownFormats);
                if ($isData) {
                  var $format = 'format' + $lvl;
                  out += ' var ' + $format + ' = formats[' + $schemaValue + ']; var isObject' + $lvl + ' = typeof ' + $format + ' == \'object\' && !(' + $format + ' instanceof RegExp) && ' + $format + '.validate; if (isObject' + $lvl + ') { ';
                  if (it.async) {
                    out += ' var async' + $lvl + ' = ' + $format + '.async; ';
                  }
                  out += ' ' + $format + ' = ' + $format + '.validate; } if (  ';
                  if ($isData) {
                    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
                  }
                  out += ' (';
                  if ($unknownFormats === true || $allowUnknown) {
                    out += ' (' + $schemaValue + ' && !' + $format + ' ';
                    if ($allowUnknown) {
                      out += ' && self._opts.unknownFormats.indexOf(' + $schemaValue + ') == -1 ';
                    }
                    out += ') || ';
                  }
                  out += ' (' + $format + ' && !(typeof ' + $format + ' == \'function\' ? ';
                  if (it.async) {
                    out += ' (async' + $lvl + ' ? ' + it.yieldAwait + ' ' + $format + '(' + $data + ') : ' + $format + '(' + $data + ')) ';
                  } else {
                    out += ' ' + $format + '(' + $data + ') ';
                  }
                  out += ' : ' + $format + '.test(' + $data + '))))) {';
                } else {
                  var $format = it.formats[$schema];
                  if (!$format) {
                    if ($unknownFormats === true || $allowUnknown && $unknownFormats.indexOf($schema) == -1) {
                      throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
                    } else {
                      if (!$allowUnknown) {
                        console.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
                        if ($unknownFormats !== 'ignore') console.warn('In the next major version it will throw exception. See option unknownFormats for more information');
                      }
                      if ($breakOnError) {
                        out += ' if (true) { ';
                      }
                      return out;
                    }
                  }
                  var $isObject = (typeof $format === 'undefined' ? 'undefined' : _typeof3($format)) == 'object' && !($format instanceof RegExp) && $format.validate;
                  if ($isObject) {
                    var $async = $format.async === true;
                    $format = $format.validate;
                  }
                  if ($async) {
                    if (!it.async) throw new Error('async format in sync schema');
                    var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
                    out += ' if (!(' + it.yieldAwait + ' ' + $formatRef + '(' + $data + '))) { ';
                  } else {
                    out += ' if (! ';
                    var $formatRef = 'formats' + it.util.getProperty($schema);
                    if ($isObject) $formatRef += '.validate';
                    if (typeof $format == 'function') {
                      out += ' ' + $formatRef + '(' + $data + ') ';
                    } else {
                      out += ' ' + $formatRef + '.test(' + $data + ') ';
                    }
                    out += ') { ';
                  }
                }
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || 'format') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { format:  ';
                  if ($isData) {
                    out += '' + $schemaValue;
                  } else {
                    out += '' + it.util.toQuotedString($schema);
                  }
                  out += '  } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should match format "';
                    if ($isData) {
                      out += '\' + ' + $schemaValue + ' + \'';
                    } else {
                      out += '' + it.util.escapeQuotes($schema);
                    }
                    out += '"\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                      out += 'validate.schema' + $schemaPath;
                    } else {
                      out += '' + it.util.toQuotedString($schema);
                    }
                    out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } ';
                if ($breakOnError) {
                  out += ' else { ';
                }
                return out;
              };
            }, {}], 25: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_items(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $errs = 'errs__' + $lvl;
                var $it = it.util.copy(it);
                var $closingBraces = '';
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                var $idx = 'i' + $lvl,
                    $dataNxt = $it.dataLevel = it.dataLevel + 1,
                    $nextData = 'data' + $dataNxt,
                    $currentBaseId = it.baseId;
                out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
                if (Array.isArray($schema)) {
                  var $additionalItems = it.schema.additionalItems;
                  if ($additionalItems === false) {
                    out += ' ' + $valid + ' = ' + $data + '.length <= ' + $schema.length + '; ';
                    var $currErrSchemaPath = $errSchemaPath;
                    $errSchemaPath = it.errSchemaPath + '/additionalItems';
                    out += '  if (!' + $valid + ') {   ';
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ($errorKeyword || 'additionalItems') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schema.length + ' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'should NOT have more than ' + $schema.length + ' items\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError([' + __err + ']); ';
                      } else {
                        out += ' validate.errors = [' + __err + ']; return false; ';
                      }
                    } else {
                      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                    out += ' } ';
                    $errSchemaPath = $currErrSchemaPath;
                    if ($breakOnError) {
                      $closingBraces += '}';
                      out += ' else { ';
                    }
                  }
                  var arr1 = $schema;
                  if (arr1) {
                    var $sch,
                        $i = -1,
                        l1 = arr1.length - 1;
                    while ($i < l1) {
                      $sch = arr1[$i += 1];
                      if (it.util.schemaHasRules($sch, it.RULES.all)) {
                        out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $i + ') { ';
                        var $passData = $data + '[' + $i + ']';
                        $it.schema = $sch;
                        $it.schemaPath = $schemaPath + '[' + $i + ']';
                        $it.errSchemaPath = $errSchemaPath + '/' + $i;
                        $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
                        $it.dataPathArr[$dataNxt] = $i;
                        var $code = it.validate($it);
                        $it.baseId = $currentBaseId;
                        if (it.util.varOccurences($code, $nextData) < 2) {
                          out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
                        } else {
                          out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
                        }
                        out += ' }  ';
                        if ($breakOnError) {
                          out += ' if (' + $nextValid + ') { ';
                          $closingBraces += '}';
                        }
                      }
                    }
                  }
                  if ((typeof $additionalItems === 'undefined' ? 'undefined' : _typeof3($additionalItems)) == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {
                    $it.schema = $additionalItems;
                    $it.schemaPath = it.schemaPath + '.additionalItems';
                    $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
                    out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $schema.length + ') {  for (var ' + $idx + ' = ' + $schema.length + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
                    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
                    var $passData = $data + '[' + $idx + ']';
                    $it.dataPathArr[$dataNxt] = $idx;
                    var $code = it.validate($it);
                    $it.baseId = $currentBaseId;
                    if (it.util.varOccurences($code, $nextData) < 2) {
                      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
                    } else {
                      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
                    }
                    if ($breakOnError) {
                      out += ' if (!' + $nextValid + ') break; ';
                    }
                    out += ' } }  ';
                    if ($breakOnError) {
                      out += ' if (' + $nextValid + ') { ';
                      $closingBraces += '}';
                    }
                  }
                } else if (it.util.schemaHasRules($schema, it.RULES.all)) {
                  $it.schema = $schema;
                  $it.schemaPath = $schemaPath;
                  $it.errSchemaPath = $errSchemaPath;
                  out += '  for (var ' + $idx + ' = ' + 0 + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
                  $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
                  var $passData = $data + '[' + $idx + ']';
                  $it.dataPathArr[$dataNxt] = $idx;
                  var $code = it.validate($it);
                  $it.baseId = $currentBaseId;
                  if (it.util.varOccurences($code, $nextData) < 2) {
                    out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
                  } else {
                    out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
                  }
                  if ($breakOnError) {
                    out += ' if (!' + $nextValid + ') break; ';
                  }
                  out += ' }  ';
                  if ($breakOnError) {
                    out += ' if (' + $nextValid + ') { ';
                    $closingBraces += '}';
                  }
                }
                if ($breakOnError) {
                  out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
                }
                out = it.util.cleanUpCode(out);
                return out;
              };
            }, {}], 26: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_multipleOf(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                out += 'var division' + $lvl + ';if (';
                if ($isData) {
                  out += ' ' + $schemaValue + ' !== undefined && ( typeof ' + $schemaValue + ' != \'number\' || ';
                }
                out += ' (division' + $lvl + ' = ' + $data + ' / ' + $schemaValue + ', ';
                if (it.opts.multipleOfPrecision) {
                  out += ' Math.abs(Math.round(division' + $lvl + ') - division' + $lvl + ') > 1e-' + it.opts.multipleOfPrecision + ' ';
                } else {
                  out += ' division' + $lvl + ' !== parseInt(division' + $lvl + ') ';
                }
                out += ' ) ';
                if ($isData) {
                  out += '  )  ';
                }
                out += ' ) {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || 'multipleOf') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { multipleOf: ' + $schemaValue + ' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should be multiple of ';
                    if ($isData) {
                      out += '\' + ' + $schemaValue;
                    } else {
                      out += '' + $schema + '\'';
                    }
                  }
                  if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                      out += 'validate.schema' + $schemaPath;
                    } else {
                      out += '' + $schema;
                    }
                    out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += '} ';
                if ($breakOnError) {
                  out += ' else { ';
                }
                return out;
              };
            }, {}], 27: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_not(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $errs = 'errs__' + $lvl;
                var $it = it.util.copy(it);
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                if (it.util.schemaHasRules($schema, it.RULES.all)) {
                  $it.schema = $schema;
                  $it.schemaPath = $schemaPath;
                  $it.errSchemaPath = $errSchemaPath;
                  out += ' var ' + $errs + ' = errors;  ';
                  var $wasComposite = it.compositeRule;
                  it.compositeRule = $it.compositeRule = true;
                  $it.createErrors = false;
                  var $allErrorsOption;
                  if ($it.opts.allErrors) {
                    $allErrorsOption = $it.opts.allErrors;
                    $it.opts.allErrors = false;
                  }
                  out += ' ' + it.validate($it) + ' ';
                  $it.createErrors = true;
                  if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
                  it.compositeRule = $it.compositeRule = $wasComposite;
                  out += ' if (' + $nextValid + ') {   ';
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'not') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'should NOT be valid\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + __err + ']); ';
                    } else {
                      out += ' validate.errors = [' + __err + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                  out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';
                  if (it.opts.allErrors) {
                    out += ' } ';
                  }
                } else {
                  out += '  var err =   '; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'not') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'should NOT be valid\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  if ($breakOnError) {
                    out += ' if (false) { ';
                  }
                }
                return out;
              };
            }, {}], 28: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_oneOf(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $errs = 'errs__' + $lvl;
                var $it = it.util.copy(it);
                var $closingBraces = '';
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                out += 'var ' + $errs + ' = errors;var prevValid' + $lvl + ' = false;var ' + $valid + ' = false;';
                var $currentBaseId = $it.baseId;
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                var arr1 = $schema;
                if (arr1) {
                  var $sch,
                      $i = -1,
                      l1 = arr1.length - 1;
                  while ($i < l1) {
                    $sch = arr1[$i += 1];
                    if (it.util.schemaHasRules($sch, it.RULES.all)) {
                      $it.schema = $sch;
                      $it.schemaPath = $schemaPath + '[' + $i + ']';
                      $it.errSchemaPath = $errSchemaPath + '/' + $i;
                      out += '  ' + it.validate($it) + ' ';
                      $it.baseId = $currentBaseId;
                    } else {
                      out += ' var ' + $nextValid + ' = true; ';
                    }
                    if ($i) {
                      out += ' if (' + $nextValid + ' && prevValid' + $lvl + ') ' + $valid + ' = false; else { ';
                      $closingBraces += '}';
                    }
                    out += ' if (' + $nextValid + ') ' + $valid + ' = prevValid' + $lvl + ' = true;';
                  }
                }
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += '' + $closingBraces + 'if (!' + $valid + ') {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || 'oneOf') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should match exactly one schema in oneOf\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += '} else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }';
                if (it.opts.allErrors) {
                  out += ' } ';
                }
                return out;
              };
            }, {}], 29: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_pattern(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
                out += 'if ( ';
                if ($isData) {
                  out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
                }
                out += ' !' + $regexp + '.test(' + $data + ') ) {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || 'pattern') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { pattern:  ';
                  if ($isData) {
                    out += '' + $schemaValue;
                  } else {
                    out += '' + it.util.toQuotedString($schema);
                  }
                  out += '  } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should match pattern "';
                    if ($isData) {
                      out += '\' + ' + $schemaValue + ' + \'';
                    } else {
                      out += '' + it.util.escapeQuotes($schema);
                    }
                    out += '"\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                      out += 'validate.schema' + $schemaPath;
                    } else {
                      out += '' + it.util.toQuotedString($schema);
                    }
                    out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + __err + ']); ';
                  } else {
                    out += ' validate.errors = [' + __err + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += '} ';
                if ($breakOnError) {
                  out += ' else { ';
                }
                return out;
              };
            }, {}], 30: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_patternRequired(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $key = 'key' + $lvl,
                    $matched = 'patternMatched' + $lvl,
                    $closingBraces = '',
                    $ownProperties = it.opts.ownProperties;
                out += 'var ' + $valid + ' = true;';
                var arr1 = $schema;
                if (arr1) {
                  var $pProperty,
                      i1 = -1,
                      l1 = arr1.length - 1;
                  while (i1 < l1) {
                    $pProperty = arr1[i1 += 1];
                    out += ' var ' + $matched + ' = false; for (var ' + $key + ' in ' + $data + ') {  ';
                    if ($ownProperties) {
                      out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';
                    }
                    out += ' ' + $matched + ' = ' + it.usePattern($pProperty) + '.test(' + $key + '); if (' + $matched + ') break; } ';
                    var $missingPattern = it.util.escapeQuotes($pProperty);
                    out += ' if (!' + $matched + ') { ' + $valid + ' = false;  var err =   '; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ($errorKeyword || 'patternRequired') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingPattern: \'' + $missingPattern + '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'should have property matching pattern \\\'' + $missingPattern + '\\\'\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; }   ';
                    if ($breakOnError) {
                      $closingBraces += '}';
                      out += ' else { ';
                    }
                  }
                }
                out += '' + $closingBraces;
                return out;
              };
            }, {}], 31: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_properties(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $errs = 'errs__' + $lvl;
                var $it = it.util.copy(it);
                var $closingBraces = '';
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                var $key = 'key' + $lvl,
                    $dataNxt = $it.dataLevel = it.dataLevel + 1,
                    $nextData = 'data' + $dataNxt;
                var $schemaKeys = Object.keys($schema || {}),
                    $pProperties = it.schema.patternProperties || {},
                    $pPropertyKeys = Object.keys($pProperties),
                    $aProperties = it.schema.additionalProperties,
                    $someProperties = $schemaKeys.length || $pPropertyKeys.length,
                    $noAdditional = $aProperties === false,
                    $additionalIsSchema = (typeof $aProperties === 'undefined' ? 'undefined' : _typeof3($aProperties)) == 'object' && Object.keys($aProperties).length,
                    $removeAdditional = it.opts.removeAdditional,
                    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
                    $ownProperties = it.opts.ownProperties,
                    $currentBaseId = it.baseId;
                var $required = it.schema.required;
                if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);
                if (it.opts.v5) {
                  var $pgProperties = it.schema.patternGroups || {},
                      $pgPropertyKeys = Object.keys($pgProperties);
                }
                out += 'var ' + $errs + ' = errors;var ' + $nextValid + ' = true;';
                if ($checkAdditional) {
                  out += ' for (var ' + $key + ' in ' + $data + ') {  ';
                  if ($ownProperties) {
                    out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';
                  }
                  if ($someProperties) {
                    out += ' var isAdditional' + $lvl + ' = !(false ';
                    if ($schemaKeys.length) {
                      if ($schemaKeys.length > 5) {
                        out += ' || validate.schema' + $schemaPath + '[' + $key + '] ';
                      } else {
                        var arr1 = $schemaKeys;
                        if (arr1) {
                          var $propertyKey,
                              i1 = -1,
                              l1 = arr1.length - 1;
                          while (i1 < l1) {
                            $propertyKey = arr1[i1 += 1];
                            out += ' || ' + $key + ' == ' + it.util.toQuotedString($propertyKey) + ' ';
                          }
                        }
                      }
                    }
                    if ($pPropertyKeys.length) {
                      var arr2 = $pPropertyKeys;
                      if (arr2) {
                        var $pProperty,
                            $i = -1,
                            l2 = arr2.length - 1;
                        while ($i < l2) {
                          $pProperty = arr2[$i += 1];
                          out += ' || ' + it.usePattern($pProperty) + '.test(' + $key + ') ';
                        }
                      }
                    }
                    if (it.opts.v5 && $pgPropertyKeys && $pgPropertyKeys.length) {
                      var arr3 = $pgPropertyKeys;
                      if (arr3) {
                        var $pgProperty,
                            $i = -1,
                            l3 = arr3.length - 1;
                        while ($i < l3) {
                          $pgProperty = arr3[$i += 1];
                          out += ' || ' + it.usePattern($pgProperty) + '.test(' + $key + ') ';
                        }
                      }
                    }
                    out += ' ); if (isAdditional' + $lvl + ') { ';
                  }
                  if ($removeAdditional == 'all') {
                    out += ' delete ' + $data + '[' + $key + ']; ';
                  } else {
                    var $currentErrorPath = it.errorPath;
                    var $additionalProperty = '\' + ' + $key + ' + \'';
                    if (it.opts._errorDataPathProperty) {
                      it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                    }
                    if ($noAdditional) {
                      if ($removeAdditional) {
                        out += ' delete ' + $data + '[' + $key + ']; ';
                      } else {
                        out += ' ' + $nextValid + ' = false; ';
                        var $currErrSchemaPath = $errSchemaPath;
                        $errSchemaPath = it.errSchemaPath + '/additionalProperties';
                        var $$outStack = $$outStack || [];
                        $$outStack.push(out);
                        out = ''; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                          out += ' { keyword: \'' + ($errorKeyword || 'additionalProperties') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { additionalProperty: \'' + $additionalProperty + '\' } ';
                          if (it.opts.messages !== false) {
                            out += ' , message: \'should NOT have additional properties\' ';
                          }
                          if (it.opts.verbose) {
                            out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                          }
                          out += ' } ';
                        } else {
                          out += ' {} ';
                        }
                        var __err = out;
                        out = $$outStack.pop();
                        if (!it.compositeRule && $breakOnError) {
                          /* istanbul ignore if */
                          if (it.async) {
                            out += ' throw new ValidationError([' + __err + ']); ';
                          } else {
                            out += ' validate.errors = [' + __err + ']; return false; ';
                          }
                        } else {
                          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                        }
                        $errSchemaPath = $currErrSchemaPath;
                        if ($breakOnError) {
                          out += ' break; ';
                        }
                      }
                    } else if ($additionalIsSchema) {
                      if ($removeAdditional == 'failing') {
                        out += ' var ' + $errs + ' = errors;  ';
                        var $wasComposite = it.compositeRule;
                        it.compositeRule = $it.compositeRule = true;
                        $it.schema = $aProperties;
                        $it.schemaPath = it.schemaPath + '.additionalProperties';
                        $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
                        $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                        var $passData = $data + '[' + $key + ']';
                        $it.dataPathArr[$dataNxt] = $key;
                        var $code = it.validate($it);
                        $it.baseId = $currentBaseId;
                        if (it.util.varOccurences($code, $nextData) < 2) {
                          out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
                        } else {
                          out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
                        }
                        out += ' if (!' + $nextValid + ') { errors = ' + $errs + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + $data + '[' + $key + ']; }  ';
                        it.compositeRule = $it.compositeRule = $wasComposite;
                      } else {
                        $it.schema = $aProperties;
                        $it.schemaPath = it.schemaPath + '.additionalProperties';
                        $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
                        $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                        var $passData = $data + '[' + $key + ']';
                        $it.dataPathArr[$dataNxt] = $key;
                        var $code = it.validate($it);
                        $it.baseId = $currentBaseId;
                        if (it.util.varOccurences($code, $nextData) < 2) {
                          out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
                        } else {
                          out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
                        }
                        if ($breakOnError) {
                          out += ' if (!' + $nextValid + ') break; ';
                        }
                      }
                    }
                    it.errorPath = $currentErrorPath;
                  }
                  if ($someProperties) {
                    out += ' } ';
                  }
                  out += ' }  ';
                  if ($breakOnError) {
                    out += ' if (' + $nextValid + ') { ';
                    $closingBraces += '}';
                  }
                }
                var $useDefaults = it.opts.useDefaults && !it.compositeRule;
                if ($schemaKeys.length) {
                  var arr4 = $schemaKeys;
                  if (arr4) {
                    var $propertyKey,
                        i4 = -1,
                        l4 = arr4.length - 1;
                    while (i4 < l4) {
                      $propertyKey = arr4[i4 += 1];
                      var $sch = $schema[$propertyKey];
                      if (it.util.schemaHasRules($sch, it.RULES.all)) {
                        var $prop = it.util.getProperty($propertyKey),
                            $passData = $data + $prop,
                            $hasDefault = $useDefaults && $sch.default !== undefined;
                        $it.schema = $sch;
                        $it.schemaPath = $schemaPath + $prop;
                        $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
                        $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
                        $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
                        var $code = it.validate($it);
                        $it.baseId = $currentBaseId;
                        if (it.util.varOccurences($code, $nextData) < 2) {
                          $code = it.util.varReplace($code, $nextData, $passData);
                          var $useData = $passData;
                        } else {
                          var $useData = $nextData;
                          out += ' var ' + $nextData + ' = ' + $passData + '; ';
                        }
                        if ($hasDefault) {
                          out += ' ' + $code + ' ';
                        } else {
                          if ($requiredHash && $requiredHash[$propertyKey]) {
                            out += ' if (' + $useData + ' === undefined) { ' + $nextValid + ' = false; ';
                            var $currentErrorPath = it.errorPath,
                                $currErrSchemaPath = $errSchemaPath,
                                $missingProperty = it.util.escapeQuotes($propertyKey);
                            if (it.opts._errorDataPathProperty) {
                              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                            }
                            $errSchemaPath = it.errSchemaPath + '/required';
                            var $$outStack = $$outStack || [];
                            $$outStack.push(out);
                            out = ''; /* istanbul ignore else */
                            if (it.createErrors !== false) {
                              out += ' { keyword: \'' + ($errorKeyword || 'required') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
                              if (it.opts.messages !== false) {
                                out += ' , message: \'';
                                if (it.opts._errorDataPathProperty) {
                                  out += 'is a required property';
                                } else {
                                  out += 'should have required property \\\'' + $missingProperty + '\\\'';
                                }
                                out += '\' ';
                              }
                              if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                              }
                              out += ' } ';
                            } else {
                              out += ' {} ';
                            }
                            var __err = out;
                            out = $$outStack.pop();
                            if (!it.compositeRule && $breakOnError) {
                              /* istanbul ignore if */
                              if (it.async) {
                                out += ' throw new ValidationError([' + __err + ']); ';
                              } else {
                                out += ' validate.errors = [' + __err + ']; return false; ';
                              }
                            } else {
                              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                            }
                            $errSchemaPath = $currErrSchemaPath;
                            it.errorPath = $currentErrorPath;
                            out += ' } else { ';
                          } else {
                            if ($breakOnError) {
                              out += ' if (' + $useData + ' === undefined) { ' + $nextValid + ' = true; } else { ';
                            } else {
                              out += ' if (' + $useData + ' !== undefined) { ';
                            }
                          }
                          out += ' ' + $code + ' } ';
                        }
                      }
                      if ($breakOnError) {
                        out += ' if (' + $nextValid + ') { ';
                        $closingBraces += '}';
                      }
                    }
                  }
                }
                var arr5 = $pPropertyKeys;
                if (arr5) {
                  var $pProperty,
                      i5 = -1,
                      l5 = arr5.length - 1;
                  while (i5 < l5) {
                    $pProperty = arr5[i5 += 1];
                    var $sch = $pProperties[$pProperty];
                    if (it.util.schemaHasRules($sch, it.RULES.all)) {
                      $it.schema = $sch;
                      $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
                      $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
                      out += ' for (var ' + $key + ' in ' + $data + ') {  ';
                      if ($ownProperties) {
                        out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';
                      }
                      out += ' if (' + it.usePattern($pProperty) + '.test(' + $key + ')) { ';
                      $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                      var $passData = $data + '[' + $key + ']';
                      $it.dataPathArr[$dataNxt] = $key;
                      var $code = it.validate($it);
                      $it.baseId = $currentBaseId;
                      if (it.util.varOccurences($code, $nextData) < 2) {
                        out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
                      } else {
                        out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
                      }
                      if ($breakOnError) {
                        out += ' if (!' + $nextValid + ') break; ';
                      }
                      out += ' } ';
                      if ($breakOnError) {
                        out += ' else ' + $nextValid + ' = true; ';
                      }
                      out += ' }  ';
                      if ($breakOnError) {
                        out += ' if (' + $nextValid + ') { ';
                        $closingBraces += '}';
                      }
                    }
                  }
                }
                if (it.opts.v5) {
                  var arr6 = $pgPropertyKeys;
                  if (arr6) {
                    var $pgProperty,
                        i6 = -1,
                        l6 = arr6.length - 1;
                    while (i6 < l6) {
                      $pgProperty = arr6[i6 += 1];
                      var $pgSchema = $pgProperties[$pgProperty],
                          $sch = $pgSchema.schema;
                      if (it.util.schemaHasRules($sch, it.RULES.all)) {
                        $it.schema = $sch;
                        $it.schemaPath = it.schemaPath + '.patternGroups' + it.util.getProperty($pgProperty) + '.schema';
                        $it.errSchemaPath = it.errSchemaPath + '/patternGroups/' + it.util.escapeFragment($pgProperty) + '/schema';
                        out += ' var pgPropCount' + $lvl + ' = 0; for (var ' + $key + ' in ' + $data + ') {  ';
                        if ($ownProperties) {
                          out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';
                        }
                        out += ' if (' + it.usePattern($pgProperty) + '.test(' + $key + ')) { pgPropCount' + $lvl + '++; ';
                        $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                        var $passData = $data + '[' + $key + ']';
                        $it.dataPathArr[$dataNxt] = $key;
                        var $code = it.validate($it);
                        $it.baseId = $currentBaseId;
                        if (it.util.varOccurences($code, $nextData) < 2) {
                          out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
                        } else {
                          out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
                        }
                        if ($breakOnError) {
                          out += ' if (!' + $nextValid + ') break; ';
                        }
                        out += ' } ';
                        if ($breakOnError) {
                          out += ' else ' + $nextValid + ' = true; ';
                        }
                        out += ' }  ';
                        if ($breakOnError) {
                          out += ' if (' + $nextValid + ') { ';
                          $closingBraces += '}';
                        }
                        var $pgMin = $pgSchema.minimum,
                            $pgMax = $pgSchema.maximum;
                        if ($pgMin !== undefined || $pgMax !== undefined) {
                          out += ' var ' + $valid + ' = true; ';
                          var $currErrSchemaPath = $errSchemaPath;
                          if ($pgMin !== undefined) {
                            var $limit = $pgMin,
                                $reason = 'minimum',
                                $moreOrLess = 'less';
                            out += ' ' + $valid + ' = pgPropCount' + $lvl + ' >= ' + $pgMin + '; ';
                            $errSchemaPath = it.errSchemaPath + '/patternGroups/minimum';
                            out += '  if (!' + $valid + ') {   ';
                            var $$outStack = $$outStack || [];
                            $$outStack.push(out);
                            out = ''; /* istanbul ignore else */
                            if (it.createErrors !== false) {
                              out += ' { keyword: \'' + ($errorKeyword || 'patternGroups') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { reason: \'' + $reason + '\', limit: ' + $limit + ', pattern: \'' + it.util.escapeQuotes($pgProperty) + '\' } ';
                              if (it.opts.messages !== false) {
                                out += ' , message: \'should NOT have ' + $moreOrLess + ' than ' + $limit + ' properties matching pattern "' + it.util.escapeQuotes($pgProperty) + '"\' ';
                              }
                              if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                              }
                              out += ' } ';
                            } else {
                              out += ' {} ';
                            }
                            var __err = out;
                            out = $$outStack.pop();
                            if (!it.compositeRule && $breakOnError) {
                              /* istanbul ignore if */
                              if (it.async) {
                                out += ' throw new ValidationError([' + __err + ']); ';
                              } else {
                                out += ' validate.errors = [' + __err + ']; return false; ';
                              }
                            } else {
                              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                            }
                            out += ' } ';
                            if ($pgMax !== undefined) {
                              out += ' else ';
                            }
                          }
                          if ($pgMax !== undefined) {
                            var $limit = $pgMax,
                                $reason = 'maximum',
                                $moreOrLess = 'more';
                            out += ' ' + $valid + ' = pgPropCount' + $lvl + ' <= ' + $pgMax + '; ';
                            $errSchemaPath = it.errSchemaPath + '/patternGroups/maximum';
                            out += '  if (!' + $valid + ') {   ';
                            var $$outStack = $$outStack || [];
                            $$outStack.push(out);
                            out = ''; /* istanbul ignore else */
                            if (it.createErrors !== false) {
                              out += ' { keyword: \'' + ($errorKeyword || 'patternGroups') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { reason: \'' + $reason + '\', limit: ' + $limit + ', pattern: \'' + it.util.escapeQuotes($pgProperty) + '\' } ';
                              if (it.opts.messages !== false) {
                                out += ' , message: \'should NOT have ' + $moreOrLess + ' than ' + $limit + ' properties matching pattern "' + it.util.escapeQuotes($pgProperty) + '"\' ';
                              }
                              if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                              }
                              out += ' } ';
                            } else {
                              out += ' {} ';
                            }
                            var __err = out;
                            out = $$outStack.pop();
                            if (!it.compositeRule && $breakOnError) {
                              /* istanbul ignore if */
                              if (it.async) {
                                out += ' throw new ValidationError([' + __err + ']); ';
                              } else {
                                out += ' validate.errors = [' + __err + ']; return false; ';
                              }
                            } else {
                              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                            }
                            out += ' } ';
                          }
                          $errSchemaPath = $currErrSchemaPath;
                          if ($breakOnError) {
                            out += ' if (' + $valid + ') { ';
                            $closingBraces += '}';
                          }
                        }
                      }
                    }
                  }
                }
                if ($breakOnError) {
                  out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
                }
                out = it.util.cleanUpCode(out);
                return out;
              };
            }, {}], 32: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_ref(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $async, $refCode;
                if ($schema == '#' || $schema == '#/') {
                  if (it.isRoot) {
                    $async = it.async;
                    $refCode = 'validate';
                  } else {
                    $async = it.root.schema.$async === true;
                    $refCode = 'root.refVal[0]';
                  }
                } else {
                  var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
                  if ($refVal === undefined) {
                    var $message = 'can\'t resolve reference ' + $schema + ' from id ' + it.baseId;
                    if (it.opts.missingRefs == 'fail') {
                      console.log($message);
                      var $$outStack = $$outStack || [];
                      $$outStack.push(out);
                      out = ''; /* istanbul ignore else */
                      if (it.createErrors !== false) {
                        out += ' { keyword: \'' + ($errorKeyword || '$ref') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { ref: \'' + it.util.escapeQuotes($schema) + '\' } ';
                        if (it.opts.messages !== false) {
                          out += ' , message: \'can\\\'t resolve reference ' + it.util.escapeQuotes($schema) + '\' ';
                        }
                        if (it.opts.verbose) {
                          out += ' , schema: ' + it.util.toQuotedString($schema) + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                        }
                        out += ' } ';
                      } else {
                        out += ' {} ';
                      }
                      var __err = out;
                      out = $$outStack.pop();
                      if (!it.compositeRule && $breakOnError) {
                        /* istanbul ignore if */
                        if (it.async) {
                          out += ' throw new ValidationError([' + __err + ']); ';
                        } else {
                          out += ' validate.errors = [' + __err + ']; return false; ';
                        }
                      } else {
                        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                      }
                      if ($breakOnError) {
                        out += ' if (false) { ';
                      }
                    } else if (it.opts.missingRefs == 'ignore') {
                      console.log($message);
                      if ($breakOnError) {
                        out += ' if (true) { ';
                      }
                    } else {
                      var $error = new Error($message);
                      $error.missingRef = it.resolve.url(it.baseId, $schema);
                      $error.missingSchema = it.resolve.normalizeId(it.resolve.fullPath($error.missingRef));
                      throw $error;
                    }
                  } else if ($refVal.inline) {
                    var $it = it.util.copy(it);
                    $it.level++;
                    var $nextValid = 'valid' + $it.level;
                    $it.schema = $refVal.schema;
                    $it.schemaPath = '';
                    $it.errSchemaPath = $schema;
                    var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
                    out += ' ' + $code + ' ';
                    if ($breakOnError) {
                      out += ' if (' + $nextValid + ') { ';
                    }
                  } else {
                    $async = $refVal.$async === true;
                    $refCode = $refVal.code;
                  }
                }
                if ($refCode) {
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = '';
                  if (it.opts.passContext) {
                    out += ' ' + $refCode + '.call(this, ';
                  } else {
                    out += ' ' + $refCode + '( ';
                  }
                  out += ' ' + $data + ', (dataPath || \'\')';
                  if (it.errorPath != '""') {
                    out += ' + ' + it.errorPath;
                  }
                  var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
                      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
                  out += ' , ' + $parentData + ' , ' + $parentDataProperty + ', rootData)  ';
                  var __callValidate = out;
                  out = $$outStack.pop();
                  if ($async) {
                    if (!it.async) throw new Error('async schema referenced by sync schema');
                    out += ' try { ';
                    if ($breakOnError) {
                      out += 'var ' + $valid + ' =';
                    }
                    out += ' ' + it.yieldAwait + ' ' + __callValidate + '; } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; } ';
                    if ($breakOnError) {
                      out += ' if (' + $valid + ') { ';
                    }
                  } else {
                    out += ' if (!' + __callValidate + ') { if (vErrors === null) vErrors = ' + $refCode + '.errors; else vErrors = vErrors.concat(' + $refCode + '.errors); errors = vErrors.length; } ';
                    if ($breakOnError) {
                      out += ' else { ';
                    }
                  }
                }
                return out;
              };
            }, {}], 33: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_required(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                var $vSchema = 'schema' + $lvl;
                if (!$isData) {
                  if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
                    var $required = [];
                    var arr1 = $schema;
                    if (arr1) {
                      var $property,
                          i1 = -1,
                          l1 = arr1.length - 1;
                      while (i1 < l1) {
                        $property = arr1[i1 += 1];
                        var $propertySch = it.schema.properties[$property];
                        if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
                          $required[$required.length] = $property;
                        }
                      }
                    }
                  } else {
                    var $required = $schema;
                  }
                }
                if ($isData || $required.length) {
                  var $currentErrorPath = it.errorPath,
                      $loopRequired = $isData || $required.length >= it.opts.loopRequired;
                  if ($breakOnError) {
                    out += ' var missing' + $lvl + '; ';
                    if ($loopRequired) {
                      if (!$isData) {
                        out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
                      }
                      var $i = 'i' + $lvl,
                          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
                          $missingProperty = '\' + ' + $propertyPath + ' + \'';
                      if (it.opts._errorDataPathProperty) {
                        it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
                      }
                      out += ' var ' + $valid + ' = true; ';
                      if ($isData) {
                        out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
                      }
                      out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { ' + $valid + ' = ' + $data + '[' + $vSchema + '[' + $i + ']] !== undefined; if (!' + $valid + ') break; } ';
                      if ($isData) {
                        out += '  }  ';
                      }
                      out += '  if (!' + $valid + ') {   ';
                      var $$outStack = $$outStack || [];
                      $$outStack.push(out);
                      out = ''; /* istanbul ignore else */
                      if (it.createErrors !== false) {
                        out += ' { keyword: \'' + ($errorKeyword || 'required') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
                        if (it.opts.messages !== false) {
                          out += ' , message: \'';
                          if (it.opts._errorDataPathProperty) {
                            out += 'is a required property';
                          } else {
                            out += 'should have required property \\\'' + $missingProperty + '\\\'';
                          }
                          out += '\' ';
                        }
                        if (it.opts.verbose) {
                          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                        }
                        out += ' } ';
                      } else {
                        out += ' {} ';
                      }
                      var __err = out;
                      out = $$outStack.pop();
                      if (!it.compositeRule && $breakOnError) {
                        /* istanbul ignore if */
                        if (it.async) {
                          out += ' throw new ValidationError([' + __err + ']); ';
                        } else {
                          out += ' validate.errors = [' + __err + ']; return false; ';
                        }
                      } else {
                        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                      }
                      out += ' } else { ';
                    } else {
                      out += ' if ( ';
                      var arr2 = $required;
                      if (arr2) {
                        var _$property,
                            $i = -1,
                            l2 = arr2.length - 1;
                        while ($i < l2) {
                          _$property = arr2[$i += 1];
                          if ($i) {
                            out += ' || ';
                          }
                          var $prop = it.util.getProperty(_$property);
                          out += ' ( ' + $data + $prop + ' === undefined && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? _$property : $prop) + ') ) ';
                        }
                      }
                      out += ') {  ';
                      var $propertyPath = 'missing' + $lvl,
                          $missingProperty = '\' + ' + $propertyPath + ' + \'';
                      if (it.opts._errorDataPathProperty) {
                        it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
                      }
                      var $$outStack = $$outStack || [];
                      $$outStack.push(out);
                      out = ''; /* istanbul ignore else */
                      if (it.createErrors !== false) {
                        out += ' { keyword: \'' + ($errorKeyword || 'required') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
                        if (it.opts.messages !== false) {
                          out += ' , message: \'';
                          if (it.opts._errorDataPathProperty) {
                            out += 'is a required property';
                          } else {
                            out += 'should have required property \\\'' + $missingProperty + '\\\'';
                          }
                          out += '\' ';
                        }
                        if (it.opts.verbose) {
                          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                        }
                        out += ' } ';
                      } else {
                        out += ' {} ';
                      }
                      var __err = out;
                      out = $$outStack.pop();
                      if (!it.compositeRule && $breakOnError) {
                        /* istanbul ignore if */
                        if (it.async) {
                          out += ' throw new ValidationError([' + __err + ']); ';
                        } else {
                          out += ' validate.errors = [' + __err + ']; return false; ';
                        }
                      } else {
                        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                      }
                      out += ' } else { ';
                    }
                  } else {
                    if ($loopRequired) {
                      if (!$isData) {
                        out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
                      }
                      var $i = 'i' + $lvl,
                          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
                          $missingProperty = '\' + ' + $propertyPath + ' + \'';
                      if (it.opts._errorDataPathProperty) {
                        it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
                      }
                      if ($isData) {
                        out += ' if (' + $vSchema + ' && !Array.isArray(' + $vSchema + ')) {  var err =   '; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                          out += ' { keyword: \'' + ($errorKeyword || 'required') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
                          if (it.opts.messages !== false) {
                            out += ' , message: \'';
                            if (it.opts._errorDataPathProperty) {
                              out += 'is a required property';
                            } else {
                              out += 'should have required property \\\'' + $missingProperty + '\\\'';
                            }
                            out += '\' ';
                          }
                          if (it.opts.verbose) {
                            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                          }
                          out += ' } ';
                        } else {
                          out += ' {} ';
                        }
                        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + $vSchema + ' !== undefined) { ';
                      }
                      out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { if (' + $data + '[' + $vSchema + '[' + $i + ']] === undefined) {  var err =   '; /* istanbul ignore else */
                      if (it.createErrors !== false) {
                        out += ' { keyword: \'' + ($errorKeyword || 'required') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
                        if (it.opts.messages !== false) {
                          out += ' , message: \'';
                          if (it.opts._errorDataPathProperty) {
                            out += 'is a required property';
                          } else {
                            out += 'should have required property \\\'' + $missingProperty + '\\\'';
                          }
                          out += '\' ';
                        }
                        if (it.opts.verbose) {
                          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                        }
                        out += ' } ';
                      } else {
                        out += ' {} ';
                      }
                      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
                      if ($isData) {
                        out += '  }  ';
                      }
                    } else {
                      var arr3 = $required;
                      if (arr3) {
                        var $reqProperty,
                            i3 = -1,
                            l3 = arr3.length - 1;
                        while (i3 < l3) {
                          $reqProperty = arr3[i3 += 1];
                          var $prop = it.util.getProperty($reqProperty),
                              $missingProperty = it.util.escapeQuotes($reqProperty);
                          if (it.opts._errorDataPathProperty) {
                            it.errorPath = it.util.getPath($currentErrorPath, $reqProperty, it.opts.jsonPointers);
                          }
                          out += ' if (' + $data + $prop + ' === undefined) {  var err =   '; /* istanbul ignore else */
                          if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ($errorKeyword || 'required') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
                            if (it.opts.messages !== false) {
                              out += ' , message: \'';
                              if (it.opts._errorDataPathProperty) {
                                out += 'is a required property';
                              } else {
                                out += 'should have required property \\\'' + $missingProperty + '\\\'';
                              }
                              out += '\' ';
                            }
                            if (it.opts.verbose) {
                              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                            }
                            out += ' } ';
                          } else {
                            out += ' {} ';
                          }
                          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
                        }
                      }
                    }
                  }
                  it.errorPath = $currentErrorPath;
                } else if ($breakOnError) {
                  out += ' if (true) {';
                }
                return out;
              };
            }, {}], 34: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_switch(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $errs = 'errs__' + $lvl;
                var $it = it.util.copy(it);
                var $closingBraces = '';
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                var $ifPassed = 'ifPassed' + it.level,
                    $currentBaseId = $it.baseId,
                    $shouldContinue;
                out += 'var ' + $ifPassed + ';';
                var arr1 = $schema;
                if (arr1) {
                  var $sch,
                      $caseIndex = -1,
                      l1 = arr1.length - 1;
                  while ($caseIndex < l1) {
                    $sch = arr1[$caseIndex += 1];
                    if ($caseIndex && !$shouldContinue) {
                      out += ' if (!' + $ifPassed + ') { ';
                      $closingBraces += '}';
                    }
                    if ($sch.if && it.util.schemaHasRules($sch.if, it.RULES.all)) {
                      out += ' var ' + $errs + ' = errors;   ';
                      var $wasComposite = it.compositeRule;
                      it.compositeRule = $it.compositeRule = true;
                      $it.createErrors = false;
                      $it.schema = $sch.if;
                      $it.schemaPath = $schemaPath + '[' + $caseIndex + '].if';
                      $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/if';
                      out += '  ' + it.validate($it) + ' ';
                      $it.baseId = $currentBaseId;
                      $it.createErrors = true;
                      it.compositeRule = $it.compositeRule = $wasComposite;
                      out += ' ' + $ifPassed + ' = ' + $nextValid + '; if (' + $ifPassed + ') {  ';
                      if (typeof $sch.then == 'boolean') {
                        if ($sch.then === false) {
                          var $$outStack = $$outStack || [];
                          $$outStack.push(out);
                          out = ''; /* istanbul ignore else */
                          if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ($errorKeyword || 'switch') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';
                            if (it.opts.messages !== false) {
                              out += ' , message: \'should pass "switch" keyword validation\' ';
                            }
                            if (it.opts.verbose) {
                              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                            }
                            out += ' } ';
                          } else {
                            out += ' {} ';
                          }
                          var __err = out;
                          out = $$outStack.pop();
                          if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                              out += ' throw new ValidationError([' + __err + ']); ';
                            } else {
                              out += ' validate.errors = [' + __err + ']; return false; ';
                            }
                          } else {
                            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                          }
                        }
                        out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';
                      } else {
                        $it.schema = $sch.then;
                        $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
                        $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
                        out += '  ' + it.validate($it) + ' ';
                        $it.baseId = $currentBaseId;
                      }
                      out += '  } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } } ';
                    } else {
                      out += ' ' + $ifPassed + ' = true;  ';
                      if (typeof $sch.then == 'boolean') {
                        if ($sch.then === false) {
                          var $$outStack = $$outStack || [];
                          $$outStack.push(out);
                          out = ''; /* istanbul ignore else */
                          if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ($errorKeyword || 'switch') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';
                            if (it.opts.messages !== false) {
                              out += ' , message: \'should pass "switch" keyword validation\' ';
                            }
                            if (it.opts.verbose) {
                              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                            }
                            out += ' } ';
                          } else {
                            out += ' {} ';
                          }
                          var __err = out;
                          out = $$outStack.pop();
                          if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                              out += ' throw new ValidationError([' + __err + ']); ';
                            } else {
                              out += ' validate.errors = [' + __err + ']; return false; ';
                            }
                          } else {
                            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                          }
                        }
                        out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';
                      } else {
                        $it.schema = $sch.then;
                        $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
                        $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
                        out += '  ' + it.validate($it) + ' ';
                        $it.baseId = $currentBaseId;
                      }
                    }
                    $shouldContinue = $sch.continue;
                  }
                }
                out += '' + $closingBraces + 'var ' + $valid + ' = ' + $nextValid + '; ';
                out = it.util.cleanUpCode(out);
                return out;
              };
            }, {}], 35: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_uniqueItems(it, $keyword) {
                var out = ' ';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                var $isData = it.opts.v5 && $schema && $schema.$data,
                    $schemaValue;
                if ($isData) {
                  out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
                  $schemaValue = 'schema' + $lvl;
                } else {
                  $schemaValue = $schema;
                }
                if (($schema || $isData) && it.opts.uniqueItems !== false) {
                  if ($isData) {
                    out += ' var ' + $valid + '; if (' + $schemaValue + ' === false || ' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'boolean\') ' + $valid + ' = false; else { ';
                  }
                  out += ' var ' + $valid + ' = true; if (' + $data + '.length > 1) { var i = ' + $data + '.length, j; outer: for (;i--;) { for (j = i; j--;) { if (equal(' + $data + '[i], ' + $data + '[j])) { ' + $valid + ' = false; break outer; } } } } ';
                  if ($isData) {
                    out += '  }  ';
                  }
                  out += ' if (!' + $valid + ') {   ';
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'uniqueItems') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { i: i, j: j } ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema:  ';
                      if ($isData) {
                        out += 'validate.schema' + $schemaPath;
                      } else {
                        out += '' + $schema;
                      }
                      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + __err + ']); ';
                    } else {
                      out += ' validate.errors = [' + __err + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                  out += ' } ';
                  if ($breakOnError) {
                    out += ' else { ';
                  }
                } else {
                  if ($breakOnError) {
                    out += ' if (true) { ';
                  }
                }
                return out;
              };
            }, {}], 36: [function (require, module, exports) {
              'use strict';

              module.exports = function generate_validate(it, $keyword) {
                var out = '';
                var $async = it.schema.$async === true;
                if (it.isTop) {
                  var $top = it.isTop,
                      $lvl = it.level = 0,
                      $dataLvl = it.dataLevel = 0,
                      $data = 'data';
                  it.rootId = it.resolve.fullPath(it.root.schema.id);
                  it.baseId = it.baseId || it.rootId;
                  if ($async) {
                    it.async = true;
                    var $es7 = it.opts.async == 'es7';
                    it.yieldAwait = $es7 ? 'await' : 'yield';
                  }
                  delete it.isTop;
                  it.dataPathArr = [undefined];
                  out += ' var validate = ';
                  if ($async) {
                    if ($es7) {
                      out += ' (async function ';
                    } else {
                      if (it.opts.async == 'co*') {
                        out += 'co.wrap';
                      }
                      out += '(function* ';
                    }
                  } else {
                    out += ' (function ';
                  }
                  out += ' (data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; var vErrors = null; ';
                  out += ' var errors = 0;     ';
                  out += ' if (rootData === undefined) rootData = data;';
                } else {
                  var $lvl = it.level,
                      $dataLvl = it.dataLevel,
                      $data = 'data' + ($dataLvl || '');
                  if (it.schema.id) it.baseId = it.resolve.url(it.baseId, it.schema.id);
                  if ($async && !it.async) throw new Error('async schema in sync schema');
                  out += ' var errs_' + $lvl + ' = errors;';
                }
                var $valid = 'valid' + $lvl,
                    $breakOnError = !it.opts.allErrors,
                    $closingBraces1 = '',
                    $closingBraces2 = '',
                    $errorKeyword;
                var $typeSchema = it.schema.type,
                    $typeIsArray = Array.isArray($typeSchema);
                if ($typeSchema && it.opts.coerceTypes) {
                  var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
                  if ($coerceToTypes) {
                    var $schemaPath = it.schemaPath + '.type',
                        $errSchemaPath = it.errSchemaPath + '/type',
                        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
                    out += ' if (' + it.util[$method]($typeSchema, $data, true) + ') {  ';
                    var $dataType = 'dataType' + $lvl,
                        $coerced = 'coerced' + $lvl;
                    out += ' var ' + $dataType + ' = typeof ' + $data + '; ';
                    if (it.opts.coerceTypes == 'array') {
                      out += ' if (' + $dataType + ' == \'object\' && Array.isArray(' + $data + ')) ' + $dataType + ' = \'array\'; ';
                    }
                    out += ' var ' + $coerced + ' = undefined; ';
                    var $bracesCoercion = '';
                    var arr1 = $coerceToTypes;
                    if (arr1) {
                      var $type,
                          $i = -1,
                          l1 = arr1.length - 1;
                      while ($i < l1) {
                        $type = arr1[$i += 1];
                        if ($i) {
                          out += ' if (' + $coerced + ' === undefined) { ';
                          $bracesCoercion += '}';
                        }
                        if (it.opts.coerceTypes == 'array' && $type != 'array') {
                          out += ' if (' + $dataType + ' == \'array\' && ' + $data + '.length == 1) { ' + $coerced + ' = ' + $data + ' = ' + $data + '[0]; ' + $dataType + ' = typeof ' + $data + ';  } ';
                        }
                        if ($type == 'string') {
                          out += ' if (' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\') ' + $coerced + ' = \'\' + ' + $data + '; else if (' + $data + ' === null) ' + $coerced + ' = \'\'; ';
                        } else if ($type == 'number' || $type == 'integer') {
                          out += ' if (' + $dataType + ' == \'boolean\' || ' + $data + ' === null || (' + $dataType + ' == \'string\' && ' + $data + ' && ' + $data + ' == +' + $data + ' ';
                          if ($type == 'integer') {
                            out += ' && !(' + $data + ' % 1)';
                          }
                          out += ')) ' + $coerced + ' = +' + $data + '; ';
                        } else if ($type == 'boolean') {
                          out += ' if (' + $data + ' === \'false\' || ' + $data + ' === 0 || ' + $data + ' === null) ' + $coerced + ' = false; else if (' + $data + ' === \'true\' || ' + $data + ' === 1) ' + $coerced + ' = true; ';
                        } else if ($type == 'null') {
                          out += ' if (' + $data + ' === \'\' || ' + $data + ' === 0 || ' + $data + ' === false) ' + $coerced + ' = null; ';
                        } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
                          out += ' if (' + $dataType + ' == \'string\' || ' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\' || ' + $data + ' == null) ' + $coerced + ' = [' + $data + ']; ';
                        }
                      }
                    }
                    out += ' ' + $bracesCoercion + ' if (' + $coerced + ' === undefined) {   ';
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';
                      if ($typeIsArray) {
                        out += '' + $typeSchema.join(",");
                      } else {
                        out += '' + $typeSchema;
                      }
                      out += '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'should be ';
                        if ($typeIsArray) {
                          out += '' + $typeSchema.join(",");
                        } else {
                          out += '' + $typeSchema;
                        }
                        out += '\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError([' + __err + ']); ';
                      } else {
                        out += ' validate.errors = [' + __err + ']; return false; ';
                      }
                    } else {
                      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                    out += ' } else {  ';
                    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
                        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
                    out += ' ' + $data + ' = ' + $coerced + '; ';
                    if (!$dataLvl) {
                      out += 'if (' + $parentData + ' !== undefined)';
                    }
                    out += ' ' + $parentData + '[' + $parentDataProperty + '] = ' + $coerced + '; } } ';
                  }
                }
                var $refKeywords;
                if (it.schema.$ref && ($refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'))) {
                  if (it.opts.extendRefs == 'fail') {
                    throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '"');
                  } else if (it.opts.extendRefs == 'ignore') {
                    $refKeywords = false;
                    console.log('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
                  } else if (it.opts.extendRefs !== true) {
                    console.log('$ref: all keywords used in schema at path "' + it.errSchemaPath + '". It will change in the next major version, see issue #260. Use option { extendRefs: true } to keep current behaviour');
                  }
                }
                if (it.schema.$ref && !$refKeywords) {
                  out += ' ' + it.RULES.all.$ref.code(it, '$ref') + ' ';
                  if ($breakOnError) {
                    out += ' } if (errors === ';
                    if ($top) {
                      out += '0';
                    } else {
                      out += 'errs_' + $lvl;
                    }
                    out += ') { ';
                    $closingBraces2 += '}';
                  }
                } else {
                  var arr2 = it.RULES;
                  if (arr2) {
                    var $rulesGroup,
                        i2 = -1,
                        l2 = arr2.length - 1;
                    while (i2 < l2) {
                      $rulesGroup = arr2[i2 += 1];
                      if ($shouldUseGroup($rulesGroup)) {
                        if ($rulesGroup.type) {
                          out += ' if (' + it.util.checkDataType($rulesGroup.type, $data) + ') { ';
                        }
                        if (it.opts.useDefaults && !it.compositeRule) {
                          if ($rulesGroup.type == 'object' && it.schema.properties) {
                            var $schema = it.schema.properties,
                                $schemaKeys = Object.keys($schema);
                            var arr3 = $schemaKeys;
                            if (arr3) {
                              var $propertyKey,
                                  i3 = -1,
                                  l3 = arr3.length - 1;
                              while (i3 < l3) {
                                $propertyKey = arr3[i3 += 1];
                                var $sch = $schema[$propertyKey];
                                if ($sch.default !== undefined) {
                                  var $passData = $data + it.util.getProperty($propertyKey);
                                  out += '  if (' + $passData + ' === undefined) ' + $passData + ' = ';
                                  if (it.opts.useDefaults == 'shared') {
                                    out += ' ' + it.useDefault($sch.default) + ' ';
                                  } else {
                                    out += ' ' + JSON.stringify($sch.default) + ' ';
                                  }
                                  out += '; ';
                                }
                              }
                            }
                          } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
                            var arr4 = it.schema.items;
                            if (arr4) {
                              var $sch,
                                  $i = -1,
                                  l4 = arr4.length - 1;
                              while ($i < l4) {
                                $sch = arr4[$i += 1];
                                if ($sch.default !== undefined) {
                                  var $passData = $data + '[' + $i + ']';
                                  out += '  if (' + $passData + ' === undefined) ' + $passData + ' = ';
                                  if (it.opts.useDefaults == 'shared') {
                                    out += ' ' + it.useDefault($sch.default) + ' ';
                                  } else {
                                    out += ' ' + JSON.stringify($sch.default) + ' ';
                                  }
                                  out += '; ';
                                }
                              }
                            }
                          }
                        }
                        var arr5 = $rulesGroup.rules;
                        if (arr5) {
                          var $rule,
                              i5 = -1,
                              l5 = arr5.length - 1;
                          while (i5 < l5) {
                            $rule = arr5[i5 += 1];
                            if ($shouldUseRule($rule)) {
                              out += ' ' + $rule.code(it, $rule.keyword) + ' ';
                              if ($breakOnError) {
                                $closingBraces1 += '}';
                              }
                            }
                          }
                        }
                        if ($breakOnError) {
                          out += ' ' + $closingBraces1 + ' ';
                          $closingBraces1 = '';
                        }
                        if ($rulesGroup.type) {
                          out += ' } ';
                          if ($typeSchema && $typeSchema === $rulesGroup.type) {
                            var $typeChecked = true;
                            out += ' else { ';
                            var $schemaPath = it.schemaPath + '.type',
                                $errSchemaPath = it.errSchemaPath + '/type';
                            var $$outStack = $$outStack || [];
                            $$outStack.push(out);
                            out = ''; /* istanbul ignore else */
                            if (it.createErrors !== false) {
                              out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';
                              if ($typeIsArray) {
                                out += '' + $typeSchema.join(",");
                              } else {
                                out += '' + $typeSchema;
                              }
                              out += '\' } ';
                              if (it.opts.messages !== false) {
                                out += ' , message: \'should be ';
                                if ($typeIsArray) {
                                  out += '' + $typeSchema.join(",");
                                } else {
                                  out += '' + $typeSchema;
                                }
                                out += '\' ';
                              }
                              if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                              }
                              out += ' } ';
                            } else {
                              out += ' {} ';
                            }
                            var __err = out;
                            out = $$outStack.pop();
                            if (!it.compositeRule && $breakOnError) {
                              /* istanbul ignore if */
                              if (it.async) {
                                out += ' throw new ValidationError([' + __err + ']); ';
                              } else {
                                out += ' validate.errors = [' + __err + ']; return false; ';
                              }
                            } else {
                              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                            }
                            out += ' } ';
                          }
                        }
                        if ($breakOnError) {
                          out += ' if (errors === ';
                          if ($top) {
                            out += '0';
                          } else {
                            out += 'errs_' + $lvl;
                          }
                          out += ') { ';
                          $closingBraces2 += '}';
                        }
                      }
                    }
                  }
                }
                if ($typeSchema && !$typeChecked && !(it.opts.coerceTypes && $coerceToTypes)) {
                  var $schemaPath = it.schemaPath + '.type',
                      $errSchemaPath = it.errSchemaPath + '/type',
                      $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
                  out += ' if (' + it.util[$method]($typeSchema, $data, true) + ') {   ';
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';
                    if ($typeIsArray) {
                      out += '' + $typeSchema.join(",");
                    } else {
                      out += '' + $typeSchema;
                    }
                    out += '\' } ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'should be ';
                      if ($typeIsArray) {
                        out += '' + $typeSchema.join(",");
                      } else {
                        out += '' + $typeSchema;
                      }
                      out += '\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + __err + ']); ';
                    } else {
                      out += ' validate.errors = [' + __err + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                  out += ' }';
                }
                if ($breakOnError) {
                  out += ' ' + $closingBraces2 + ' ';
                }
                if ($top) {
                  if ($async) {
                    out += ' if (errors === 0) return true;           ';
                    out += ' else throw new ValidationError(vErrors); ';
                  } else {
                    out += ' validate.errors = vErrors; ';
                    out += ' return errors === 0;       ';
                  }
                  out += ' }); return validate;';
                } else {
                  out += ' var ' + $valid + ' = errors === errs_' + $lvl + ';';
                }
                out = it.util.cleanUpCode(out);
                if ($top && $breakOnError) {
                  out = it.util.cleanUpVarErrors(out, $async);
                }

                function $shouldUseGroup($rulesGroup) {
                  for (var i = 0; i < $rulesGroup.rules.length; i++) {
                    if ($shouldUseRule($rulesGroup.rules[i])) return true;
                  }
                }

                function $shouldUseRule($rule) {
                  return it.schema[$rule.keyword] !== undefined || $rule.keyword == 'properties' && (it.schema.additionalProperties === false || _typeof3(it.schema.additionalProperties) == 'object' || it.schema.patternProperties && Object.keys(it.schema.patternProperties).length || it.opts.v5 && it.schema.patternGroups && Object.keys(it.schema.patternGroups).length);
                }
                return out;
              };
            }, {}], 37: [function (require, module, exports) {
              'use strict';

              var IDENTIFIER = /^[a-z_$][a-z0-9_$\-]*$/i;
              var customRuleCode = require('./dotjs/custom');

              module.exports = {
                add: addKeyword,
                get: getKeyword,
                remove: removeKeyword
              };

              /**
               * Define custom keyword
               * @this  Ajv
               * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
               * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
               */
              function addKeyword(keyword, definition) {
                /* jshint validthis: true */
                /* eslint no-shadow: 0 */
                var RULES = this.RULES;

                if (RULES.keywords[keyword]) throw new Error('Keyword ' + keyword + ' is already defined');

                if (!IDENTIFIER.test(keyword)) throw new Error('Keyword ' + keyword + ' is not a valid identifier');

                if (definition) {
                  if (definition.macro && definition.valid !== undefined) throw new Error('"valid" option cannot be used with macro keywords');

                  var dataType = definition.type;
                  if (Array.isArray(dataType)) {
                    var i,
                        len = dataType.length;
                    for (i = 0; i < len; i++) {
                      checkDataType(dataType[i]);
                    }for (i = 0; i < len; i++) {
                      _addRule(keyword, dataType[i], definition);
                    }
                  } else {
                    if (dataType) checkDataType(dataType);
                    _addRule(keyword, dataType, definition);
                  }

                  var $data = definition.$data === true && this._opts.v5;
                  if ($data && !definition.validate) throw new Error('$data support: "validate" function is not defined');

                  var metaSchema = definition.metaSchema;
                  if (metaSchema) {
                    if ($data) {
                      metaSchema = {
                        anyOf: [metaSchema, { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#/definitions/$data' }]
                      };
                    }
                    definition.validateSchema = this.compile(metaSchema, true);
                  }
                }

                RULES.keywords[keyword] = RULES.all[keyword] = true;

                function _addRule(keyword, dataType, definition) {
                  var ruleGroup;
                  for (var i = 0; i < RULES.length; i++) {
                    var rg = RULES[i];
                    if (rg.type == dataType) {
                      ruleGroup = rg;
                      break;
                    }
                  }

                  if (!ruleGroup) {
                    ruleGroup = { type: dataType, rules: [] };
                    RULES.push(ruleGroup);
                  }

                  var rule = {
                    keyword: keyword,
                    definition: definition,
                    custom: true,
                    code: customRuleCode
                  };
                  ruleGroup.rules.push(rule);
                  RULES.custom[keyword] = rule;
                }

                function checkDataType(dataType) {
                  if (!RULES.types[dataType]) throw new Error('Unknown type ' + dataType);
                }
              }

              /**
               * Get keyword
               * @this  Ajv
               * @param {String} keyword pre-defined or custom keyword.
               * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
               */
              function getKeyword(keyword) {
                /* jshint validthis: true */
                var rule = this.RULES.custom[keyword];
                return rule ? rule.definition : this.RULES.keywords[keyword] || false;
              }

              /**
               * Remove keyword
               * @this  Ajv
               * @param {String} keyword pre-defined or custom keyword.
               */
              function removeKeyword(keyword) {
                /* jshint validthis: true */
                var RULES = this.RULES;
                delete RULES.keywords[keyword];
                delete RULES.all[keyword];
                delete RULES.custom[keyword];
                for (var i = 0; i < RULES.length; i++) {
                  var rules = RULES[i].rules;
                  for (var j = 0; j < rules.length; j++) {
                    if (rules[j].keyword == keyword) {
                      rules.splice(j, 1);
                      break;
                    }
                  }
                }
              }
            }, { "./dotjs/custom": 21 }], 38: [function (require, module, exports) {
              module.exports = {
                "id": "http://json-schema.org/draft-04/schema#",
                "$schema": "http://json-schema.org/draft-04/schema#",
                "description": "Core schema meta-schema",
                "definitions": {
                  "schemaArray": {
                    "type": "array",
                    "minItems": 1,
                    "items": { "$ref": "#" }
                  },
                  "positiveInteger": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "positiveIntegerDefault0": {
                    "allOf": [{ "$ref": "#/definitions/positiveInteger" }, { "default": 0 }]
                  },
                  "simpleTypes": {
                    "enum": ["array", "boolean", "integer", "null", "number", "object", "string"]
                  },
                  "stringArray": {
                    "type": "array",
                    "items": { "type": "string" },
                    "minItems": 1,
                    "uniqueItems": true
                  }
                },
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uri"
                  },
                  "$schema": {
                    "type": "string",
                    "format": "uri"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "default": {},
                  "multipleOf": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true
                  },
                  "maximum": {
                    "type": "number"
                  },
                  "exclusiveMaximum": {
                    "type": "boolean",
                    "default": false
                  },
                  "minimum": {
                    "type": "number"
                  },
                  "exclusiveMinimum": {
                    "type": "boolean",
                    "default": false
                  },
                  "maxLength": { "$ref": "#/definitions/positiveInteger" },
                  "minLength": { "$ref": "#/definitions/positiveIntegerDefault0" },
                  "pattern": {
                    "type": "string",
                    "format": "regex"
                  },
                  "additionalItems": {
                    "anyOf": [{ "type": "boolean" }, { "$ref": "#" }],
                    "default": {}
                  },
                  "items": {
                    "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/schemaArray" }],
                    "default": {}
                  },
                  "maxItems": { "$ref": "#/definitions/positiveInteger" },
                  "minItems": { "$ref": "#/definitions/positiveIntegerDefault0" },
                  "uniqueItems": {
                    "type": "boolean",
                    "default": false
                  },
                  "maxProperties": { "$ref": "#/definitions/positiveInteger" },
                  "minProperties": { "$ref": "#/definitions/positiveIntegerDefault0" },
                  "required": { "$ref": "#/definitions/stringArray" },
                  "additionalProperties": {
                    "anyOf": [{ "type": "boolean" }, { "$ref": "#" }],
                    "default": {}
                  },
                  "definitions": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                  },
                  "properties": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                  },
                  "patternProperties": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                  },
                  "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                      "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/stringArray" }]
                    }
                  },
                  "enum": {
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true
                  },
                  "type": {
                    "anyOf": [{ "$ref": "#/definitions/simpleTypes" }, {
                      "type": "array",
                      "items": { "$ref": "#/definitions/simpleTypes" },
                      "minItems": 1,
                      "uniqueItems": true
                    }]
                  },
                  "allOf": { "$ref": "#/definitions/schemaArray" },
                  "anyOf": { "$ref": "#/definitions/schemaArray" },
                  "oneOf": { "$ref": "#/definitions/schemaArray" },
                  "not": { "$ref": "#" }
                },
                "dependencies": {
                  "exclusiveMaximum": ["maximum"],
                  "exclusiveMinimum": ["minimum"]
                },
                "default": {}
              };
            }, {}], 39: [function (require, module, exports) {
              module.exports = {
                "id": "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#",
                "$schema": "http://json-schema.org/draft-04/schema#",
                "description": "Core schema meta-schema (v5 proposals)",
                "definitions": {
                  "schemaArray": {
                    "type": "array",
                    "minItems": 1,
                    "items": { "$ref": "#" }
                  },
                  "positiveInteger": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "positiveIntegerDefault0": {
                    "allOf": [{ "$ref": "#/definitions/positiveInteger" }, { "default": 0 }]
                  },
                  "simpleTypes": {
                    "enum": ["array", "boolean", "integer", "null", "number", "object", "string"]
                  },
                  "stringArray": {
                    "type": "array",
                    "items": { "type": "string" },
                    "minItems": 1,
                    "uniqueItems": true
                  },
                  "$data": {
                    "type": "object",
                    "required": ["$data"],
                    "properties": {
                      "$data": {
                        "type": "string",
                        "anyOf": [{ "format": "relative-json-pointer" }, { "format": "json-pointer" }]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uri"
                  },
                  "$schema": {
                    "type": "string",
                    "format": "uri"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "default": {},
                  "multipleOf": {
                    "anyOf": [{
                      "type": "number",
                      "minimum": 0,
                      "exclusiveMinimum": true
                    }, { "$ref": "#/definitions/$data" }]
                  },
                  "maximum": {
                    "anyOf": [{ "type": "number" }, { "$ref": "#/definitions/$data" }]
                  },
                  "exclusiveMaximum": {
                    "anyOf": [{
                      "type": "boolean",
                      "default": false
                    }, { "$ref": "#/definitions/$data" }]
                  },
                  "minimum": {
                    "anyOf": [{ "type": "number" }, { "$ref": "#/definitions/$data" }]
                  },
                  "exclusiveMinimum": {
                    "anyOf": [{
                      "type": "boolean",
                      "default": false
                    }, { "$ref": "#/definitions/$data" }]
                  },
                  "maxLength": {
                    "anyOf": [{ "$ref": "#/definitions/positiveInteger" }, { "$ref": "#/definitions/$data" }]
                  },
                  "minLength": {
                    "anyOf": [{ "$ref": "#/definitions/positiveIntegerDefault0" }, { "$ref": "#/definitions/$data" }]
                  },
                  "pattern": {
                    "anyOf": [{
                      "type": "string",
                      "format": "regex"
                    }, { "$ref": "#/definitions/$data" }]
                  },
                  "additionalItems": {
                    "anyOf": [{ "type": "boolean" }, { "$ref": "#" }, { "$ref": "#/definitions/$data" }],
                    "default": {}
                  },
                  "items": {
                    "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/schemaArray" }],
                    "default": {}
                  },
                  "maxItems": {
                    "anyOf": [{ "$ref": "#/definitions/positiveInteger" }, { "$ref": "#/definitions/$data" }]
                  },
                  "minItems": {
                    "anyOf": [{ "$ref": "#/definitions/positiveIntegerDefault0" }, { "$ref": "#/definitions/$data" }]
                  },
                  "uniqueItems": {
                    "anyOf": [{
                      "type": "boolean",
                      "default": false
                    }, { "$ref": "#/definitions/$data" }]
                  },
                  "maxProperties": {
                    "anyOf": [{ "$ref": "#/definitions/positiveInteger" }, { "$ref": "#/definitions/$data" }]
                  },
                  "minProperties": {
                    "anyOf": [{ "$ref": "#/definitions/positiveIntegerDefault0" }, { "$ref": "#/definitions/$data" }]
                  },
                  "required": {
                    "anyOf": [{ "$ref": "#/definitions/stringArray" }, { "$ref": "#/definitions/$data" }]
                  },
                  "additionalProperties": {
                    "anyOf": [{ "type": "boolean" }, { "$ref": "#" }, { "$ref": "#/definitions/$data" }],
                    "default": {}
                  },
                  "definitions": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                  },
                  "properties": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                  },
                  "patternProperties": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                  },
                  "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                      "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/stringArray" }]
                    }
                  },
                  "enum": {
                    "anyOf": [{
                      "type": "array",
                      "minItems": 1,
                      "uniqueItems": true
                    }, { "$ref": "#/definitions/$data" }]
                  },
                  "type": {
                    "anyOf": [{ "$ref": "#/definitions/simpleTypes" }, {
                      "type": "array",
                      "items": { "$ref": "#/definitions/simpleTypes" },
                      "minItems": 1,
                      "uniqueItems": true
                    }]
                  },
                  "allOf": { "$ref": "#/definitions/schemaArray" },
                  "anyOf": { "$ref": "#/definitions/schemaArray" },
                  "oneOf": { "$ref": "#/definitions/schemaArray" },
                  "not": { "$ref": "#" },
                  "format": {
                    "anyOf": [{ "type": "string" }, { "$ref": "#/definitions/$data" }]
                  },
                  "formatMaximum": {
                    "anyOf": [{ "type": "string" }, { "$ref": "#/definitions/$data" }]
                  },
                  "formatMinimum": {
                    "anyOf": [{ "type": "string" }, { "$ref": "#/definitions/$data" }]
                  },
                  "formatExclusiveMaximum": {
                    "anyOf": [{
                      "type": "boolean",
                      "default": false
                    }, { "$ref": "#/definitions/$data" }]
                  },
                  "formatExclusiveMinimum": {
                    "anyOf": [{
                      "type": "boolean",
                      "default": false
                    }, { "$ref": "#/definitions/$data" }]
                  },
                  "constant": {
                    "anyOf": [{}, { "$ref": "#/definitions/$data" }]
                  },
                  "contains": { "$ref": "#" },
                  "patternGroups": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "required": ["schema"],
                      "properties": {
                        "maximum": {
                          "anyOf": [{ "$ref": "#/definitions/positiveInteger" }, { "$ref": "#/definitions/$data" }]
                        },
                        "minimum": {
                          "anyOf": [{ "$ref": "#/definitions/positiveIntegerDefault0" }, { "$ref": "#/definitions/$data" }]
                        },
                        "schema": { "$ref": "#" }
                      },
                      "additionalProperties": false
                    },
                    "default": {}
                  },
                  "switch": {
                    "type": "array",
                    "items": {
                      "required": ["then"],
                      "properties": {
                        "if": { "$ref": "#" },
                        "then": {
                          "anyOf": [{ "type": "boolean" }, { "$ref": "#" }]
                        },
                        "continue": { "type": "boolean" }
                      },
                      "additionalProperties": false,
                      "dependencies": {
                        "continue": ["if"]
                      }
                    }
                  }
                },
                "dependencies": {
                  "exclusiveMaximum": ["maximum"],
                  "exclusiveMinimum": ["minimum"],
                  "formatMaximum": ["format"],
                  "formatMinimum": ["format"],
                  "formatExclusiveMaximum": ["formatMaximum"],
                  "formatExclusiveMinimum": ["formatMinimum"]
                },
                "default": {}
              };
            }, {}], 40: [function (require, module, exports) {
              'use strict';

              var META_SCHEMA_ID = 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json';

              module.exports = {
                enable: enableV5,
                META_SCHEMA_ID: META_SCHEMA_ID
              };

              function enableV5(ajv) {
                var inlineFunctions = {
                  'switch': require('./dotjs/switch'),
                  'constant': require('./dotjs/constant'),
                  '_formatLimit': require('./dotjs/_formatLimit'),
                  'patternRequired': require('./dotjs/patternRequired')
                };

                if (ajv._opts.meta !== false) {
                  var metaSchema = require('./refs/json-schema-v5.json');
                  ajv.addMetaSchema(metaSchema, META_SCHEMA_ID);
                }
                _addKeyword('constant');
                ajv.addKeyword('contains', { type: 'array', macro: containsMacro });

                _addKeyword('formatMaximum', 'string', inlineFunctions._formatLimit);
                _addKeyword('formatMinimum', 'string', inlineFunctions._formatLimit);
                ajv.addKeyword('formatExclusiveMaximum');
                ajv.addKeyword('formatExclusiveMinimum');

                ajv.addKeyword('patternGroups'); // implemented in properties.jst
                _addKeyword('patternRequired', 'object');
                _addKeyword('switch');

                function _addKeyword(keyword, types, inlineFunc) {
                  var definition = {
                    inline: inlineFunc || inlineFunctions[keyword],
                    statements: true,
                    errors: 'full'
                  };
                  if (types) definition.type = types;
                  ajv.addKeyword(keyword, definition);
                }
              }

              function containsMacro(schema) {
                return {
                  not: { items: { not: schema } }
                };
              }
            }, { "./dotjs/_formatLimit": 13, "./dotjs/constant": 20, "./dotjs/patternRequired": 30, "./dotjs/switch": 34, "./refs/json-schema-v5.json": 39 }], 41: [function (require, module, exports) {
              (function (global) {
                /*! https://mths.be/punycode v1.4.1 by @mathias */
                ;(function (root) {

                  /** Detect free variables */
                  var freeExports = (typeof exports === 'undefined' ? 'undefined' : _typeof3(exports)) == 'object' && exports && !exports.nodeType && exports;
                  var freeModule = (typeof module === 'undefined' ? 'undefined' : _typeof3(module)) == 'object' && module && !module.nodeType && module;
                  var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof3(global)) == 'object' && global;
                  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
                    root = freeGlobal;
                  }

                  /**
                   * The `punycode` object.
                   * @name punycode
                   * @type Object
                   */
                  var punycode,


                  /** Highest positive signed 32-bit float value */
                  maxInt = 2147483647,
                      // aka. 0x7FFFFFFF or 2^31-1

                  /** Bootstring parameters */
                  base = 36,
                      tMin = 1,
                      tMax = 26,
                      skew = 38,
                      damp = 700,
                      initialBias = 72,
                      initialN = 128,
                      // 0x80
                  delimiter = '-',
                      // '\x2D'

                  /** Regular expressions */
                  regexPunycode = /^xn--/,
                      regexNonASCII = /[^\x20-\x7E]/,
                      // unprintable ASCII chars + non-ASCII chars
                  regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
                      // RFC 3490 separators

                  /** Error messages */
                  errors = {
                    'overflow': 'Overflow: input needs wider integers to process',
                    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
                    'invalid-input': 'Invalid input'
                  },


                  /** Convenience shortcuts */
                  baseMinusTMin = base - tMin,
                      floor = Math.floor,
                      stringFromCharCode = String.fromCharCode,


                  /** Temporary variable */
                  key;

                  /*--------------------------------------------------------------------------*/

                  /**
                   * A generic error utility function.
                   * @private
                   * @param {String} type The error type.
                   * @returns {Error} Throws a `RangeError` with the applicable error message.
                   */
                  function error(type) {
                    throw new RangeError(errors[type]);
                  }

                  /**
                   * A generic `Array#map` utility function.
                   * @private
                   * @param {Array} array The array to iterate over.
                   * @param {Function} callback The function that gets called for every array
                   * item.
                   * @returns {Array} A new array of values returned by the callback function.
                   */
                  function map(array, fn) {
                    var length = array.length;
                    var result = [];
                    while (length--) {
                      result[length] = fn(array[length]);
                    }
                    return result;
                  }

                  /**
                   * A simple `Array#map`-like wrapper to work with domain name strings or email
                   * addresses.
                   * @private
                   * @param {String} domain The domain name or email address.
                   * @param {Function} callback The function that gets called for every
                   * character.
                   * @returns {Array} A new string of characters returned by the callback
                   * function.
                   */
                  function mapDomain(string, fn) {
                    var parts = string.split('@');
                    var result = '';
                    if (parts.length > 1) {
                      // In email addresses, only the domain name should be punycoded. Leave
                      // the local part (i.e. everything up to `@`) intact.
                      result = parts[0] + '@';
                      string = parts[1];
                    }
                    // Avoid `split(regex)` for IE8 compatibility. See #17.
                    string = string.replace(regexSeparators, '\x2E');
                    var labels = string.split('.');
                    var encoded = map(labels, fn).join('.');
                    return result + encoded;
                  }

                  /**
                   * Creates an array containing the numeric code points of each Unicode
                   * character in the string. While JavaScript uses UCS-2 internally,
                   * this function will convert a pair of surrogate halves (each of which
                   * UCS-2 exposes as separate characters) into a single code point,
                   * matching UTF-16.
                   * @see `punycode.ucs2.encode`
                   * @see <https://mathiasbynens.be/notes/javascript-encoding>
                   * @memberOf punycode.ucs2
                   * @name decode
                   * @param {String} string The Unicode input string (UCS-2).
                   * @returns {Array} The new array of code points.
                   */
                  function ucs2decode(string) {
                    var output = [],
                        counter = 0,
                        length = string.length,
                        value,
                        extra;
                    while (counter < length) {
                      value = string.charCodeAt(counter++);
                      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                        // high surrogate, and there is a next character
                        extra = string.charCodeAt(counter++);
                        if ((extra & 0xFC00) == 0xDC00) {
                          // low surrogate
                          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                        } else {
                          // unmatched surrogate; only append this code unit, in case the next
                          // code unit is the high surrogate of a surrogate pair
                          output.push(value);
                          counter--;
                        }
                      } else {
                        output.push(value);
                      }
                    }
                    return output;
                  }

                  /**
                   * Creates a string based on an array of numeric code points.
                   * @see `punycode.ucs2.decode`
                   * @memberOf punycode.ucs2
                   * @name encode
                   * @param {Array} codePoints The array of numeric code points.
                   * @returns {String} The new Unicode string (UCS-2).
                   */
                  function ucs2encode(array) {
                    return map(array, function (value) {
                      var output = '';
                      if (value > 0xFFFF) {
                        value -= 0x10000;
                        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                        value = 0xDC00 | value & 0x3FF;
                      }
                      output += stringFromCharCode(value);
                      return output;
                    }).join('');
                  }

                  /**
                   * Converts a basic code point into a digit/integer.
                   * @see `digitToBasic()`
                   * @private
                   * @param {Number} codePoint The basic numeric code point value.
                   * @returns {Number} The numeric value of a basic code point (for use in
                   * representing integers) in the range `0` to `base - 1`, or `base` if
                   * the code point does not represent a value.
                   */
                  function basicToDigit(codePoint) {
                    if (codePoint - 48 < 10) {
                      return codePoint - 22;
                    }
                    if (codePoint - 65 < 26) {
                      return codePoint - 65;
                    }
                    if (codePoint - 97 < 26) {
                      return codePoint - 97;
                    }
                    return base;
                  }

                  /**
                   * Converts a digit/integer into a basic code point.
                   * @see `basicToDigit()`
                   * @private
                   * @param {Number} digit The numeric value of a basic code point.
                   * @returns {Number} The basic code point whose value (when used for
                   * representing integers) is `digit`, which needs to be in the range
                   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
                   * used; else, the lowercase form is used. The behavior is undefined
                   * if `flag` is non-zero and `digit` has no uppercase form.
                   */
                  function digitToBasic(digit, flag) {
                    //  0..25 map to ASCII a..z or A..Z
                    // 26..35 map to ASCII 0..9
                    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
                  }

                  /**
                   * Bias adaptation function as per section 3.4 of RFC 3492.
                   * https://tools.ietf.org/html/rfc3492#section-3.4
                   * @private
                   */
                  function adapt(delta, numPoints, firstTime) {
                    var k = 0;
                    delta = firstTime ? floor(delta / damp) : delta >> 1;
                    delta += floor(delta / numPoints);
                    for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
                      delta = floor(delta / baseMinusTMin);
                    }
                    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
                  }

                  /**
                   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
                   * symbols.
                   * @memberOf punycode
                   * @param {String} input The Punycode string of ASCII-only symbols.
                   * @returns {String} The resulting string of Unicode symbols.
                   */
                  function decode(input) {
                    // Don't use UCS-2
                    var output = [],
                        inputLength = input.length,
                        out,
                        i = 0,
                        n = initialN,
                        bias = initialBias,
                        basic,
                        j,
                        index,
                        oldi,
                        w,
                        k,
                        digit,
                        t,

                    /** Cached calculation results */
                    baseMinusT;

                    // Handle the basic code points: let `basic` be the number of input code
                    // points before the last delimiter, or `0` if there is none, then copy
                    // the first basic code points to the output.

                    basic = input.lastIndexOf(delimiter);
                    if (basic < 0) {
                      basic = 0;
                    }

                    for (j = 0; j < basic; ++j) {
                      // if it's not a basic code point
                      if (input.charCodeAt(j) >= 0x80) {
                        error('not-basic');
                      }
                      output.push(input.charCodeAt(j));
                    }

                    // Main decoding loop: start just after the last delimiter if any basic code
                    // points were copied; start at the beginning otherwise.

                    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

                      // `index` is the index of the next character to be consumed.
                      // Decode a generalized variable-length integer into `delta`,
                      // which gets added to `i`. The overflow checking is easier
                      // if we increase `i` as we go, then subtract off its starting
                      // value at the end to obtain `delta`.
                      for (oldi = i, w = 1, k = base;; /* no condition */k += base) {

                        if (index >= inputLength) {
                          error('invalid-input');
                        }

                        digit = basicToDigit(input.charCodeAt(index++));

                        if (digit >= base || digit > floor((maxInt - i) / w)) {
                          error('overflow');
                        }

                        i += digit * w;
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                        if (digit < t) {
                          break;
                        }

                        baseMinusT = base - t;
                        if (w > floor(maxInt / baseMinusT)) {
                          error('overflow');
                        }

                        w *= baseMinusT;
                      }

                      out = output.length + 1;
                      bias = adapt(i - oldi, out, oldi == 0);

                      // `i` was supposed to wrap around from `out` to `0`,
                      // incrementing `n` each time, so we'll fix that now:
                      if (floor(i / out) > maxInt - n) {
                        error('overflow');
                      }

                      n += floor(i / out);
                      i %= out;

                      // Insert `n` at position `i` of the output
                      output.splice(i++, 0, n);
                    }

                    return ucs2encode(output);
                  }

                  /**
                   * Converts a string of Unicode symbols (e.g. a domain name label) to a
                   * Punycode string of ASCII-only symbols.
                   * @memberOf punycode
                   * @param {String} input The string of Unicode symbols.
                   * @returns {String} The resulting Punycode string of ASCII-only symbols.
                   */
                  function encode(input) {
                    var n,
                        delta,
                        handledCPCount,
                        basicLength,
                        bias,
                        j,
                        m,
                        q,
                        k,
                        t,
                        currentValue,
                        output = [],

                    /** `inputLength` will hold the number of code points in `input`. */
                    inputLength,

                    /** Cached calculation results */
                    handledCPCountPlusOne,
                        baseMinusT,
                        qMinusT;

                    // Convert the input in UCS-2 to Unicode
                    input = ucs2decode(input);

                    // Cache the length
                    inputLength = input.length;

                    // Initialize the state
                    n = initialN;
                    delta = 0;
                    bias = initialBias;

                    // Handle the basic code points
                    for (j = 0; j < inputLength; ++j) {
                      currentValue = input[j];
                      if (currentValue < 0x80) {
                        output.push(stringFromCharCode(currentValue));
                      }
                    }

                    handledCPCount = basicLength = output.length;

                    // `handledCPCount` is the number of code points that have been handled;
                    // `basicLength` is the number of basic code points.

                    // Finish the basic string - if it is not empty - with a delimiter
                    if (basicLength) {
                      output.push(delimiter);
                    }

                    // Main encoding loop:
                    while (handledCPCount < inputLength) {

                      // All non-basic code points < n have been handled already. Find the next
                      // larger one:
                      for (m = maxInt, j = 0; j < inputLength; ++j) {
                        currentValue = input[j];
                        if (currentValue >= n && currentValue < m) {
                          m = currentValue;
                        }
                      }

                      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                      // but guard against overflow
                      handledCPCountPlusOne = handledCPCount + 1;
                      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                        error('overflow');
                      }

                      delta += (m - n) * handledCPCountPlusOne;
                      n = m;

                      for (j = 0; j < inputLength; ++j) {
                        currentValue = input[j];

                        if (currentValue < n && ++delta > maxInt) {
                          error('overflow');
                        }

                        if (currentValue == n) {
                          // Represent delta as a generalized variable-length integer
                          for (q = delta, k = base;; /* no condition */k += base) {
                            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                            if (q < t) {
                              break;
                            }
                            qMinusT = q - t;
                            baseMinusT = base - t;
                            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                            q = floor(qMinusT / baseMinusT);
                          }

                          output.push(stringFromCharCode(digitToBasic(q, 0)));
                          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                          delta = 0;
                          ++handledCPCount;
                        }
                      }

                      ++delta;
                      ++n;
                    }
                    return output.join('');
                  }

                  /**
                   * Converts a Punycode string representing a domain name or an email address
                   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
                   * it doesn't matter if you call it on a string that has already been
                   * converted to Unicode.
                   * @memberOf punycode
                   * @param {String} input The Punycoded domain name or email address to
                   * convert to Unicode.
                   * @returns {String} The Unicode representation of the given Punycode
                   * string.
                   */
                  function toUnicode(input) {
                    return mapDomain(input, function (string) {
                      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
                    });
                  }

                  /**
                   * Converts a Unicode string representing a domain name or an email address to
                   * Punycode. Only the non-ASCII parts of the domain name will be converted,
                   * i.e. it doesn't matter if you call it with a domain that's already in
                   * ASCII.
                   * @memberOf punycode
                   * @param {String} input The domain name or email address to convert, as a
                   * Unicode string.
                   * @returns {String} The Punycode representation of the given domain name or
                   * email address.
                   */
                  function toASCII(input) {
                    return mapDomain(input, function (string) {
                      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
                    });
                  }

                  /*--------------------------------------------------------------------------*/

                  /** Define the public API */
                  punycode = {
                    /**
                     * A string representing the current Punycode.js version number.
                     * @memberOf punycode
                     * @type String
                     */
                    'version': '1.4.1',
                    /**
                     * An object of methods to convert from JavaScript's internal character
                     * representation (UCS-2) to Unicode code points, and back.
                     * @see <https://mathiasbynens.be/notes/javascript-encoding>
                     * @memberOf punycode
                     * @type Object
                     */
                    'ucs2': {
                      'decode': ucs2decode,
                      'encode': ucs2encode
                    },
                    'decode': decode,
                    'encode': encode,
                    'toASCII': toASCII,
                    'toUnicode': toUnicode
                  };

                  /** Expose `punycode` */
                  // Some AMD build optimizers, like r.js, check for specific condition patterns
                  // like the following:
                  if (typeof define == 'function' && _typeof3(define.amd) == 'object' && define.amd) {
                    define('punycode', function () {
                      return punycode;
                    });
                  } else if (freeExports && freeModule) {
                    if (module.exports == freeExports) {
                      // in Node.js, io.js, or RingoJS v0.8.0+
                      freeModule.exports = punycode;
                    } else {
                      // in Narwhal or RingoJS v0.7.0-
                      for (key in punycode) {
                        punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
                      }
                    }
                  } else {
                    // in Rhino or a web browser
                    root.punycode = punycode;
                  }
                })(this);
              }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            }, {}], 42: [function (require, module, exports) {
              // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.

              'use strict';

              // If obj.hasOwnProperty has been overridden, then calling
              // obj.hasOwnProperty(prop) will break.
              // See: https://github.com/joyent/node/issues/1707

              function hasOwnProperty(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
              }

              module.exports = function (qs, sep, eq, options) {
                sep = sep || '&';
                eq = eq || '=';
                var obj = {};

                if (typeof qs !== 'string' || qs.length === 0) {
                  return obj;
                }

                var regexp = /\+/g;
                qs = qs.split(sep);

                var maxKeys = 1000;
                if (options && typeof options.maxKeys === 'number') {
                  maxKeys = options.maxKeys;
                }

                var len = qs.length;
                // maxKeys <= 0 means that we should not limit keys count
                if (maxKeys > 0 && len > maxKeys) {
                  len = maxKeys;
                }

                for (var i = 0; i < len; ++i) {
                  var x = qs[i].replace(regexp, '%20'),
                      idx = x.indexOf(eq),
                      kstr,
                      vstr,
                      k,
                      v;

                  if (idx >= 0) {
                    kstr = x.substr(0, idx);
                    vstr = x.substr(idx + 1);
                  } else {
                    kstr = x;
                    vstr = '';
                  }

                  k = decodeURIComponent(kstr);
                  v = decodeURIComponent(vstr);

                  if (!hasOwnProperty(obj, k)) {
                    obj[k] = v;
                  } else if (isArray(obj[k])) {
                    obj[k].push(v);
                  } else {
                    obj[k] = [obj[k], v];
                  }
                }

                return obj;
              };

              var isArray = Array.isArray || function (xs) {
                return Object.prototype.toString.call(xs) === '[object Array]';
              };
            }, {}], 43: [function (require, module, exports) {
              // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.

              'use strict';

              var stringifyPrimitive = function stringifyPrimitive(v) {
                switch (typeof v === 'undefined' ? 'undefined' : _typeof3(v)) {
                  case 'string':
                    return v;

                  case 'boolean':
                    return v ? 'true' : 'false';

                  case 'number':
                    return isFinite(v) ? v : '';

                  default:
                    return '';
                }
              };

              module.exports = function (obj, sep, eq, name) {
                sep = sep || '&';
                eq = eq || '=';
                if (obj === null) {
                  obj = undefined;
                }

                if ((typeof obj === 'undefined' ? 'undefined' : _typeof3(obj)) === 'object') {
                  return map(objectKeys(obj), function (k) {
                    var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
                    if (isArray(obj[k])) {
                      return map(obj[k], function (v) {
                        return ks + encodeURIComponent(stringifyPrimitive(v));
                      }).join(sep);
                    } else {
                      return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
                    }
                  }).join(sep);
                }

                if (!name) return '';
                return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
              };

              var isArray = Array.isArray || function (xs) {
                return Object.prototype.toString.call(xs) === '[object Array]';
              };

              function map(xs, f) {
                if (xs.map) return xs.map(f);
                var res = [];
                for (var i = 0; i < xs.length; i++) {
                  res.push(f(xs[i], i));
                }
                return res;
              }

              var objectKeys = Object.keys || function (obj) {
                var res = [];
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
                }
                return res;
              };
            }, {}], 44: [function (require, module, exports) {
              'use strict';

              exports.decode = exports.parse = require('./decode');
              exports.encode = exports.stringify = require('./encode');
            }, { "./decode": 42, "./encode": 43 }], 45: [function (require, module, exports) {
              // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.

              'use strict';

              var punycode = require('punycode');
              var util = require('./util');

              exports.parse = urlParse;
              exports.resolve = urlResolve;
              exports.resolveObject = urlResolveObject;
              exports.format = urlFormat;

              exports.Url = Url;

              function Url() {
                this.protocol = null;
                this.slashes = null;
                this.auth = null;
                this.host = null;
                this.port = null;
                this.hostname = null;
                this.hash = null;
                this.search = null;
                this.query = null;
                this.pathname = null;
                this.path = null;
                this.href = null;
              }

              // Reference: RFC 3986, RFC 1808, RFC 2396

              // define these here so at least they only have to be
              // compiled once on the first module load.
              var protocolPattern = /^([a-z0-9.+-]+:)/i,
                  portPattern = /:[0-9]*$/,


              // Special case for a simple path URL
              simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,


              // RFC 2396: characters reserved for delimiting URLs.
              // We actually just auto-escape these.
              delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],


              // RFC 2396: characters not allowed for various reasons.
              unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),


              // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
              autoEscape = ['\''].concat(unwise),

              // Characters that are never ever allowed in a hostname.
              // Note that any invalid chars are also handled, but these
              // are the ones that are *expected* to be seen, so we fast-path
              // them.
              nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
                  hostEndingChars = ['/', '?', '#'],
                  hostnameMaxLen = 255,
                  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
                  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,

              // protocols that can allow "unsafe" and "unwise" chars.
              unsafeProtocol = {
                'javascript': true,
                'javascript:': true
              },

              // protocols that never have a hostname.
              hostlessProtocol = {
                'javascript': true,
                'javascript:': true
              },

              // protocols that always contain a // bit.
              slashedProtocol = {
                'http': true,
                'https': true,
                'ftp': true,
                'gopher': true,
                'file': true,
                'http:': true,
                'https:': true,
                'ftp:': true,
                'gopher:': true,
                'file:': true
              },
                  querystring = require('querystring');

              function urlParse(url, parseQueryString, slashesDenoteHost) {
                if (url && util.isObject(url) && url instanceof Url) return url;

                var u = new Url();
                u.parse(url, parseQueryString, slashesDenoteHost);
                return u;
              }

              Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
                if (!util.isString(url)) {
                  throw new TypeError("Parameter 'url' must be a string, not " + (typeof url === 'undefined' ? 'undefined' : _typeof3(url)));
                }

                // Copy chrome, IE, opera backslash-handling behavior.
                // Back slashes before the query string get converted to forward slashes
                // See: https://code.google.com/p/chromium/issues/detail?id=25916
                var queryIndex = url.indexOf('?'),
                    splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
                    uSplit = url.split(splitter),
                    slashRegex = /\\/g;
                uSplit[0] = uSplit[0].replace(slashRegex, '/');
                url = uSplit.join(splitter);

                var rest = url;

                // trim before proceeding.
                // This is to support parse stuff like "  http://foo.com  \n"
                rest = rest.trim();

                if (!slashesDenoteHost && url.split('#').length === 1) {
                  // Try fast path regexp
                  var simplePath = simplePathPattern.exec(rest);
                  if (simplePath) {
                    this.path = rest;
                    this.href = rest;
                    this.pathname = simplePath[1];
                    if (simplePath[2]) {
                      this.search = simplePath[2];
                      if (parseQueryString) {
                        this.query = querystring.parse(this.search.substr(1));
                      } else {
                        this.query = this.search.substr(1);
                      }
                    } else if (parseQueryString) {
                      this.search = '';
                      this.query = {};
                    }
                    return this;
                  }
                }

                var proto = protocolPattern.exec(rest);
                if (proto) {
                  proto = proto[0];
                  var lowerProto = proto.toLowerCase();
                  this.protocol = lowerProto;
                  rest = rest.substr(proto.length);
                }

                // figure out if it's got a host
                // user@server is *always* interpreted as a hostname, and url
                // resolution will treat //foo/bar as host=foo,path=bar because that's
                // how the browser resolves relative URLs.
                if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
                  var slashes = rest.substr(0, 2) === '//';
                  if (slashes && !(proto && hostlessProtocol[proto])) {
                    rest = rest.substr(2);
                    this.slashes = true;
                  }
                }

                if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {

                  // there's a hostname.
                  // the first instance of /, ?, ;, or # ends the host.
                  //
                  // If there is an @ in the hostname, then non-host chars *are* allowed
                  // to the left of the last @ sign, unless some host-ending character
                  // comes *before* the @-sign.
                  // URLs are obnoxious.
                  //
                  // ex:
                  // http://a@b@c/ => user:a@b host:c
                  // http://a@b?@c => user:a host:c path:/?@c

                  // v0.12 TODO(isaacs): This is not quite how Chrome does things.
                  // Review our test case against browsers more comprehensively.

                  // find the first instance of any hostEndingChars
                  var hostEnd = -1;
                  for (var i = 0; i < hostEndingChars.length; i++) {
                    var hec = rest.indexOf(hostEndingChars[i]);
                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
                  }

                  // at this point, either we have an explicit point where the
                  // auth portion cannot go past, or the last @ char is the decider.
                  var auth, atSign;
                  if (hostEnd === -1) {
                    // atSign can be anywhere.
                    atSign = rest.lastIndexOf('@');
                  } else {
                    // atSign must be in auth portion.
                    // http://a@b/c@d => host:b auth:a path:/c@d
                    atSign = rest.lastIndexOf('@', hostEnd);
                  }

                  // Now we have a portion which is definitely the auth.
                  // Pull that off.
                  if (atSign !== -1) {
                    auth = rest.slice(0, atSign);
                    rest = rest.slice(atSign + 1);
                    this.auth = decodeURIComponent(auth);
                  }

                  // the host is the remaining to the left of the first non-host char
                  hostEnd = -1;
                  for (var i = 0; i < nonHostChars.length; i++) {
                    var hec = rest.indexOf(nonHostChars[i]);
                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
                  }
                  // if we still have not hit it, then the entire thing is a host.
                  if (hostEnd === -1) hostEnd = rest.length;

                  this.host = rest.slice(0, hostEnd);
                  rest = rest.slice(hostEnd);

                  // pull out port.
                  this.parseHost();

                  // we've indicated that there is a hostname,
                  // so even if it's empty, it has to be present.
                  this.hostname = this.hostname || '';

                  // if hostname begins with [ and ends with ]
                  // assume that it's an IPv6 address.
                  var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';

                  // validate a little.
                  if (!ipv6Hostname) {
                    var hostparts = this.hostname.split(/\./);
                    for (var i = 0, l = hostparts.length; i < l; i++) {
                      var part = hostparts[i];
                      if (!part) continue;
                      if (!part.match(hostnamePartPattern)) {
                        var newpart = '';
                        for (var j = 0, k = part.length; j < k; j++) {
                          if (part.charCodeAt(j) > 127) {
                            // we replace non-ASCII char with a temporary placeholder
                            // we need this to make sure size of hostname is not
                            // broken by replacing non-ASCII by nothing
                            newpart += 'x';
                          } else {
                            newpart += part[j];
                          }
                        }
                        // we test again with ASCII char only
                        if (!newpart.match(hostnamePartPattern)) {
                          var validParts = hostparts.slice(0, i);
                          var notHost = hostparts.slice(i + 1);
                          var bit = part.match(hostnamePartStart);
                          if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                          }
                          if (notHost.length) {
                            rest = '/' + notHost.join('.') + rest;
                          }
                          this.hostname = validParts.join('.');
                          break;
                        }
                      }
                    }
                  }

                  if (this.hostname.length > hostnameMaxLen) {
                    this.hostname = '';
                  } else {
                    // hostnames are always lower case.
                    this.hostname = this.hostname.toLowerCase();
                  }

                  if (!ipv6Hostname) {
                    // IDNA Support: Returns a punycoded representation of "domain".
                    // It only converts parts of the domain name that
                    // have non-ASCII characters, i.e. it doesn't matter if
                    // you call it with a domain that already is ASCII-only.
                    this.hostname = punycode.toASCII(this.hostname);
                  }

                  var p = this.port ? ':' + this.port : '';
                  var h = this.hostname || '';
                  this.host = h + p;
                  this.href += this.host;

                  // strip [ and ] from the hostname
                  // the host field still retains them, though
                  if (ipv6Hostname) {
                    this.hostname = this.hostname.substr(1, this.hostname.length - 2);
                    if (rest[0] !== '/') {
                      rest = '/' + rest;
                    }
                  }
                }

                // now rest is set to the post-host stuff.
                // chop off any delim chars.
                if (!unsafeProtocol[lowerProto]) {

                  // First, make 100% sure that any "autoEscape" chars get
                  // escaped, even if encodeURIComponent doesn't think they
                  // need to be.
                  for (var i = 0, l = autoEscape.length; i < l; i++) {
                    var ae = autoEscape[i];
                    if (rest.indexOf(ae) === -1) continue;
                    var esc = encodeURIComponent(ae);
                    if (esc === ae) {
                      esc = escape(ae);
                    }
                    rest = rest.split(ae).join(esc);
                  }
                }

                // chop off from the tail first.
                var hash = rest.indexOf('#');
                if (hash !== -1) {
                  // got a fragment string.
                  this.hash = rest.substr(hash);
                  rest = rest.slice(0, hash);
                }
                var qm = rest.indexOf('?');
                if (qm !== -1) {
                  this.search = rest.substr(qm);
                  this.query = rest.substr(qm + 1);
                  if (parseQueryString) {
                    this.query = querystring.parse(this.query);
                  }
                  rest = rest.slice(0, qm);
                } else if (parseQueryString) {
                  // no query string, but parseQueryString still requested
                  this.search = '';
                  this.query = {};
                }
                if (rest) this.pathname = rest;
                if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
                  this.pathname = '/';
                }

                //to support http.request
                if (this.pathname || this.search) {
                  var p = this.pathname || '';
                  var s = this.search || '';
                  this.path = p + s;
                }

                // finally, reconstruct the href based on what has been validated.
                this.href = this.format();
                return this;
              };

              // format a parsed object into a url string
              function urlFormat(obj) {
                // ensure it's an object, and not a string url.
                // If it's an obj, this is a no-op.
                // this way, you can call url_format() on strings
                // to clean up potentially wonky urls.
                if (util.isString(obj)) obj = urlParse(obj);
                if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
                return obj.format();
              }

              Url.prototype.format = function () {
                var auth = this.auth || '';
                if (auth) {
                  auth = encodeURIComponent(auth);
                  auth = auth.replace(/%3A/i, ':');
                  auth += '@';
                }

                var protocol = this.protocol || '',
                    pathname = this.pathname || '',
                    hash = this.hash || '',
                    host = false,
                    query = '';

                if (this.host) {
                  host = auth + this.host;
                } else if (this.hostname) {
                  host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
                  if (this.port) {
                    host += ':' + this.port;
                  }
                }

                if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
                  query = querystring.stringify(this.query);
                }

                var search = this.search || query && '?' + query || '';

                if (protocol && protocol.substr(-1) !== ':') protocol += ':';

                // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
                // unless they had them to begin with.
                if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
                  host = '//' + (host || '');
                  if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
                } else if (!host) {
                  host = '';
                }

                if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
                if (search && search.charAt(0) !== '?') search = '?' + search;

                pathname = pathname.replace(/[?#]/g, function (match) {
                  return encodeURIComponent(match);
                });
                search = search.replace('#', '%23');

                return protocol + host + pathname + search + hash;
              };

              function urlResolve(source, relative) {
                return urlParse(source, false, true).resolve(relative);
              }

              Url.prototype.resolve = function (relative) {
                return this.resolveObject(urlParse(relative, false, true)).format();
              };

              function urlResolveObject(source, relative) {
                if (!source) return relative;
                return urlParse(source, false, true).resolveObject(relative);
              }

              Url.prototype.resolveObject = function (relative) {
                if (util.isString(relative)) {
                  var rel = new Url();
                  rel.parse(relative, false, true);
                  relative = rel;
                }

                var result = new Url();
                var tkeys = Object.keys(this);
                for (var tk = 0; tk < tkeys.length; tk++) {
                  var tkey = tkeys[tk];
                  result[tkey] = this[tkey];
                }

                // hash is always overridden, no matter what.
                // even href="" will remove it.
                result.hash = relative.hash;

                // if the relative url is empty, then there's nothing left to do here.
                if (relative.href === '') {
                  result.href = result.format();
                  return result;
                }

                // hrefs like //foo/bar always cut to the protocol.
                if (relative.slashes && !relative.protocol) {
                  // take everything except the protocol from relative
                  var rkeys = Object.keys(relative);
                  for (var rk = 0; rk < rkeys.length; rk++) {
                    var rkey = rkeys[rk];
                    if (rkey !== 'protocol') result[rkey] = relative[rkey];
                  }

                  //urlParse appends trailing / to urls like http://www.example.com
                  if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
                    result.path = result.pathname = '/';
                  }

                  result.href = result.format();
                  return result;
                }

                if (relative.protocol && relative.protocol !== result.protocol) {
                  // if it's a known url protocol, then changing
                  // the protocol does weird things
                  // first, if it's not file:, then we MUST have a host,
                  // and if there was a path
                  // to begin with, then we MUST have a path.
                  // if it is file:, then the host is dropped,
                  // because that's known to be hostless.
                  // anything else is assumed to be absolute.
                  if (!slashedProtocol[relative.protocol]) {
                    var keys = Object.keys(relative);
                    for (var v = 0; v < keys.length; v++) {
                      var k = keys[v];
                      result[k] = relative[k];
                    }
                    result.href = result.format();
                    return result;
                  }

                  result.protocol = relative.protocol;
                  if (!relative.host && !hostlessProtocol[relative.protocol]) {
                    var relPath = (relative.pathname || '').split('/');
                    while (relPath.length && !(relative.host = relPath.shift())) {}
                    if (!relative.host) relative.host = '';
                    if (!relative.hostname) relative.hostname = '';
                    if (relPath[0] !== '') relPath.unshift('');
                    if (relPath.length < 2) relPath.unshift('');
                    result.pathname = relPath.join('/');
                  } else {
                    result.pathname = relative.pathname;
                  }
                  result.search = relative.search;
                  result.query = relative.query;
                  result.host = relative.host || '';
                  result.auth = relative.auth;
                  result.hostname = relative.hostname || relative.host;
                  result.port = relative.port;
                  // to support http.request
                  if (result.pathname || result.search) {
                    var p = result.pathname || '';
                    var s = result.search || '';
                    result.path = p + s;
                  }
                  result.slashes = result.slashes || relative.slashes;
                  result.href = result.format();
                  return result;
                }

                var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
                    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
                    mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
                    removeAllDots = mustEndAbs,
                    srcPath = result.pathname && result.pathname.split('/') || [],
                    relPath = relative.pathname && relative.pathname.split('/') || [],
                    psychotic = result.protocol && !slashedProtocol[result.protocol];

                // if the url is a non-slashed url, then relative
                // links like ../.. should be able
                // to crawl up to the hostname, as well.  This is strange.
                // result.protocol has already been set by now.
                // Later on, put the first path part into the host field.
                if (psychotic) {
                  result.hostname = '';
                  result.port = null;
                  if (result.host) {
                    if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
                  }
                  result.host = '';
                  if (relative.protocol) {
                    relative.hostname = null;
                    relative.port = null;
                    if (relative.host) {
                      if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
                    }
                    relative.host = null;
                  }
                  mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
                }

                if (isRelAbs) {
                  // it's absolute.
                  result.host = relative.host || relative.host === '' ? relative.host : result.host;
                  result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
                  result.search = relative.search;
                  result.query = relative.query;
                  srcPath = relPath;
                  // fall through to the dot-handling below.
                } else if (relPath.length) {
                  // it's relative
                  // throw away the existing file, and take the new path instead.
                  if (!srcPath) srcPath = [];
                  srcPath.pop();
                  srcPath = srcPath.concat(relPath);
                  result.search = relative.search;
                  result.query = relative.query;
                } else if (!util.isNullOrUndefined(relative.search)) {
                  // just pull out the search.
                  // like href='?foo'.
                  // Put this after the other two cases because it simplifies the booleans
                  if (psychotic) {
                    result.hostname = result.host = srcPath.shift();
                    //occationaly the auth can get stuck only in host
                    //this especially happens in cases like
                    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
                    if (authInHost) {
                      result.auth = authInHost.shift();
                      result.host = result.hostname = authInHost.shift();
                    }
                  }
                  result.search = relative.search;
                  result.query = relative.query;
                  //to support http.request
                  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
                    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
                  }
                  result.href = result.format();
                  return result;
                }

                if (!srcPath.length) {
                  // no path at all.  easy.
                  // we've already handled the other stuff above.
                  result.pathname = null;
                  //to support http.request
                  if (result.search) {
                    result.path = '/' + result.search;
                  } else {
                    result.path = null;
                  }
                  result.href = result.format();
                  return result;
                }

                // if a url ENDs in . or .., then it must get a trailing slash.
                // however, if it ends in anything else non-slashy,
                // then it must NOT get a trailing slash.
                var last = srcPath.slice(-1)[0];
                var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';

                // strip single dots, resolve double dots to parent dir
                // if the path tries to go above the root, `up` ends up > 0
                var up = 0;
                for (var i = srcPath.length; i >= 0; i--) {
                  last = srcPath[i];
                  if (last === '.') {
                    srcPath.splice(i, 1);
                  } else if (last === '..') {
                    srcPath.splice(i, 1);
                    up++;
                  } else if (up) {
                    srcPath.splice(i, 1);
                    up--;
                  }
                }

                // if the path is allowed to go above the root, restore leading ..s
                if (!mustEndAbs && !removeAllDots) {
                  for (; up--; up) {
                    srcPath.unshift('..');
                  }
                }

                if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
                  srcPath.unshift('');
                }

                if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
                  srcPath.push('');
                }

                var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';

                // put the host back
                if (psychotic) {
                  result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
                  //occationaly the auth can get stuck only in host
                  //this especially happens in cases like
                  //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                  var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
                  if (authInHost) {
                    result.auth = authInHost.shift();
                    result.host = result.hostname = authInHost.shift();
                  }
                }

                mustEndAbs = mustEndAbs || result.host && srcPath.length;

                if (mustEndAbs && !isAbsolute) {
                  srcPath.unshift('');
                }

                if (!srcPath.length) {
                  result.pathname = null;
                  result.path = null;
                } else {
                  result.pathname = srcPath.join('/');
                }

                //to support request.http
                if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
                  result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
                }
                result.auth = relative.auth || result.auth;
                result.slashes = result.slashes || relative.slashes;
                result.href = result.format();
                return result;
              };

              Url.prototype.parseHost = function () {
                var host = this.host;
                var port = portPattern.exec(host);
                if (port) {
                  port = port[0];
                  if (port !== ':') {
                    this.port = port.substr(1);
                  }
                  host = host.substr(0, host.length - port.length);
                }
                if (host) this.hostname = host;
              };
            }, { "./util": 46, "punycode": 41, "querystring": 44 }], 46: [function (require, module, exports) {
              'use strict';

              module.exports = {
                isString: function isString(arg) {
                  return typeof arg === 'string';
                },
                isObject: function isObject(arg) {
                  return (typeof arg === 'undefined' ? 'undefined' : _typeof3(arg)) === 'object' && arg !== null;
                },
                isNull: function isNull(arg) {
                  return arg === null;
                },
                isNullOrUndefined: function isNullOrUndefined(arg) {
                  return arg == null;
                }
              };
            }, {}], 47: [function (require, module, exports) {

              /**
               * slice() reference.
               */

              var slice = Array.prototype.slice;

              /**
               * Expose `co`.
               */

              module.exports = co['default'] = co.co = co;

              /**
               * Wrap the given generator `fn` into a
               * function that returns a promise.
               * This is a separate function so that
               * every `co()` call doesn't create a new,
               * unnecessary closure.
               *
               * @param {GeneratorFunction} fn
               * @return {Function}
               * @api public
               */

              co.wrap = function (fn) {
                createPromise.__generatorFunction__ = fn;
                return createPromise;
                function createPromise() {
                  return co.call(this, fn.apply(this, arguments));
                }
              };

              /**
               * Execute the generator function or a generator
               * and return a promise.
               *
               * @param {Function} fn
               * @return {Promise}
               * @api public
               */

              function co(gen) {
                var ctx = this;
                var args = slice.call(arguments, 1);

                // we wrap everything in a promise to avoid promise chaining,
                // which leads to memory leak errors.
                // see https://github.com/tj/co/issues/180
                return new Promise(function (resolve, reject) {
                  if (typeof gen === 'function') gen = gen.apply(ctx, args);
                  if (!gen || typeof gen.next !== 'function') return resolve(gen);

                  onFulfilled();

                  /**
                   * @param {Mixed} res
                   * @return {Promise}
                   * @api private
                   */

                  function onFulfilled(res) {
                    var ret;
                    try {
                      ret = gen.next(res);
                    } catch (e) {
                      return reject(e);
                    }
                    next(ret);
                  }

                  /**
                   * @param {Error} err
                   * @return {Promise}
                   * @api private
                   */

                  function onRejected(err) {
                    var ret;
                    try {
                      ret = gen.throw(err);
                    } catch (e) {
                      return reject(e);
                    }
                    next(ret);
                  }

                  /**
                   * Get the next value in the generator,
                   * return a promise.
                   *
                   * @param {Object} ret
                   * @return {Promise}
                   * @api private
                   */

                  function next(ret) {
                    if (ret.done) return resolve(ret.value);
                    var value = toPromise.call(ctx, ret.value);
                    if (value && isPromise(value)) return value.then(onFulfilled, onRejected);
                    return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, ' + 'but the following object was passed: "' + String(ret.value) + '"'));
                  }
                });
              }

              /**
               * Convert a `yield`ed value into a promise.
               *
               * @param {Mixed} obj
               * @return {Promise}
               * @api private
               */

              function toPromise(obj) {
                if (!obj) return obj;
                if (isPromise(obj)) return obj;
                if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);
                if ('function' == typeof obj) return thunkToPromise.call(this, obj);
                if (Array.isArray(obj)) return arrayToPromise.call(this, obj);
                if (isObject(obj)) return objectToPromise.call(this, obj);
                return obj;
              }

              /**
               * Convert a thunk to a promise.
               *
               * @param {Function}
               * @return {Promise}
               * @api private
               */

              function thunkToPromise(fn) {
                var ctx = this;
                return new Promise(function (resolve, reject) {
                  fn.call(ctx, function (err, res) {
                    if (err) return reject(err);
                    if (arguments.length > 2) res = slice.call(arguments, 1);
                    resolve(res);
                  });
                });
              }

              /**
               * Convert an array of "yieldables" to a promise.
               * Uses `Promise.all()` internally.
               *
               * @param {Array} obj
               * @return {Promise}
               * @api private
               */

              function arrayToPromise(obj) {
                return Promise.all(obj.map(toPromise, this));
              }

              /**
               * Convert an object of "yieldables" to a promise.
               * Uses `Promise.all()` internally.
               *
               * @param {Object} obj
               * @return {Promise}
               * @api private
               */

              function objectToPromise(obj) {
                var results = new obj.constructor();
                var keys = Object.keys(obj);
                var promises = [];
                for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  var promise = toPromise.call(this, obj[key]);
                  if (promise && isPromise(promise)) defer(promise, key);else results[key] = obj[key];
                }
                return Promise.all(promises).then(function () {
                  return results;
                });

                function defer(promise, key) {
                  // predefine the key in the result
                  results[key] = undefined;
                  promises.push(promise.then(function (res) {
                    results[key] = res;
                  }));
                }
              }

              /**
               * Check if `obj` is a promise.
               *
               * @param {Object} obj
               * @return {Boolean}
               * @api private
               */

              function isPromise(obj) {
                return 'function' == typeof obj.then;
              }

              /**
               * Check if `obj` is a generator.
               *
               * @param {Mixed} obj
               * @return {Boolean}
               * @api private
               */

              function isGenerator(obj) {
                return 'function' == typeof obj.next && 'function' == typeof obj.throw;
              }

              /**
               * Check if `obj` is a generator function.
               *
               * @param {Mixed} obj
               * @return {Boolean}
               * @api private
               */
              function isGeneratorFunction(obj) {
                var constructor = obj.constructor;
                if (!constructor) return false;
                if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;
                return isGenerator(constructor.prototype);
              }

              /**
               * Check for plain object.
               *
               * @param {Mixed} val
               * @return {Boolean}
               * @api private
               */

              function isObject(val) {
                return Object == val.constructor;
              }
            }, {}], 48: [function (require, module, exports) {
              var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');

              module.exports = function (obj, opts) {
                if (!opts) opts = {};
                if (typeof opts === 'function') opts = { cmp: opts };
                var space = opts.space || '';
                if (typeof space === 'number') space = Array(space + 1).join(' ');
                var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;
                var replacer = opts.replacer || function (key, value) {
                  return value;
                };

                var cmp = opts.cmp && function (f) {
                  return function (node) {
                    return function (a, b) {
                      var aobj = { key: a, value: node[a] };
                      var bobj = { key: b, value: node[b] };
                      return f(aobj, bobj);
                    };
                  };
                }(opts.cmp);

                var seen = [];
                return function stringify(parent, key, node, level) {
                  var indent = space ? '\n' + new Array(level + 1).join(space) : '';
                  var colonSeparator = space ? ': ' : ':';

                  if (node && node.toJSON && typeof node.toJSON === 'function') {
                    node = node.toJSON();
                  }

                  node = replacer.call(parent, key, node);

                  if (node === undefined) {
                    return;
                  }
                  if ((typeof node === 'undefined' ? 'undefined' : _typeof3(node)) !== 'object' || node === null) {
                    return json.stringify(node);
                  }
                  if (isArray(node)) {
                    var out = [];
                    for (var i = 0; i < node.length; i++) {
                      var item = stringify(node, i, node[i], level + 1) || json.stringify(null);
                      out.push(indent + space + item);
                    }
                    return '[' + out.join(',') + indent + ']';
                  } else {
                    if (seen.indexOf(node) !== -1) {
                      if (cycles) return json.stringify('__cycle__');
                      throw new TypeError('Converting circular structure to JSON');
                    } else seen.push(node);

                    var keys = objectKeys(node).sort(cmp && cmp(node));
                    var out = [];
                    for (var i = 0; i < keys.length; i++) {
                      var key = keys[i];
                      var value = stringify(node, key, node[key], level + 1);

                      if (!value) continue;

                      var keyValue = json.stringify(key) + colonSeparator + value;
                      ;
                      out.push(indent + space + keyValue);
                    }
                    seen.splice(seen.indexOf(node), 1);
                    return '{' + out.join(',') + indent + '}';
                  }
                }({ '': obj }, '', obj, 0);
              };

              var isArray = Array.isArray || function (x) {
                return {}.toString.call(x) === '[object Array]';
              };

              var objectKeys = Object.keys || function (obj) {
                var has = Object.prototype.hasOwnProperty || function () {
                  return true;
                };
                var keys = [];
                for (var key in obj) {
                  if (has.call(obj, key)) keys.push(key);
                }
                return keys;
              };
            }, { "jsonify": 49 }], 49: [function (require, module, exports) {
              exports.parse = require('./lib/parse');
              exports.stringify = require('./lib/stringify');
            }, { "./lib/parse": 50, "./lib/stringify": 51 }], 50: [function (require, module, exports) {
              var at,
                  // The index of the current character
              ch,
                  // The current character
              escapee = {
                '"': '"',
                '\\': '\\',
                '/': '/',
                b: '\b',
                f: '\f',
                n: '\n',
                r: '\r',
                t: '\t'
              },
                  text,
                  error = function error(m) {
                // Call error when something is wrong.
                throw {
                  name: 'SyntaxError',
                  message: m,
                  at: at,
                  text: text
                };
              },
                  next = function next(c) {
                // If a c parameter is provided, verify that it matches the current character.
                if (c && c !== ch) {
                  error("Expected '" + c + "' instead of '" + ch + "'");
                }

                // Get the next character. When there are no more characters,
                // return the empty string.

                ch = text.charAt(at);
                at += 1;
                return ch;
              },
                  number = function number() {
                // Parse a number value.
                var number,
                    string = '';

                if (ch === '-') {
                  string = '-';
                  next('-');
                }
                while (ch >= '0' && ch <= '9') {
                  string += ch;
                  next();
                }
                if (ch === '.') {
                  string += '.';
                  while (next() && ch >= '0' && ch <= '9') {
                    string += ch;
                  }
                }
                if (ch === 'e' || ch === 'E') {
                  string += ch;
                  next();
                  if (ch === '-' || ch === '+') {
                    string += ch;
                    next();
                  }
                  while (ch >= '0' && ch <= '9') {
                    string += ch;
                    next();
                  }
                }
                number = +string;
                if (!isFinite(number)) {
                  error("Bad number");
                } else {
                  return number;
                }
              },
                  string = function string() {
                // Parse a string value.
                var hex,
                    i,
                    string = '',
                    uffff;

                // When parsing for string values, we must look for " and \ characters.
                if (ch === '"') {
                  while (next()) {
                    if (ch === '"') {
                      next();
                      return string;
                    } else if (ch === '\\') {
                      next();
                      if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                          hex = parseInt(next(), 16);
                          if (!isFinite(hex)) {
                            break;
                          }
                          uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                      } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                      } else {
                        break;
                      }
                    } else {
                      string += ch;
                    }
                  }
                }
                error("Bad string");
              },
                  white = function white() {

                // Skip whitespace.

                while (ch && ch <= ' ') {
                  next();
                }
              },
                  word = function word() {

                // true, false, or null.

                switch (ch) {
                  case 't':
                    next('t');
                    next('r');
                    next('u');
                    next('e');
                    return true;
                  case 'f':
                    next('f');
                    next('a');
                    next('l');
                    next('s');
                    next('e');
                    return false;
                  case 'n':
                    next('n');
                    next('u');
                    next('l');
                    next('l');
                    return null;
                }
                error("Unexpected '" + ch + "'");
              },
                  value,
                  // Place holder for the value function.

              array = function array() {

                // Parse an array value.

                var array = [];

                if (ch === '[') {
                  next('[');
                  white();
                  if (ch === ']') {
                    next(']');
                    return array; // empty array
                  }
                  while (ch) {
                    array.push(value());
                    white();
                    if (ch === ']') {
                      next(']');
                      return array;
                    }
                    next(',');
                    white();
                  }
                }
                error("Bad array");
              },
                  object = function object() {

                // Parse an object value.

                var key,
                    object = {};

                if (ch === '{') {
                  next('{');
                  white();
                  if (ch === '}') {
                    next('}');
                    return object; // empty object
                  }
                  while (ch) {
                    key = string();
                    white();
                    next(':');
                    if (Object.hasOwnProperty.call(object, key)) {
                      error('Duplicate key "' + key + '"');
                    }
                    object[key] = value();
                    white();
                    if (ch === '}') {
                      next('}');
                      return object;
                    }
                    next(',');
                    white();
                  }
                }
                error("Bad object");
              };

              value = function value() {

                // Parse a JSON value. It could be an object, an array, a string, a number,
                // or a word.

                white();
                switch (ch) {
                  case '{':
                    return object();
                  case '[':
                    return array();
                  case '"':
                    return string();
                  case '-':
                    return number();
                  default:
                    return ch >= '0' && ch <= '9' ? number() : word();
                }
              };

              // Return the json_parse function. It will have access to all of the above
              // functions and variables.

              module.exports = function (source, reviver) {
                var result;

                text = source;
                at = 0;
                ch = ' ';
                result = value();
                white();
                if (ch) {
                  error("Syntax error");
                }

                // If there is a reviver function, we recursively walk the new structure,
                // passing each name/value pair to the reviver function for possible
                // transformation, starting with a temporary root object that holds the result
                // in an empty key. If there is not a reviver function, we simply return the
                // result.

                return typeof reviver === 'function' ? function walk(holder, key) {
                  var k,
                      v,
                      value = holder[key];
                  if (value && (typeof value === 'undefined' ? 'undefined' : _typeof3(value)) === 'object') {
                    for (k in value) {
                      if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = walk(value, k);
                        if (v !== undefined) {
                          value[k] = v;
                        } else {
                          delete value[k];
                        }
                      }
                    }
                  }
                  return reviver.call(holder, key, value);
                }({ '': result }, '') : result;
              };
            }, {}], 51: [function (require, module, exports) {
              var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                  escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                  gap,
                  indent,
                  meta = { // table of character substitutions
                '\b': '\\b',
                '\t': '\\t',
                '\n': '\\n',
                '\f': '\\f',
                '\r': '\\r',
                '"': '\\"',
                '\\': '\\\\'
              },
                  rep;

              function quote(string) {
                // If the string contains no control characters, no quote characters, and no
                // backslash characters, then we can safely slap some quotes around it.
                // Otherwise we must also replace the offending characters with safe escape
                // sequences.

                escapable.lastIndex = 0;
                return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
                  var c = meta[a];
                  return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                }) + '"' : '"' + string + '"';
              }

              function str(key, holder) {
                // Produce a string from holder[key].
                var i,
                    // The loop counter.
                k,
                    // The member key.
                v,
                    // The member value.
                length,
                    mind = gap,
                    partial,
                    value = holder[key];

                // If the value has a toJSON method, call it to obtain a replacement value.
                if (value && (typeof value === 'undefined' ? 'undefined' : _typeof3(value)) === 'object' && typeof value.toJSON === 'function') {
                  value = value.toJSON(key);
                }

                // If we were called with a replacer function, then call the replacer to
                // obtain a replacement value.
                if (typeof rep === 'function') {
                  value = rep.call(holder, key, value);
                }

                // What happens next depends on the value's type.
                switch (typeof value === 'undefined' ? 'undefined' : _typeof3(value)) {
                  case 'string':
                    return quote(value);

                  case 'number':
                    // JSON numbers must be finite. Encode non-finite numbers as null.
                    return isFinite(value) ? String(value) : 'null';

                  case 'boolean':
                  case 'null':
                    // If the value is a boolean or null, convert it to a string. Note:
                    // typeof null does not produce 'null'. The case is included here in
                    // the remote chance that this gets fixed someday.
                    return String(value);

                  case 'object':
                    if (!value) return 'null';
                    gap += indent;
                    partial = [];

                    // Array.isArray
                    if (Object.prototype.toString.apply(value) === '[object Array]') {
                      length = value.length;
                      for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                      }

                      // Join all of the elements together, separated with commas, and
                      // wrap them in brackets.
                      v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                      gap = mind;
                      return v;
                    }

                    // If the replacer is an array, use it to select the members to be
                    // stringified.
                    if (rep && (typeof rep === 'undefined' ? 'undefined' : _typeof3(rep)) === 'object') {
                      length = rep.length;
                      for (i = 0; i < length; i += 1) {
                        k = rep[i];
                        if (typeof k === 'string') {
                          v = str(k, value);
                          if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                        }
                      }
                    } else {
                      // Otherwise, iterate through all of the keys in the object.
                      for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                          v = str(k, value);
                          if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                          }
                        }
                      }
                    }

                    // Join all of the member texts together, separated with commas,
                    // and wrap them in braces.

                    v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
                    gap = mind;
                    return v;
                }
              }

              module.exports = function (value, replacer, space) {
                var i;
                gap = '';
                indent = '';

                // If the space parameter is a number, make an indent string containing that
                // many spaces.
                if (typeof space === 'number') {
                  for (i = 0; i < space; i += 1) {
                    indent += ' ';
                  }
                }
                // If the space parameter is a string, it will be used as the indent string.
                else if (typeof space === 'string') {
                    indent = space;
                  }

                // If there is a replacer, it must be a function or an array.
                // Otherwise, throw an error.
                rep = replacer;
                if (replacer && typeof replacer !== 'function' && ((typeof replacer === 'undefined' ? 'undefined' : _typeof3(replacer)) !== 'object' || typeof replacer.length !== 'number')) {
                  throw new Error('JSON.stringify');
                }

                // Make a fake root object containing our value under the key of ''.
                // Return the result of stringifying the value.
                return str('', { '': value });
              };
            }, {}], "ajv": [function (require, module, exports) {
              'use strict';

              var compileSchema = require('./compile'),
                  resolve = require('./compile/resolve'),
                  Cache = require('./cache'),
                  SchemaObject = require('./compile/schema_obj'),
                  stableStringify = require('json-stable-stringify'),
                  formats = require('./compile/formats'),
                  rules = require('./compile/rules'),
                  v5 = require('./v5'),
                  util = require('./compile/util'),
                  async = require('./async'),
                  co = require('co');

              module.exports = Ajv;

              Ajv.prototype.compileAsync = async.compile;

              var customKeyword = require('./keyword');
              Ajv.prototype.addKeyword = customKeyword.add;
              Ajv.prototype.getKeyword = customKeyword.get;
              Ajv.prototype.removeKeyword = customKeyword.remove;
              Ajv.ValidationError = require('./compile/validation_error');

              var META_SCHEMA_ID = 'http://json-schema.org/draft-04/schema';
              var SCHEMA_URI_FORMAT = /^(?:(?:[a-z][a-z0-9+-.]*:)?\/\/)?[^\s]*$/i;
              function SCHEMA_URI_FORMAT_FUNC(str) {
                return SCHEMA_URI_FORMAT.test(str);
              }

              var META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes'];

              /**
               * Creates validator instance.
               * Usage: `Ajv(opts)`
               * @param {Object} opts optional options
               * @return {Object} ajv instance
               */
              function Ajv(opts) {
                if (!(this instanceof Ajv)) return new Ajv(opts);
                var self = this;

                opts = this._opts = util.copy(opts) || {};
                this._schemas = {};
                this._refs = {};
                this._fragments = {};
                this._formats = formats(opts.format);
                this._cache = opts.cache || new Cache();
                this._loadingSchemas = {};
                this._compilations = [];
                this.RULES = rules();

                // this is done on purpose, so that methods are bound to the instance
                // (without using bind) so that they can be used without the instance
                this.validate = validate;
                this.compile = compile;
                this.addSchema = addSchema;
                this.addMetaSchema = addMetaSchema;
                this.validateSchema = validateSchema;
                this.getSchema = getSchema;
                this.removeSchema = removeSchema;
                this.addFormat = addFormat;
                this.errorsText = errorsText;

                this._addSchema = _addSchema;
                this._compile = _compile;

                opts.loopRequired = opts.loopRequired || Infinity;
                if (opts.async || opts.transpile) async.setup(opts);
                if (opts.beautify === true) opts.beautify = { indent_size: 2 };
                if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
                this._metaOpts = getMetaSchemaOptions();

                if (opts.formats) addInitialFormats();
                addDraft4MetaSchema();
                if (opts.v5) v5.enable(this);
                if (_typeof3(opts.meta) == 'object') addMetaSchema(opts.meta);
                addInitialSchemas();

                /**
                 * Validate data using schema
                 * Schema will be compiled and cached (using serialized JSON as key. [json-stable-stringify](https://github.com/substack/json-stable-stringify) is used to serialize.
                 * @param  {String|Object} schemaKeyRef key, ref or schema object
                 * @param  {Any} data to be validated
                 * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
                 */
                function validate(schemaKeyRef, data) {
                  var v;
                  if (typeof schemaKeyRef == 'string') {
                    v = getSchema(schemaKeyRef);
                    if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
                  } else {
                    var schemaObj = _addSchema(schemaKeyRef);
                    v = schemaObj.validate || _compile(schemaObj);
                  }

                  var valid = v(data);
                  if (v.$async === true) return self._opts.async == '*' ? co(valid) : valid;
                  self.errors = v.errors;
                  return valid;
                }

                /**
                 * Create validating function for passed schema.
                 * @param  {Object} schema schema object
                 * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
                 * @return {Function} validating function
                 */
                function compile(schema, _meta) {
                  var schemaObj = _addSchema(schema, undefined, _meta);
                  return schemaObj.validate || _compile(schemaObj);
                }

                /**
                 * Adds schema to the instance.
                 * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
                 * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
                 * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
                 * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
                 */
                function addSchema(schema, key, _skipValidation, _meta) {
                  if (Array.isArray(schema)) {
                    for (var i = 0; i < schema.length; i++) {
                      addSchema(schema[i], undefined, _skipValidation, _meta);
                    }return;
                  }
                  // can key/id have # inside?
                  key = resolve.normalizeId(key || schema.id);
                  checkUnique(key);
                  self._schemas[key] = _addSchema(schema, _skipValidation, _meta, true);
                }

                /**
                 * Add schema that will be used to validate other schemas
                 * options in META_IGNORE_OPTIONS are alway set to false
                 * @param {Object} schema schema object
                 * @param {String} key optional schema key
                 * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
                 */
                function addMetaSchema(schema, key, skipValidation) {
                  addSchema(schema, key, skipValidation, true);
                }

                /**
                 * Validate schema
                 * @param {Object} schema schema to validate
                 * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
                 * @return {Boolean} true if schema is valid
                 */
                function validateSchema(schema, throwOrLogError) {
                  var $schema = schema.$schema || self._opts.defaultMeta || defaultMeta();
                  var currentUriFormat = self._formats.uri;
                  self._formats.uri = typeof currentUriFormat == 'function' ? SCHEMA_URI_FORMAT_FUNC : SCHEMA_URI_FORMAT;
                  var valid;
                  try {
                    valid = validate($schema, schema);
                  } finally {
                    self._formats.uri = currentUriFormat;
                  }
                  if (!valid && throwOrLogError) {
                    var message = 'schema is invalid: ' + errorsText();
                    if (self._opts.validateSchema == 'log') console.error(message);else throw new Error(message);
                  }
                  return valid;
                }

                function defaultMeta() {
                  var meta = self._opts.meta;
                  self._opts.defaultMeta = (typeof meta === 'undefined' ? 'undefined' : _typeof3(meta)) == 'object' ? meta.id || meta : self._opts.v5 ? v5.META_SCHEMA_ID : META_SCHEMA_ID;
                  return self._opts.defaultMeta;
                }

                /**
                 * Get compiled schema from the instance by `key` or `ref`.
                 * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
                 * @return {Function} schema validating function (with property `schema`).
                 */
                function getSchema(keyRef) {
                  var schemaObj = _getSchemaObj(keyRef);
                  switch (typeof schemaObj === 'undefined' ? 'undefined' : _typeof3(schemaObj)) {
                    case 'object':
                      return schemaObj.validate || _compile(schemaObj);
                    case 'string':
                      return getSchema(schemaObj);
                    case 'undefined':
                      return _getSchemaFragment(keyRef);
                  }
                }

                function _getSchemaFragment(ref) {
                  var res = resolve.schema.call(self, { schema: {} }, ref);
                  if (res) {
                    var schema = res.schema,
                        root = res.root,
                        baseId = res.baseId;
                    var v = compileSchema.call(self, schema, root, undefined, baseId);
                    self._fragments[ref] = new SchemaObject({
                      ref: ref,
                      fragment: true,
                      schema: schema,
                      root: root,
                      baseId: baseId,
                      validate: v
                    });
                    return v;
                  }
                }

                function _getSchemaObj(keyRef) {
                  keyRef = resolve.normalizeId(keyRef);
                  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
                }

                /**
                 * Remove cached schema(s).
                 * If no parameter is passed all schemas but meta-schemas are removed.
                 * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
                 * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
                 * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
                 */
                function removeSchema(schemaKeyRef) {
                  if (schemaKeyRef instanceof RegExp) {
                    _removeAllSchemas(self._schemas, schemaKeyRef);
                    _removeAllSchemas(self._refs, schemaKeyRef);
                    return;
                  }
                  switch (typeof schemaKeyRef === 'undefined' ? 'undefined' : _typeof3(schemaKeyRef)) {
                    case 'undefined':
                      _removeAllSchemas(self._schemas);
                      _removeAllSchemas(self._refs);
                      self._cache.clear();
                      return;
                    case 'string':
                      var schemaObj = _getSchemaObj(schemaKeyRef);
                      if (schemaObj) self._cache.del(schemaObj.jsonStr);
                      delete self._schemas[schemaKeyRef];
                      delete self._refs[schemaKeyRef];
                      return;
                    case 'object':
                      var jsonStr = stableStringify(schemaKeyRef);
                      self._cache.del(jsonStr);
                      var id = schemaKeyRef.id;
                      if (id) {
                        id = resolve.normalizeId(id);
                        delete self._schemas[id];
                        delete self._refs[id];
                      }
                  }
                }

                function _removeAllSchemas(schemas, regex) {
                  for (var keyRef in schemas) {
                    var schemaObj = schemas[keyRef];
                    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
                      self._cache.del(schemaObj.jsonStr);
                      delete schemas[keyRef];
                    }
                  }
                }

                function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
                  if ((typeof schema === 'undefined' ? 'undefined' : _typeof3(schema)) != 'object') throw new Error('schema should be object');
                  var jsonStr = stableStringify(schema);
                  var cached = self._cache.get(jsonStr);
                  if (cached) return cached;

                  shouldAddSchema = shouldAddSchema || self._opts.addUsedSchema !== false;

                  var id = resolve.normalizeId(schema.id);
                  if (id && shouldAddSchema) checkUnique(id);

                  var willValidate = self._opts.validateSchema !== false && !skipValidation;
                  var recursiveMeta;
                  if (willValidate && !(recursiveMeta = schema.id && schema.id == schema.$schema)) validateSchema(schema, true);

                  var localRefs = resolve.ids.call(self, schema);

                  var schemaObj = new SchemaObject({
                    id: id,
                    schema: schema,
                    localRefs: localRefs,
                    jsonStr: jsonStr,
                    meta: meta
                  });

                  if (id[0] != '#' && shouldAddSchema) self._refs[id] = schemaObj;
                  self._cache.put(jsonStr, schemaObj);

                  if (willValidate && recursiveMeta) validateSchema(schema, true);

                  return schemaObj;
                }

                function _compile(schemaObj, root) {
                  if (schemaObj.compiling) {
                    schemaObj.validate = callValidate;
                    callValidate.schema = schemaObj.schema;
                    callValidate.errors = null;
                    callValidate.root = root ? root : callValidate;
                    if (schemaObj.schema.$async === true) callValidate.$async = true;
                    return callValidate;
                  }
                  schemaObj.compiling = true;

                  var currentOpts;
                  if (schemaObj.meta) {
                    currentOpts = self._opts;
                    self._opts = self._metaOpts;
                  }

                  var v;
                  try {
                    v = compileSchema.call(self, schemaObj.schema, root, schemaObj.localRefs);
                  } finally {
                    schemaObj.compiling = false;
                    if (schemaObj.meta) self._opts = currentOpts;
                  }

                  schemaObj.validate = v;
                  schemaObj.refs = v.refs;
                  schemaObj.refVal = v.refVal;
                  schemaObj.root = v.root;
                  return v;

                  function callValidate() {
                    var _validate = schemaObj.validate;
                    var result = _validate.apply(null, arguments);
                    callValidate.errors = _validate.errors;
                    return result;
                  }
                }

                /**
                 * Convert array of error message objects to string
                 * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
                 * @param  {Object} options optional options with properties `separator` and `dataVar`.
                 * @return {String} human readable string with all errors descriptions
                 */
                function errorsText(errors, options) {
                  errors = errors || self.errors;
                  if (!errors) return 'No errors';
                  options = options || {};
                  var separator = options.separator === undefined ? ', ' : options.separator;
                  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

                  var text = '';
                  for (var i = 0; i < errors.length; i++) {
                    var e = errors[i];
                    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
                  }
                  return text.slice(0, -separator.length);
                }

                /**
                 * Add custom format
                 * @param {String} name format name
                 * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
                 */
                function addFormat(name, format) {
                  if (typeof format == 'string') format = new RegExp(format);
                  self._formats[name] = format;
                }

                function addDraft4MetaSchema() {
                  if (self._opts.meta !== false) {
                    var metaSchema = require('./refs/json-schema-draft-04.json');
                    addMetaSchema(metaSchema, META_SCHEMA_ID, true);
                    self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
                  }
                }

                function addInitialSchemas() {
                  var optsSchemas = self._opts.schemas;
                  if (!optsSchemas) return;
                  if (Array.isArray(optsSchemas)) addSchema(optsSchemas);else for (var key in optsSchemas) {
                    addSchema(optsSchemas[key], key);
                  }
                }

                function addInitialFormats() {
                  for (var name in self._opts.formats) {
                    var format = self._opts.formats[name];
                    addFormat(name, format);
                  }
                }

                function checkUnique(id) {
                  if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id "' + id + '" already exists');
                }

                function getMetaSchemaOptions() {
                  var metaOpts = util.copy(self._opts);
                  for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) {
                    delete metaOpts[META_IGNORE_OPTIONS[i]];
                  }return metaOpts;
                }
              }
            }, { "./async": 1, "./cache": 2, "./compile": 6, "./compile/formats": 5, "./compile/resolve": 7, "./compile/rules": 8, "./compile/schema_obj": 9, "./compile/util": 11, "./compile/validation_error": 12, "./keyword": 37, "./refs/json-schema-draft-04.json": 38, "./v5": 40, "co": 47, "json-stable-stringify": 48 }] }, {}, [])("ajv");
        });
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(23));

      /***/
    },
    /* 10 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */
      /**
       * Module providing the Browser factory.
       *
       * Provides abstractions for browser APIs used internally by LaxarJS, which might need a different
       * implementation in a server-side environment, or for testing.
       * This service is internal to LaxarJS and not available to widgets and activities.
       *
       * @module browser
       */

      /**
       * Create a browser abstraction environment.
       *
       * @return {Browser}
       *    a fresh browser instance
       *
       * @private
       */
      function create() {

        // for the MSIE `resolve`-workaround, cache the temporary HTML document
        var resolveDoc = void 0;
        var resolveDocBase = void 0;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * A brower mostly abstracts over the location-related DOM window APIs, and provides a console wrapper.
         * Since it is internal to LaxarJS, only relevant APIs are included.
         *
         * @name Browser
         * @constructor
         */
        return {
          /**
          * Calculates an absolute URL from a (relative) URL, and an optional base URL.
          *
          * If no base URL is given, the `document.baseURI` is used instead. The given base URL may also be
          * relative, in which case it is resolved against the `document.baseURI` before resolving the first URL.
          *
          * For browser environments that do not support the `new URL( url, baseUrl )` constructor for resolving
          * URLs or that do not support `document.baseURI`, fallback mechanisms are used.
          *
          * @param {String} url
          *    the URL to resolve
          * @param {String} baseUrl
          *    the base to resolve from
          *
          * @return {String}
          *    an absolute URL based on the given URL
          *
          * @type {Function}
          * @memberof Browser
          */
          resolve: selectResolver(),

          /**
           * Provides easily mocked access to `window.location`
           *
           * @return {Location}
           *    the current (window's) DOM location
           *
           * @type {Function}
           * @memberof Browser
           */
          location: function location() {
            return window.location;
          },

          /**
           * Provides easily mocked access to `window.fetch` or a suitable polyfill:
           *
           * @param {String|Request} input
           *    the URL to fetch or the request to perform
           * @param {Object} [init]
           *    additional options, described here in more detail:
           *    https://developer.mozilla.org/en-US/docs/Web/API/Globalfetch/fetch#Parameters
           *
           * @return {Promise<Response>}
           *    the resulting promise
           *
           * @type {Function}
           * @memberof Browser
           */
          fetch: function fetch(input, init) {
            return window.fetch(input, init);
          },

          /**
           * Provides easily mocked access to `window.console`:
           *
           * @return {Console}
           *    the browser console promise
           *
           * @type {Function}
           * @memberof Browser
           */
          console: function console() {
            return window.console;
          }
        };

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        // perform the exception-based feature-detect only once (for performance, and to be nice to debugger users)
        function selectResolver() {
          try {
            var href = window.location.href;

            return new URL('', href).href === href ? resolveUsingUrl : resolveUsingLink;
          } catch (e) {
            return resolveUsingLink;
          }
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        // Resolve using the DOM URL API (Chrome, Firefox, Safari, MS Edge)
        function resolveUsingUrl(url, baseUrl) {
          var absoluteBaseUrl = baseUrl ? abs(baseUrl) : document.baseURI || abs('.');
          return new URL(url, absoluteBaseUrl).href;

          function abs(url) {
            return new URL(url, document.baseURI || resolveUsingLink('.'));
          }
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        // Resolve using the a-tag fallback (MSIE)
        function resolveUsingLink(url, baseUrl) {
          var absoluteBaseUrl = abs(baseUrl);
          if (!resolveDoc) {
            resolveDoc = document.implementation.createHTMLDocument('');
            resolveDocBase = resolveDoc.createElement('base');
            resolveDoc.head.appendChild(resolveDocBase);
          }
          resolveDocBase.href = absoluteBaseUrl;
          return abs(url, resolveDoc);

          function abs(url) {
            var baseDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

            var a = baseDocument.createElement('a');
            // MSIE does not process empty URLs correctly (http://stackoverflow.com/a/7966835)
            a.href = url || '#';
            return url ? a.href : a.href.slice(0, -1);
          }
        }
      }

      /***/
    },
    /* 11 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(1);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_object__ = __webpack_require__(0);
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }return arr2;
        } else {
          return Array.from(arr);
        }
      }

      function _toArray(arr) {
        return Array.isArray(arr) ? arr : Array.from(arr);
      }

      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */
      /**
       * Module providing the EventBus factory.
       *
       * To use the EventBus in a widget, request the {@link widget_services#axEventBus axEventBus} injection, or
       * use the `eventBus` property on the {@link widget_services#axContext axContext} injection.
       * In some cases, it may be useful to inject the global EventBus instance backing all widget instances of the
       * same bootstrapping context, by requesting the {@link widget_services#axGlobalEventBus axGlobalEventBus}
       * injection.
       *
       * @module event_bus
       */

      var WILDCARD = '*';
      var SUBSCRIBER_FIELD = '.';

      var TOPIC_SEPARATOR = '.';
      var SUB_TOPIC_SEPARATOR = '-';
      var REQUEST_MATCHER = /^([^.])([^.]*)Request(\..+)?$/;

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * @param {Object} configuration
       *    configuration for the event bus instance.
       *    The key `eventBusTimeoutMs` is used to determine the will/did timeout.
       * @param {Object} log
       *    a logger instance for error reporting
       * @param {Function} nextTick
       *    a next tick function like `process.nextTick`, `setImmediate` or AngularJS' `$timeout`
       * @param {Function} timeoutFunction
       *    a timeout function like `window.setTimeout` or AngularJS' `$timeout`
       * @param {Function} [errorHandler]
       *    a custom handler for thrown exceptions. By default exceptions are logged using the global logger.
       *
       * @constructor
       * @private
       */
      function EventBus(configuration, log, nextTick, timeoutFunction) {
        var errorHandler = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : createLogErrorHandler(log);

        this.nextTick_ = function (f) {
          return nextTick(f);
        };
        this.timeoutFunction_ = function (f, ms) {
          return timeoutFunction(f, ms);
        };
        this.timeoutMs_ = configuration.ensure('eventBusTimeoutMs');
        this.errorHandler_ = errorHandler;

        this.cycleCounter_ = 0;
        this.eventQueue_ = [];
        this.subscriberTree_ = {};

        this.waitingPromiseResolves_ = [];
        this.currentCycle_ = -1;
        this.inspectors_ = [];
        this.log_ = log;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Adds an inspector, that gets notified when certain actions within the event bus take place. Currently
       * these actions may occur:
       *
       * - `subscribe`: a new subscriber registered for an event
       * - `publish`: an event is published but not yet delivered
       * - `deliver`: an event is actually delivered to a subscriber
       *
       * An inspector receives a map with the following properties:
       *
       * - `action`: one of the actions from above
       * - `source`: the origin of the `action`
       * - `target`: the name of the event subscriber (`deliver` action only)
       * - `event`: the full name of the event or the subscribed event (`subscribe` action only)
       * - `eventObject`: the published event item (`publish` action only)
       * - `subscribedTo`: the event, possibly with omissions, the subscriber subscribed to (`deliver` action only)
       * - `cycleId`: the id of the event cycle
       *
       * The function returned by this method can be called to remove the inspector again and prevent it from
       * being called for future event bus actions.
       *
       * @param {Function} inspector
       *    the inspector function to add
       *
       * @return {Function}
       *    a function to remove the inspector
       */
      EventBus.prototype.addInspector = function (inspector) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(inspector).hasType(Function).isNotNull();

        this.inspectors_.push(inspector);
        return function () {
          var index = this.inspectors_.indexOf(inspector);
          if (index !== -1) {
            this.inspectors_.splice(index, 1);
          }
        }.bind(this);
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Subscribes to an event by name. An event name consists of so called *topics*, where each topic is
       * separated from another by dots (`.`). If a topic is omitted, this is treated as a wildcard. Note that
       * two dots in the middle or one dot at the beginning of an event name must remain, whereas a dot at the
       * end may be omitted. As such every event name has an intrinsic wildcard at its end. For example these are
       * all valid event names:
       *
       * - `some.event`: matches `some.event`, `some.event.again`
       * - `.event`: matches `some.event`, `any.event`, `any.event.again`
       * - `some..event`: matches `some.fancy.event`, `some.special.event`
       *
       * Additionally *subtopics* are supported. Subtopics are fragments of a topic, separated from another by
       * simple dashes (`-`). Here only suffixes of subtopics may be omitted when subscribing. Thus subscribing
       * to `some.event` would match an event published with name `some.event-again` or even
       * `some.event-another.again`.
       *
       * **The subscriber function**
       *
       * When an event is delivered, the subscriber function receives two arguments:
       * The first one is the event object as it was published. If `optionalOptions.clone` yields `true` this is a
       * simple deep copy of the object (note that only properties passing a JSON-(de)serialization remain). If
       * `false` the object is frozen using `Object.freeze` recursively.
       *
       * The second one is a meta object with these properties:
       *
       * - `name`: The name of the event as it actually was published (i.e. without wildcards).
       * - `cycleId`: The id of the cycle the event was published (and delivered) in
       * - `sender`: The id of the event sender, may be `null`.
       * - `initiator`: The id of the initiator of the cycle. Currently not implemented, thus always `null`.
       * - `options`: The options that were passed to `publish` or `publishAndGatherReplies` respectively.
       *
       * @param {String} eventName
       *    the name of the event to subscribe to
       * @param {Function} subscriber
       *    a function to call whenever an event matching `eventName` is published
       * @param {Object} [optionalOptions]
       *    additional options for the subscribe action
       * @param {String} [optionalOptions.subscriber=null]
       *    the id of the subscriber. Default is `null`
       * @param {Boolean} [optionalOptions.clone=true]
       *    if `false` the event will be send frozen to the subscriber, otherwise it will receive a deep copy.
       *    Default is `true`
       *
       * @return {Function}
       *    a function that when called unsubscribes from this subscription again
       */
      EventBus.prototype.subscribe = function (eventName, subscriber, optionalOptions) {
        var _this = this;

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(eventName).hasType(String).isNotNull();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(subscriber).hasType(Function).isNotNull();

        var options = __WEBPACK_IMPORTED_MODULE_1__utilities_object__["c" /* options */](optionalOptions, {
          subscriber: null,
          clone: true
        });
        var subscriberItem = {
          name: eventName,
          subscriber: subscriber,
          subscriberName: options.subscriber,
          subscriptionWeight: calculateSubscriptionWeight(eventName),
          options: options
        };

        var eventNameParts = eventName.split(TOPIC_SEPARATOR);
        var node = eventNameParts.reduce(function (node, eventNamePart) {
          var bucketName = eventNamePart || WILDCARD;
          if (!(bucketName in node)) {
            node[bucketName] = {};
          }
          return node[bucketName];
        }, this.subscriberTree_);

        if (!(SUBSCRIBER_FIELD in node)) {
          node[SUBSCRIBER_FIELD] = [];
        }
        node[SUBSCRIBER_FIELD].push(subscriberItem);

        notifyInspectors(this, {
          action: 'subscribe',
          source: options.subscriber,
          target: '-',
          event: eventName,
          cycleId: this.currentCycle_
        });

        return function () {
          unsubscribeRecursively(_this, _this.subscriberTree_, eventNameParts, subscriber);
        };
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Asynchronously publishes an event on the event bus. The returned promise will be enqueued as soon as this
       * event is delivered and, if during delivery a new event was enqueued, resolved after that new event was
       * delivered. If no new event is published during delivery of this event, the promise is instantly resolved.
       * To make this a bit clearer, lets assume we publish and thus enqueue an event at time `t`. It then will
       * be delivered at time `t+1`. At that precise moment the promise is enqueued to be resolved soon. We then
       * distinguish between two cases:
       *
       * - At time `t+1` no subscriber publishes (i.e. enqueues) an event: Thus there is no event in the same
       *   cycle and the promise is also resolved at time `t+1`.
       * - At least one subscriber publishes an event at time `t+1`: The promise is then scheduled to be resolved
       *   as soon as this event is delivered at time `t+2`.
       *
       * The implication of this is the following:
       *
       * We have two collaborators, A and B. A listens to event b and B listens to event a.
       * Whenever A publishes a and B than instantly (i.e. in the same event cycle of the JavaScript runtime
       * where its subscriber function was called) *responds* by publishing b, b arrives at the subscriber
       * function of A, before the promise of A's publish action is resolved.
       * It is hence possible to observe possible effects of an event sent by oneself, under the conditions
       * mentioned above. Practically this is used internally for the implementation of
       * {@link #EventBus.publishAndGatherReplies()}.
       *
       * @param {String} eventName
       *    the name of the event to publish
       * @param {Object} [optionalEvent]
       *    the event to publish
       * @param {Object} [optionalOptions]
       *    additional options for the publish action
       * @param {String} [optionalOptions.sender=null]
       *    the id of the event sender. Default is `null`
       * @param {Boolean} [optionalOptions.deliverToSender=true]
       *    if `false` the event will not be send to subscribers whose subscriber name matches
       *    `optionalOptions.sender`, else all subscribers will receive the event. Default is `true`
       *
       * @return {Promise}
        *   the delivery promise
       */
      EventBus.prototype.publish = function (eventName) {
        var _this2 = this;

        var optionalEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var optionalOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(eventName).hasType(String).isNotNull();

        var event = JSON.parse(JSON.stringify(optionalEvent));
        var options = Object.assign({ deliverToSender: true, sender: null }, optionalOptions);

        return new Promise(function (resolve) {
          var eventItem = {
            meta: {
              name: eventName,
              cycleId: _this2.currentCycle_ > -1 ? _this2.currentCycle_ : _this2.cycleCounter_++,
              sender: options.sender,
              initiator: null,
              options: options
            },
            event: event,
            resolvePublish: resolve
          };
          enqueueEvent(_this2, eventItem);

          notifyInspectors(_this2, {
            action: 'publish',
            source: options.sender,
            target: '-',
            event: eventName,
            eventObject: event,
            cycleId: eventItem.meta.cycleId
          });
        });
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Publishes an event that follows the *request-will-did pattern* and awaits all replies. This pattern has
       * evolved over time and is of great use when handling the asynchronous nature of event bus events.
       *
       * Certain rules need to be fulfilled: First the initiator needs to call this method with an event whose
       * name has the suffix `Request`, e.g. `takeActionRequest`. All collaborators that want to react to this
       * event then either do so in the same event cycle by sending a `didTakeAction` event or announce that they
       * will do something asynchronously by publishing a `willTakeAction` event. In the latter case they need to
       * broadcast the fulfillment of their action some time later by sending a `didTakeAction` event. Note that for
       * both events the same sender name needs to be given. Otherwise they cannot be mapped and the event bus
       * doesn't know if all asynchronous replies were already received.
       *
       * Additionally a timer is started using either the globally configured `pendingDidTimeout` ms value or the
       * value provided as option to this method. If that timer expires before all `did*` events to all given
       * `will*` events were received, the error handler is called to handle the incident and the promise is
       * rejected with all responses received up to now.
       *
       * @param {String} eventName
       *    the name of the event to publish
       * @param {Object} [optionalEvent]
       *    the event to publish
       * @param {Object} [optionalOptions]
       *    additional options for the publish action
       * @param {String} [optionalOptions.sender=null]
       *    the id of the event sender. Default is `null`
       * @param {Number} [optionalOptions.pendingDidTimeout]
       *    the timeout in milliseconds for pending did* events. Default is the timeout option used when the
       *    event bus instance was created
       *
       * @return {Promise}
       *   the delivery promise. It receives a list of all collected `did*` events and according meta information
       */
      EventBus.prototype.publishAndGatherReplies = function (eventName, optionalEvent, optionalOptions) {
        var _this3 = this;

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(eventName).hasType(String).isNotNull();

        var matches = REQUEST_MATCHER.exec(eventName);
        __WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */].state(!!matches, 'Expected eventName to end with "Request" but got ' + eventName);

        var options = Object.assign({ pendingDidTimeout: this.timeoutMs_ }, optionalOptions);

        var eventNameSuffix = matches[1].toUpperCase() + matches[2];
        if (matches[3]) {
          eventNameSuffix += matches[3];
        }
        var deferred = {};
        deferred.promise = new Promise(function (resolve, reject) {
          deferred.resolve = resolve;
          deferred.reject = reject;
        });
        var willWaitingForDid = [];
        var givenDidResponses = [];
        var cycleFinished = false;

        var unsubscribeWillCollector = this.subscribe('will' + eventNameSuffix, function (event, meta) {
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(meta.sender).hasType(String).isNotNull('A response with will to a request-event must contain a sender.');

          willWaitingForDid.push(meta.sender);
        }, { subscriber: options.sender });

        var unsubscribeDidCollector = this.subscribe('did' + eventNameSuffix, function (event, meta) {
          givenDidResponses.push({ event: event, meta: meta });
          var senderIndex = void 0;
          do {
            senderIndex = willWaitingForDid.indexOf(meta.sender);
            if (senderIndex !== -1) {
              willWaitingForDid.splice(senderIndex, 1);
            }
          } while (senderIndex !== -1);

          if (willWaitingForDid.length === 0 && cycleFinished) {
            finish();
          }
        }, { subscriber: options.sender });

        var timeoutRef = this.timeoutFunction_(function () {
          if (willWaitingForDid.length > 0) {
            var message = 'Timeout while waiting for pending did' + eventNameSuffix + ' on ' + eventName + '.';
            _this3.errorHandler_(message, {
              'Sender': options.sender,
              'After ms timeout': options.pendingDidTimeout,
              'Responses missing from': willWaitingForDid.join(', ')
            });
            finish(true);
          }
        }, options.pendingDidTimeout);

        this.publish(eventName, optionalEvent, options).then(function () {
          unsubscribeWillCollector();
          if (willWaitingForDid.length === 0) {
            // either there was no will or all did responses were already given in the same cycle as the will
            finish();
            return;
          }
          cycleFinished = true;
        });

        function finish(wasCanceled) {
          clearTimeout(timeoutRef);
          unsubscribeDidCollector();
          (wasCanceled ? deferred.reject : deferred.resolve)(givenDidResponses);
        }

        return deferred.promise;
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function enqueueEvent(self, eventItem) {
        if (self.eventQueue_.length === 0) {
          self.nextTick_(function () {
            var queuedEvents = self.eventQueue_;

            self.eventQueue_ = [];

            processWaitingPublishPromises(self, processQueue(self, queuedEvents));
          });
        }
        self.eventQueue_.push(eventItem);
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function processQueue(self, queuedEvents) {
        return queuedEvents.map(function (eventItem) {
          var meta = eventItem.meta;
          self.currentCycle_ = meta.cycleId;

          var subscribers = findSubscribers(self, meta.name);
          if (subscribers.length === 0) {
            self.currentCycle_ = -1;
            return eventItem.resolvePublish;
          }

          var serializedEvent = null;
          if (subscribers.length > 1) {
            serializedEvent = JSON.stringify(eventItem.event);
          }

          var senderName = meta.sender;
          var options = meta.options;

          subscribers.forEach(function (subscriberItem) {
            var subscriberName = subscriberItem.subscriberName;
            if (!options.deliverToSender && senderName && senderName === subscriberName) {
              return;
            }

            try {
              var event = void 0;
              if (subscriberItem.options.clone) {
                event = serializedEvent ? JSON.parse(serializedEvent) : eventItem.event;
              } else {
                event = eventItem.event;
              }
              subscriberItem.subscriber(event, meta);
            } catch (e) {
              var message = 'error while calling subscriber "' + subscriberName + '"' + (' for event ' + meta.name) + (' published by "' + senderName + '" (subscribed to: ' + subscriberItem.name + ')');
              self.errorHandler_(message, {
                'Exception': e,
                'Published event': eventItem.event,
                'Event meta information': meta,
                'Caused by Subscriber': subscriberItem
              });
            }

            notifyInspectors(self, {
              action: 'deliver',
              source: senderName,
              target: subscriberName,
              event: meta.name,
              eventObject: eventItem.event,
              subscribedTo: subscriberItem.name,
              cycleId: meta.cycleId
            });
          });

          self.currentCycle_ = -1;

          return eventItem.resolvePublish;
        });
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function processWaitingPublishPromises(self, newPromiseResolves) {
        var waitingResolves = self.waitingPromiseResolves_;
        self.waitingPromiseResolves_ = newPromiseResolves;

        waitingResolves.forEach(function (resolve) {
          return resolve();
        });

        if (self.eventQueue_.length === 0) {
          // nothing was queued by any subscriber. The publishers can instantly be notified of delivery.
          newPromiseResolves.forEach(function (resolve) {
            return resolve();
          });
          self.waitingPromiseResolves_ = [];
        }
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function unsubscribeRecursively(self, node, parts, subscriber) {
        if (parts.length === 0 && Array.isArray(node[SUBSCRIBER_FIELD])) {
          var subscribers = node[SUBSCRIBER_FIELD];
          for (var i = subscribers.length - 1; i >= 0; --i) {
            if (subscribers[i].subscriber === subscriber) {
              notifyInspectors(self, {
                action: 'unsubscribe',
                source: subscribers[i].subscriberName,
                target: '-',
                event: subscribers[i].name,
                cycleId: self.currentCycle_
              });
              subscribers.splice(i, 1);
            }
          }
        }

        var _parts = _toArray(parts),
            part = _parts[0],
            rest = _parts.slice(1);

        var searchPart = part || WILDCARD;
        if (searchPart in node) {
          unsubscribeRecursively(self, node[searchPart], rest, subscriber);
        }
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function findSubscribers(self, eventName) {
        var subscribers = [];
        var parts = eventName.split(TOPIC_SEPARATOR);
        var node = self.subscriberTree_;

        findSubscribersRecursively(node, parts, subscribers);
        subscribers.sort(function (a, b) {
          var aWeight = a.subscriptionWeight;
          var bWeight = b.subscriptionWeight;
          if (aWeight[0] === bWeight[0]) {
            return bWeight[1] - aWeight[1];
          }

          return bWeight[0] - aWeight[0];
        });

        return subscribers;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function findSubscribersRecursively(node, parts, subscribers) {
        if (Array.isArray(node[SUBSCRIBER_FIELD])) {
          subscribers.push.apply(subscribers, _toConsumableArray(node[SUBSCRIBER_FIELD]));
        }

        if (parts.length === 0) {
          return;
        }

        var _parts2 = _toArray(parts),
            part = _parts2[0],
            remainder = _parts2.slice(1);

        if (part.indexOf(SUB_TOPIC_SEPARATOR) !== -1) {
          var index = part.length;
          var currentPart = part;
          do {
            currentPart = currentPart.substring(0, index);
            if (currentPart in node) {
              findSubscribersRecursively(node[currentPart], remainder, subscribers);
            }
            index = currentPart.lastIndexOf(SUB_TOPIC_SEPARATOR);
          } while (index !== -1);
        } else if (part in node) {
          findSubscribersRecursively(node[part], remainder, subscribers);
        }

        if (WILDCARD in node) {
          findSubscribersRecursively(node[WILDCARD], remainder, subscribers);
        }
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function calculateSubscriptionWeight(eventName) {
        var parts = eventName.split(TOPIC_SEPARATOR);
        var weight = [0, 0];
        parts.forEach(function (part) {
          if (part.length > 0) {
            weight[0]++;
            weight[1] += part.split(SUB_TOPIC_SEPARATOR).length - 1;
          }
        });
        return weight;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function notifyInspectors(self, infoObject) {
        self.inspectors_.forEach(function (inspector) {
          inspector(infoObject);
        });
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function createLogErrorHandler(log) {
        return function (message, optionalErrorInformation) {
          var sensitiveData = ['Published event'];

          log.error('EventBus: ' + message);

          if (optionalErrorInformation) {
            __WEBPACK_IMPORTED_MODULE_1__utilities_object__["b" /* forEach */](optionalErrorInformation, function (info, title) {
              var formatString = '   - [0]: [1:%o]';
              if (sensitiveData.indexOf(title) !== -1) {
                formatString = '   - [0]: [1:%o:anonymize]';
              }

              log.error(formatString, title, info);

              if (info instanceof Error && info.stack) {
                log.error('   - Stacktrace: ' + info.stack);
              }
            });
          }
        };
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Creates and returns a new event bus instance using the given configuration.
       *
       * @param {Object} configuration
       *    configuration for the event bus instance.
       *    The key `eventBusTimeoutMs` is used to determine the will/did timeout.
       * @param {Object} log
       *    a logger to use for error reporting
       * @param {Function} nextTick
       *    a next tick function like `process.nextTick` or AngularJS' `$timeout`
       * @param {Function} timeoutFunction
       *    a timeout function like `window.setTimeout` or AngularJS' `$timeout`
       * @param {Function} [errorHandler]
       *    a custom handler for thrown exceptions. By default exceptions are logged using the global logger.
       *
       * @return {EventBus}
       *    an event bus instance
       *
       * @private
       */
      function create(configuration, log, nextTick, timeoutFunction, errorHandler) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(configuration.ensure).hasType(Function).isNotNull();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(log.error).hasType(Function).isNotNull();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(nextTick).hasType(Function).isNotNull();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(timeoutFunction).hasType(Function).isNotNull();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(errorHandler).hasType(Function);

        return new EventBus(configuration, log, nextTick, timeoutFunction, errorHandler);
      }

      /***/
    },
    /* 12 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(1);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__utilities_object__ = __webpack_require__(0);
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
        return levels;
      });
      /* unused harmony export BLACKBOX */
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /* unused harmony export createConsoleChannel */
      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }return arr2;
        } else {
          return Array.from(arr);
        }
      }

      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */
      /**
       * Module providing the Logger factory.
       *
       * To use the Log service in a widget, request the {@link widget_services#axLog axLog} injection.
       *
       * @module log
       */

      /**
       * Log levels that are available by default, sorted by increasing severity:
       *
       * - TRACE (level 100)
       * - DEBUG (level 200)
       * - INFO (level 300)
       * - WARN (level 400)
       * - ERROR (level 500)
       * - FATAL (level 600)
       *
       * @type {Object}
       * @name levels
       */
      var levels = {
        TRACE: 100,
        DEBUG: 200,
        INFO: 300,
        WARN: 400,
        ERROR: 500,
        FATAL: 600
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Pass this as an additional replacement parameter to a log-method, in order to blackbox your logging call.
       * Blackboxed callers are ignored when logging the source information (file, line).
       *
       * @type {Object}
       * @name BLACKBOX
       */
      var BLACKBOX = {};

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function create(configuration, optionalBrowser) {
        var startChannels = optionalBrowser ? [createConsoleChannel(optionalBrowser)] : [];
        return new Logger(configuration, startChannels);
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      // eslint-disable-next-line valid-jsdoc
      /**
       * A flexible logger.
       *
       * It is recommended to prefer this logger over `console.log` and friends, at least for any log messages that
       * might make their way into production code. For once, this logger is safe to use across browsers and allows
       * to attach additional channels for routing messages to (i.e. to send them to a server process for
       * persistence). If a browser console is available, messages will be logged to that console using the builtin
       * console channel.
       * For testing, a silent mock for this logger is used, making it simple to test the logging behavior of
       * widgets and activities, while avoiding noisy log messages in the test runner output.
       *
       * All messages produced
       *
       * @constructor
       * @private
       */
      function Logger(configuration) {
        var _this = this;

        var channels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        this.levels = Object.assign({}, levels, configuration.get('logging.levels'));

        this.queueSize_ = 100;
        this.channels_ = channels;
        this.counter_ = 0;
        this.messageQueue_ = [];
        this.threshold_ = 0;
        this.tags_ = {};

        this.levelToName_ = function (levels) {
          var result = {};
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["b" /* forEach */])(levels, function (level, levelName) {
            _this[levelName.toLowerCase()] = function () {
              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              _this.log.apply(_this, [level].concat(args, [BLACKBOX]));
            };
            result[level] = levelName;
          });
          return result;
        }(this.levels);

        this.setLogThreshold(configuration.ensure('logging.threshold'));
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Logs a message. A message may contain placeholders in the form `[#]` where `#` resembles the index
       * within the list of `replacements`. `replacements` are incrementally counted starting at `0`. If the
       * log level is below the configured log threshold, the message is simply discarded.
       *
       * It is recommended not to use this method directly, but instead one of the short cut methods for the
       * according log level.
       *
       * @param {Number} level
       *    the level for this message
       * @param {String} message
       *    the message to log
       * @param {...*} replacements
       *    objects that should replace placeholders within the message
       */
      Logger.prototype.log = function (level, message) {
        for (var _len2 = arguments.length, replacements = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          replacements[_key2 - 2] = arguments[_key2];
        }

        if (level < this.threshold_) {
          return;
        }

        var blackboxDepth = 0;
        while (replacements[replacements.length - 1] === BLACKBOX) {
          ++blackboxDepth;
          replacements.pop();
        }

        var messageObject = {
          id: this.counter_++,
          level: this.levelToName_[level],
          text: message,
          replacements: replacements,
          time: new Date(),
          tags: this.gatherTags(),
          sourceInfo: gatherSourceInformation(blackboxDepth + 1) // add 1 depth to exclude this function
        };

        this.channels_.forEach(function (channel) {
          channel(messageObject);
        });

        if (this.messageQueue_.length === this.queueSize_) {
          this.messageQueue_.shift();
        }
        this.messageQueue_.push(messageObject);
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Logs a message in log level `TRACE`. See {@link Logger#log} for further information.
       *
       * *Important note*: This method is only available, if no custom log levels were defined via
       * configuration or custom log levels include this method as well.
       *
       * @param {String} message
       *    the message to log
       * @param {...*} replacements
       *    objects that should replace placeholders within the message
       */
      Logger.prototype.trace = function () {};

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Logs a message in log level `DEBUG`. See {@link Logger#log} for further information.
       *
       * *Important note*: This method is only available, if no custom log levels were defined via
       * configuration or custom log levels include this method as well.
       *
       * @param {String} message
       *    the message to log
       * @param {...*} replacements
       *    objects that should replace placeholders within the message
       */
      Logger.prototype.debug = function () {};

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Logs a message in log level `INFO`. See {@link Logger#log} for further information.
       *
       * *Important note*: This method is only available, if no custom log levels were defined via
       * configuration or custom log levels include this method as well.
       *
       * @param {String} message
       *    the message to log
       * @param {...*} replacements
       *    objects that should replace placeholders within the message
       */
      Logger.prototype.info = function () {};

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Logs a message in log level `WARN`. See {@link Logger#log} for further information.
       *
       * *Important note*: This method is only available, if no custom log levels were defined via
       * configuration or custom log levels include this method as well.
       *
       * @param {String} message
       *    the message to log
       * @param {...*} replacements
       *    objects that should replace placeholders within the message
       */
      Logger.prototype.warn = function () {};

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Logs a message in log level `ERROR`. See {@link Logger#log} for further information.
       *
       * *Important note*: This method is only available, if no custom log levels were defined via
       * configuration or custom log levels include this method as well.
       *
       * @param {String} message
       *    the message to log
       * @param {...*} replacements
       *    objects that should replace placeholders within the message
       */
      Logger.prototype.error = function () {};

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Logs a message in log level `FATAL`. See {@link Logger#log} for further information.
       *
       * *Important note*: This method is only available, if no custom log levels were defined via
       * configuration or custom log levels include this method as well.
       *
       * @param {String} message
       *    the message to log
       * @param {...*} replacements
       *    objects that should replace placeholders within the message
       */
      Logger.prototype.fatal = function () {};

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Adds a new channel to forward log messages to. A channel is called synchronously for every log message
       * and can do whatever necessary to handle the message according to its task. Note that blocking or
       * performance critical actions within a channel should always take place asynchronously to prevent from
       * blocking the application. Ideally a web worker is used for heavier background tasks.
       *
       * Each message is an object having the following properties:
       * - `id`: the unique, ascending id of the log message
       * - `level`: the log level of the message in string representation
       * - `text`: the actual message that was logged
       * - `replacements`: the raw list of replacements passed along the message
       * - `time`: JavaScript Date instance when the message was logged
       * - `tags`: A map of all log tags currently set for the logger
       * - `sourceInfo`: if supported, a map containing `file`, `line` and `char` where the logging took place
       *
       * @param {Function} channel
       *    the log channel to add
       */
      Logger.prototype.addLogChannel = function (channel) {
        this.channels_.push(channel);
        this.messageQueue_.forEach(function (entry) {
          channel(entry);
        });
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Removes a log channel and thus stops sending further messages to it.
       *
       * @param {Function} channel
       *    the log channel to remove
       */
      Logger.prototype.removeLogChannel = function (channel) {
        var channelIndex = this.channels_.indexOf(channel);
        if (channelIndex > -1) {
          this.channels_.splice(channelIndex, 1);
        }
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Adds a value for a log tag. If a tag is already known, the value is appended to the existing one using a
       * `;` as separator. Note that no formatting of the value takes place and a non-string value will just have
       * its appropriate `toString` method called.
       *
       * Log tags can be used to mark a set of log messages with a value giving further information on the
       * current logging context. For example laxar sets a tag `'INST'` with a unique-like identifier for the
       * current browser client. If then for example log messages are persisted on a server, messages belonging
       * to the same client can be accumulated.
       *
       * @param {String} tag
       *    the id of the tag to add a value for
       * @param {String} value
       *    the value to add
       */
      Logger.prototype.addTag = function (tag, value) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(tag).hasType(String).isNotNull();

        if (!this.tags_[tag]) {
          this.tags_[tag] = [value];
        } else {
          this.tags_[tag].push(value);
        }
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Sets a value for a log tag. If a tag is already known, the value is overwritten by the given one. Note
       * that no formatting of the value takes place and a non-string value will just have its appropriate
       * `toString` method called. For further information on log tags, see {@link Logger#addTag}.
       *
       * @param {String} tag
       *    the id of the tag to set a value for
       * @param {String} value
       *    the value to set
       */
      Logger.prototype.setTag = function (tag, value) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(tag).hasType(String).isNotNull();

        this.tags_[tag] = [value];
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Removes a log tag. For further information on log tags, see {@link Logger#addTag}.
       *
       * @param {String} tag
       *    the id of the tag to set a value for
       */
      Logger.prototype.removeTag = function (tag) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(tag).hasType(String).isNotNull();

        delete this.tags_[tag];
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Returns a map of all tags. If there are multiple values for the same tag, their values are concatenated
       * using a `;` as separator. For further information on log tags, see {@link Logger#addTag}.
       *
       * @return {Object}
       *    a mapping from tag to its value(s)
       */
      Logger.prototype.gatherTags = function () {
        var tags = {};
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utilities_object__["b" /* forEach */])(this.tags_, function (values, tag) {
          tags[tag] = values.join(';');
        });
        return tags;
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Sets the threshold for log messages. Log messages with a lower level will be discarded upon logging.
       *
       * @param {String|Number} threshold
       *    the numeric or the string value of the log level to use as threshold
       */
      Logger.prototype.setLogThreshold = function (threshold) {
        if (typeof threshold === 'string') {
          __WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */].state(threshold.toUpperCase() in this.levels, 'Unsupported log threshold "' + threshold + '".');
          this.threshold_ = this.levels[threshold.toUpperCase()];
        } else {
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(threshold).hasType(Number);
          this.threshold_ = threshold;
        }
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      var EMPTY_CALL_INFORMATION = { file: '?', line: -1, char: -1 };

      function gatherSourceInformation(blackboxDepth) {
        var e = new Error();

        if (!e.stack) {
          try {
            // IE >= 10 only generates a stack if the error object is really thrown
            throw new Error();
          } catch (err) {
            e = err;
          }
          if (!e.stack) {
            return EMPTY_CALL_INFORMATION;
          }
        }

        var rows = e.stack.split(/[\n]/);
        var interpret = void 0;
        if (rows[0] === 'Error') {
          rows.shift();
          interpret = chromeStackInterpreter;
        } else if (rows[0].indexOf('@') !== -1) {
          interpret = firefoxStackInterpreter;
        } else {
          return EMPTY_CALL_INFORMATION;
        }

        var row = rows[blackboxDepth + 1]; // add 1 depth to exclude this function
        return row ? interpret(row) : EMPTY_CALL_INFORMATION;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      var CHROME_AND_IE_STACK_MATCHER = /\(?([^( ]+):(\d+):(\d+)\)?$/;

      function chromeStackInterpreter(row) {
        var match = CHROME_AND_IE_STACK_MATCHER.exec(row);
        return {
          file: match ? match[1] : '?',
          line: match ? match[2] : -1,
          char: match ? match[3] : -1
        };
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      var FIREFOX_STACK_MATCHER = /@(.+):(\d+)$/;

      function firefoxStackInterpreter(row) {
        var match = FIREFOX_STACK_MATCHER.exec(row);
        return {
          file: match ? match[1] : '?',
          line: match ? match[2] : -1,
          char: -1
        };
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function createConsoleChannel(browser) {

        return function log(messageObject) {
          var browserConsole = browser.console();
          if (!browserConsole) {
            return;
          }

          var level = messageObject.level,
              text = messageObject.text,
              replacements = messageObject.replacements,
              _messageObject$source = messageObject.sourceInfo,
              file = _messageObject$source.file,
              line = _messageObject$source.line;

          var logMethod = level.toLowerCase();
          if (!(logMethod in browserConsole) || logMethod === 'trace') {
            // In console objects trace doesn't define a valid log level but is used to print stack traces. We
            // thus need to change it something different.
            logMethod = 'log';
          }

          if (!(logMethod in browserConsole)) {
            return;
          }

          var callArgs = [level + ': '].concat(mergeTextAndReplacements(text, replacements)).concat(['(@ ' + file + ':' + line + ')']);

          browserConsole[logMethod].apply(browserConsole, _toConsumableArray(callArgs));
        };
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function mergeTextAndReplacements(text, replacements) {
        var parts = [];
        var pos = 0;
        var buffer = '';

        while (pos < text.length) {
          var character = text.charAt(pos);

          switch (character) {
            case '\\':
              {
                ++pos;
                if (pos === text.length) {
                  throw new Error('Unterminated string: "' + text + '"');
                }

                buffer += text.charAt(pos);
                break;
              }
            case '[':
              {
                parts.push(buffer);
                buffer = '';

                var end = text.indexOf(']', pos);
                if (end === -1) {
                  throw new Error('Unterminated replacement at character ' + pos + ': "' + text + '"');
                }

                var replacementIndex = parseInt(text.substring(pos + 1, end), 10);

                parts.push(replacements[replacementIndex]);
                pos = end;

                break;
              }
            default:
              {
                buffer += character;
                break;
              }
          }

          ++pos;
        }

        if (buffer.length > 0) {
          parts.push(buffer);
        }

        return parts;
      }

      /***/
    },
    /* 13 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Factory for i18n widget service instances.
       *
       * @module widget_services_visibility
       */

      // <-- temporary guard until https://github.com/LaxarJS/laxar-dox/issues/21 is fixed
      var noDeliveryToSender = { deliverToSender: false };
      var noOp = function noOp() {};

      /**
       * Creates a widget-specific helper for `didChangeAreaVisibility` events.
       *
       * @param {AxContext} context
       *    the widget context/scope that the handler should work with. It uses the `eventBus` property there
       *    with which it can do the event handling. The visibility handler will set the boolean context property
       *    `isVisible` which can be used to determine the visibility state of the entire widget, e.g. for use in
       *    templates.
       *
       * @param {AxAreaHelper} areaHelper
       *    an area helper to qualify/unqualify names for this widget's areas
       *
       * @return {AxVisibility}
       *    a visibility handler instance
       */
      function create(context, areaHelper) {

        /**
         * @constructor
         * @name AxVisibility
         */
        var api = {
          /**
           * Query the current visibility state.
           *
           * @return {Boolean}
           *    this current visibility status as determined through eventBus events
           *
           * @memberof AxVisibility
           */
          isVisible: function isVisible() {
            return areaHelper.isVisible(context.widget.area);
          },
          onChange: onChange,
          onHide: onHide,
          onShow: onShow,
          release: release,
          track: track,
          unsubscribe: unsubscribe,
          updateAreaVisibility: updateAreaVisibility,
          updateWidgetVisibility: updateWidgetVisibility
        };

        var isVisible = api.isVisible();

        var eventBus = context.eventBus;

        // state used for tracking the widget visibility

        var trackingProperty = void 0;
        var showListeners = [];
        var hideListeners = [];
        var unsubscribeToChanges = noOp;

        // state used for setting the visibility of the widget and its areas
        var visibilityByArea = {};
        var overrideByArea = {};
        var unsubscribeToAreaRequests = noOp;

        return api;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Registers a callback to be run when this widget becomes hidden.
         *
         * @param {Function} callback
         *    a callback to be invoked whenever the widget becomes visible, with a boolean argument indicating
         *    the new visibility state (`false`). The callback will *not* be invoked for the start value (`false`).
         *
         * @return {AxVisibility}
         *    this instance for chaining
         *
         * @memberof AxVisibility
         */
        function onHide(callback) {
          hideListeners.push(callback);
          updateChangeSubscription();
          return api;
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Registers a callback to be run when this widget becomes visbile.
         *
         * @param {Function} callback
         *    a callback to be invoked whenever the widget becomes visible, with a boolean argument indicating
         *    the new visibility state (`true`).
         *
         * @return {AxVisibility}
         *    this instance for chaining
         *
         * @memberof AxVisibility
         */
        function onShow(callback) {
          showListeners.push(callback);
          updateChangeSubscription();
          return api;
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Registers a callback for changes to this widget's visibility.
         *
         * @param {Function} callback
         *    a callback to be invoked whenever the widget visibility changes, with a boolean argument indicating
         *    the new visibility state. The callback will *not* be invoked for the start value (`false`).
         *
         * @return {AxVisibility}
         *    this instance for chaining
         *
         * @memberof AxVisibility
         */
        function onChange(callback) {
          showListeners.push(callback);
          hideListeners.push(callback);
          updateChangeSubscription();
          return api;
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Starts tracking visibility as a property on the context.
         *
         * Calling this repeatedly with different property names will stop previous properties from receiving
         * further updates, but will not remove previously set tracking properties from the context object.
         *
         * @param {String} property
         *    the name of the context property to maintain
         *
         * @return {AxVisibility}
         *    this instance for chaining
         *
         * @memberof AxVisibility
         */
        function track() {
          var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'isVisible';

          trackingProperty = property;
          if (property !== null) {
            context[property] = isVisible;
          }
          updateChangeSubscription();
          return api;
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Triggers a visibility change to the given area. The visibility of the area and its nested areas is
         * re-evaluated over the event bus. Use this to implement e.g. tabbing/accordion/expander widgets.
         *
         * @param {Object} visibilityByLocalArea
         *   A mapping of local area names (without the widget ID) to their new visibility state (Boolean).
         *   Areas that are omitted here are left as is. Areas that have not been set at all just assume the
         *   visibility state of the containing area.
         * @param {Object} [optionalOptions]
         *   Additional options
         * @param {Object} [optionalOptions.overrideContainer]
         *   Allows the specified areas to become visible even if the widget's container area is not visible.
         *
         * @return {Promise}
         *    a promise that is resolved (without a value) when the visibility change was applied
         *
         * @memberof AxVisibility
         */
        function updateAreaVisibility(visibilityByLocalArea) {
          var optionalOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var _optionalOptions$over = optionalOptions.overrideContainer,
              overrideContainer = _optionalOptions$over === undefined ? false : _optionalOptions$over;

          if (unsubscribeToAreaRequests === noOp) {
            var requestEvent = 'changeAreaVisibilityRequest.' + context.widget.id;
            unsubscribeToAreaRequests = eventBus.subscribe(requestEvent, responder(isAreaVisible));
          }

          var promises = Object.keys(visibilityByLocalArea).map(function (name) {
            var oldVisible = visibilityByArea[name];
            var oldOverride = overrideByArea[name];
            var visible = visibilityByArea[name] = visibilityByLocalArea[name];
            if (overrideContainer) {
              overrideByArea[name] = overrideContainer;
            } else if (oldOverride) {
              delete overrideByArea[name];
            }
            if (oldVisible !== visible || oldOverride !== overrideByArea[name]) {
              var area = areaHelper.fullName(name);
              var eventName = 'changeAreaVisibilityRequest.' + area + '.' + visible;
              return eventBus.publishAndGatherReplies(eventName, { area: area, visible: visible }, noDeliveryToSender);
            }
            return Promise.resolve();
          });

          return Promise.all(promises).then(noOp);
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /* @private helper for updateAreaVisibility */
        function isAreaVisible(localAreaName, containerVisible) {
          var areaVisible = visibilityByArea[localAreaName];
          if (areaVisible === undefined) {
            return containerVisible;
          }
          return areaVisible && (containerVisible || overrideByArea[localAreaName]);
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Triggers a visibility change the widget itself and all its areas, always overriding its container
         * visibility with the given value.
         * This simplifies implementing popup/popover/layer widgets, which always live in an invisible container
         * area, but need to show/hide all their owned areas.
         *
         * To control the visibility of individual areas, use #updateAreaVisibility
         *
         * @param {Boolean} visible
         *   The new visibility state of the widget.
         *
         * @return {AxVisibility}
         *    this instance for chaining
         *
         * @memberof AxVisibility
         */
        function updateWidgetVisibility(visible) {
          var widget = context.widget.id;
          var eventName = 'changeWidgetVisibilityRequest.' + widget + '.' + visible;
          return eventBus.publishAndGatherReplies(eventName, { widget: widget, visible: visible }, noDeliveryToSender);
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Remove the given callback (registered through one or more of the on... methods) from any subscriptions.
         *
         * @param {Function} callback
         *    a callback that was previously registered using any of the `on...` methods.
         *    It will be removed from all registrations. Passing an unknown callback has no effect.
         *
         * @return {AxVisibility}
         *    this instance for chaining
         *
         * @memberof AxVisibility
         */
        function unsubscribe(callback) {
          [showListeners, hideListeners].forEach(remove);

          function remove(array) {
            var index = array.indexOf(callback);
            if (index === -1) {
              return;
            }
            array.splice(index, 1);
            remove(array);
          }
          return api;
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function release() {
          unsubscribeToAreaRequests();
          unsubscribeToChanges();
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function updateChangeSubscription() {
          var needsSubscription = trackingProperty || showListeners.length + hideListeners.length;
          if (needsSubscription && unsubscribeToChanges === noOp) {
            unsubscribeToChanges = eventBus.subscribe('didChangeAreaVisibility.' + context.widget.area, function (_ref) {
              var visible = _ref.visible;

              if (visible === isVisible) {
                return;
              }
              isVisible = visible;
              if (trackingProperty) {
                context[trackingProperty] = visible;
              }
              (visible ? showListeners : hideListeners).forEach(function (f) {
                return f(visible);
              });
            });
          } else if (unsubscribeToChanges && !needsSubscription) {
            unsubscribeToChanges();
            unsubscribeToChanges = noOp;
          }
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function responder(callback) {
          return function (_ref2) {
            var area = _ref2.area,
                containerVisible = _ref2.visible;

            var visible = callback(areaHelper.localName(area), containerVisible);
            if (visible === true || visible === false) {
              var didEvent = 'didChangeAreaVisibility.' + area + '.' + visible;
              eventBus.publish(didEvent, { area: area, visible: visible }, noDeliveryToSender);
            }
          };
        }
      }

      /***/
    },
    /* 14 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__utilities_object__ = __webpack_require__(0);
      /* unused harmony export MOCK_THEME */
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /**
      * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      var MOCK_THEME = 'mock.theme';

      var NOT_FOUND = { content: null, url: null };

      function create() {
        var themeName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOCK_THEME;

        var buckets = {};

        return {
          forFlow: mockProvider('flows', ['descriptor'], ['definition']),
          forTheme: mockProvider('themes', ['assets', 'descriptor']),
          forPage: mockProvider('pages', ['descriptor'], ['definition']),
          forLayout: mockProvider('layouts', ['descriptor', 'assets']),
          forWidget: mockProvider('widgets', ['descriptor', 'assets', 'module']),
          forControl: mockProvider('controls', ['descriptor', 'assets', 'module'])
        };

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function mockProvider(bucketName) {
          var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var cloneKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

          var bucket = buckets[bucketName] = {};
          provide.mock = function (ref, artifact) {
            bucket[ref] = artifact;
          };

          return provide;

          ////////////////////////////////////////////////////////////////////////////////////////////////////////

          function provide(ref) {
            var artifactPromise = bucket[ref] ? Promise.resolve(bucket[ref]) : Promise.reject(new Error('Artifact ' + ref + ' not found in ' + bucketName));

            var api = {};

            ['definition', 'module', 'descriptor'].forEach(function (key) {
              if (cloneKeys.includes(key)) {
                api[key] = function () {
                  return artifactPromise.then(function (_) {
                    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["f" /* deepClone */])(_[key]);
                  });
                };
              } else if (keys.includes(key)) {
                api[key] = function () {
                  return artifactPromise.then(function (_) {
                    return _[key];
                  });
                };
              }
            });

            if (keys.includes('assets')) {
              (function () {
                var lookup = function lookup(name) {
                  return function (_ref) {
                    var _ref$assets = _ref.assets,
                        assets = _ref$assets === undefined ? {} : _ref$assets;
                    return assets[name] || NOT_FOUND;
                  };
                };

                var lookupForTheme = function lookupForTheme(name) {
                  return function (_ref2) {
                    var _ref2$assets = _ref2.assets,
                        assets = _ref2$assets === undefined ? {} : _ref2$assets;

                    var themedAssets = assets[themeName];
                    if (themedAssets && themedAssets[name]) {
                      return themedAssets[name];
                    }
                    return NOT_FOUND;
                  };
                };

                var provide = function provide(_ref3) {
                  var content = _ref3.content;
                  return content || null;
                };
                var provideUrl = function provideUrl(_ref4) {
                  var url = _ref4.url;
                  return url || null;
                };

                api.asset = function (name) {
                  return artifactPromise.then(lookup(name)).then(provide);
                };

                api.assetUrl = function (name) {
                  return artifactPromise.then(lookup(name)).then(provideUrl);
                };

                api.assetForTheme = function (name) {
                  return artifactPromise.then(lookupForTheme(name)).then(provide);
                };

                api.assetUrlForTheme = function (name) {
                  return artifactPromise.then(lookupForTheme(name)).then(provideUrl);
                };
              })();
            }

            return api;
          }
        }
      }

      /***/
    },
    /* 15 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__utilities_object__ = __webpack_require__(0);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__runtime_browser__ = __webpack_require__(10);
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * A browser mock where the URL and base URL can be set without affecting the actual document location.
       *
       * Also provides a mock `console` where the most important log methods are available.
       * If other methods need to be mocked, a custom console should be passed through the fake environment.
       *
       * @param {Object} [fakeEnvironment]
       *    optional options to override the behavior of the mock
       * @param {Location} [fakeEnvironment.locationMock=window.location]
       *    a specific value to return from the `location()` mock
       * @param {Console} [fakeEnvironment.consoleMock]
       *    a specific console to use for the `console()` mock instead of the default fake console
       *
       * @return {Browser}
       *    a fresh mock instance
       */
      function create() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            locationMock = _ref.locationMock,
            consoleMock = _ref.consoleMock;

        var browser = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__runtime_browser__["a" /* create */])();
        var mockFetchResponses = [];

        var api = {
          location: jasmine.createSpy('browser.location').and.callFake(function () {
            return api.locationMock;
          }),
          resolve: jasmine.createSpy('browser.resolve').and.callFake(browser.resolve),
          console: jasmine.createSpy('browser.console').and.callFake(function () {
            return api.consoleMock;
          }),
          fetch: jasmine.createSpy('fetch').and.callFake(fakeFetch),

          /**
           * Can be used by tests to spy on `location()`-methods, or to modify the location mock afterwards.
           *
           * @type {Location}
           * @memberof Browser
           */
          locationMock: locationMock || browser.location(),

          /**
           * Can be used by tests to spy on `console()`-methods, or to modify the console mock afterwards.
           *
           * @type {Console}
           * @memberof Browser
           */
          consoleMock: consoleMock || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["a" /* tabulate */])(function (method) {
            return jasmine.createSpy('console.' + method);
          }, ['log', 'debug', 'info', 'warn', 'error', 'trace']),

          /**
           * Add a mock `fetch()` response.
           * When clients use `fetch` with the specified URL (directly, not through a `Request` object), they will
           * be served an Object that has the corresponding value as its `text()` result.
           *
           * @param {String} url
           *    a URL to mock a response for
           * @param {String} value
           *    the value to return (will be transformed using JSON.stringify)
           * @param {String} [method='GET']
           *    the HTTP method to use
           *
           * @memberof Browser
           */
          respondWith: function respondWith(url, value) {
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';

            mockFetchResponses.push({ method: method, url: url, value: value });
          },

          /**
           * Reset the mock `fetch()` responses
           * @memberof Browser
           */
          reset: function reset() {
            mockFetchResponses.length = 0;
          }
        };

        return api;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function fakeFetch(url, optionalOptions) {
          var options = Object.assign({ method: 'GET' }, optionalOptions);
          var method = options.method;

          var response = mockFetchResponses.filter(function (_) {
            return _.url === url && _.method === method;
          })[0];
          return response === undefined ? Promise.reject() : Promise.resolve({
            text: function text() {
              return Promise.resolve(JSON.stringify(response.value));
            }
          });
        }
      }

      /***/
    },
    /* 16 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(1);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__runtime_event_bus__ = __webpack_require__(11);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__configuration_mock__ = __webpack_require__(2);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__log_mock__ = __webpack_require__(3);
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Allows to create mock implementations of {@link EventBus}, compatible to the "axEventBus" and
       * "axGlobalEventBus" injections.
       *
       * @module event_bus_mock
       */

      /**
       * Creates a mock {@link EventBus}, compatible to the "axEventBus" injection of a widget.
       *
       * If no custom tick-scheduler function is passed through the options, the returned event bus has a method
       * `flush`, to synchronously deliver all pending events, until no events are left.
       *
       * @param {Object} [options]
       *    additional options
       * @param {Object} [options.nextTick]
       *    an alternative callback for scheduling the next event bus cycle (such as window.setTimeout)
       * @param {Object} [options.errorHandler]
       *    an alternative error handler, e.g. to inspect error conditions during test
       *
       * @return {EventBusMock}
       *    a fresh mock instance
       */
      function create() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            nextTick = _ref.nextTick,
            errorHandler = _ref.errorHandler;

        var config = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__configuration_mock__["a" /* create */])({ eventBusTimeoutMs: 1000 });
        var waiting = [];
        var fallbackTick = function fallbackTick(f) {
          waiting.push(f);
        };

        /**
         * A mock version of {@link EventBus}.
         *
         * Offers spied-upon version of the usual axHeartbeat methods, as well as a `flush` method for synchronous
         * scheduling of heartbeat events, and a `reset` methods to clear all listeners.
         *
         * @name EventBusMock
         * @constructor
         * @extends EventBus
         */
        var eventBus = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__runtime_event_bus__["a" /* create */])(config, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__log_mock__["a" /* create */])(), nextTick || fallbackTick, setTimeout, errorHandler);

        /**
         * @memberof {EventBusMock}
         */
        eventBus.flush = function () {
          __WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */].state(!nextTick, 'eventBusMock.flush cannot be used with a custom nextTick');
          while (waiting.length) {
            waiting.shift()();
          }
        };

        spyOn(eventBus, 'addInspector').and.callThrough();
        spyOn(eventBus, 'subscribe').and.callThrough();
        spyOn(eventBus, 'publish').and.callThrough();
        spyOn(eventBus, 'publishAndGatherReplies').and.callThrough();

        return eventBus;
      }

      /***/
    },
    /* 17 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__browser_mock__ = __webpack_require__(15);
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Allows to create mock implementations of {@link FlowService}, compatible to the "axFlowService" injection.
       *
       * @module flow_service_mock
       */

      /**
       * Creates a mock for the `axFlowService` injection of a widget.
       *
       * @param {Object} [dependencies={}]
       *   optional service dependencies to be used by the mock flow service
       * @param {AxBrowser} [dependencies.browser]
       *   a (mock) browser to resolve the location when creating absolute mock URLs
       *
       * @return {AxFlowServiceMock}
       *    a mock of `axFlowService` that can be spied and/or mocked with additional items
       */
      function create() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$browser = _ref.browser,
            browser = _ref$browser === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__browser_mock__["a" /* create */])() : _ref$browser;

        /**
         * A mock version of the {@link FlowService} that does not rely on an actual flow definition.
         *
         * By default, the mock will simply return '/mockPath' for any call to `constructPath`, and the remaining
         * methods behave accordingly. All methods are spies, so their arguments may be inspected and their return
         * value may be modified using `and.callFake`.
         *
         * @name AxFlowServiceMock
         * @constructor
         * @extends AxFlowService
         */
        var api = {
          constructPath: spy('constructPath', function () {
            return '/mockPath';
          }),
          constructAnchor: spy('constructAnchor', function () {
            return '#' + api.constructPath.apply(api, arguments);
          }),
          constructAbsoluteUrl: spy('constructAbsoluteUrl', function () {
            var loc = browser.location();
            return loc.protocol + '://' + loc.host + api.constructPath.apply(api, arguments);
          })
        };

        return api;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function spy(name, fake) {
          return jasmine.createSpy('axFlowServiceMock.' + name).and.callFake(fake);
        }
      }

      /***/
    },
    /* 18 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Allows to create mock implementations of {@link Heartbeat}, compatible to the "axHeartbeat" injection.
       *
       * @module heartbeat_mock
       */

      /**
       * Creates a mock for the "axHeartbeat" injection of a widget.
       *
       * @return {HeartbeatMock}
       *    a fresh mock instance
       */
      function create() {
        var beforeNext = [];
        var next = [];
        var afterNext = [];

        /**
         * A mock version of {@link Heartbeat}, with additional methods.
         *
         * Offers spied-upon version of the usual axHeartbeat methods, as well as a `flush` method for synchronous
         * scheduling of heartbeat events, and a `reset` methods to clear all listeners.
         *
         * @name HeartbeatMock
         * @constructor
         * @extends Heartbeat
         */
        var mock = {
          onBeforeNext: function onBeforeNext(f) {
            beforeNext.push(f);
          },
          onNext: function onNext(f) {
            next.push(f);
          },
          onAfterNext: function onAfterNext(f) {
            afterNext.push(f);
          },

          /**
           * Reset the internal state of the mock, clearing all `onBeforeNext`, `onNext` and `onAfterNext`
           * callbacks.
           *
           * @memberof HeartbeatMock
           */
          reset: function reset() {
            beforeNext = [];
            next = [];
            afterNext = [];
          },

          /**
           * If any `onNext` callbacks have been schedules, synchronously runs all scheduled `onBeforeNext`,
           * `onNext` and `onAfterNext` callbacks, clearing the corresponding queues in the process.
           *
           * @memberof HeartbeatMock
           */
          flush: function flush() {
            if (next.length === 0) {
              return;
            }
            [beforeNext, next, afterNext].forEach(function (queue) {
              while (queue.length) {
                queue.shift()();
              }
            });
          }
        };

        spyOn(mock, 'onNext').and.callThrough();
        spyOn(mock, 'onAfterNext').and.callThrough();
        spyOn(mock, 'onBeforeNext').and.callThrough();

        return mock;
      }

      /***/
    },
    /* 19 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__utilities_object__ = __webpack_require__(0);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__artifact_provider_mock__ = __webpack_require__(14);
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Allows instantiate a mock implementations of {@link AxAssets}, compatible to the "axAssets" injection.
       *
       * @module widget_services_assets_mock
       */

      /**
       * Creates a mock for the "axAssets" injection of a widget.
       *
       * Usually the mock is created from a complete, generated assets entry, as described for the {@link AxAssets}
       * service.
       *
       * ```javascript
       *    const artifactAssets = {
       *       'myMessages.json': { content: '{"yo":42}' },
       *       'default.theme': {
       *           'some.png': { url: '/path/to/some.png' }
       *       }
       *    };
       * ```
       *
       * Assets are usually retrieved by the widget under test through the `axAssets` injection, or
       * programmatically like this:
       *
       * ```javascript
       *    const axAssetsMock = create( artifactAssets, 'other.theme' );
       *    console.log( JSON.parse( axAssetsMock( 'myMessages.json' ) ) );  // output: { yo: 42 }
       *    console.log( assetsMock.urlForTheme( 'some.png' ) );  // output: "/path/to/some.png"
       * ```
       *
       * From the test, the mock may be inspected using jasmine:
       *
       * ```javascript
       *    const axAssetsMock = create( artifactAssets );
       *    ...
       *    expect( axAssetsMock ).toHaveBeenCalledWith( 'myMessages.json' );
       *    expect( axAssetsMock.url ).toHaveBeenCalledWith( '/some/url' );
       * ```
       *
       * The specified assets/themedAssets may be replaced afterwards using the `.mock...` methods.
       * Instead of a complete entry, a user-defined entry containing just `assets` and/or `themedAssets` may be
       * used instead. Also, instead of the "default.theme", a custom theme may be passed. In this case, make sure
       * that the mock entry passed to `create` reflects this. Or use the mock
       *
       * ```javascript
       *    const axAssetsMock = create( artifactAssets, 'other.theme' );
       *    console.log( assetsMock.urlForTheme( 'some.png' ) );  // output: null
       *    axAssetsMock.mock( 'myMessages.json', '{"yo": 7}' );
       *    axAssetsMock.mockUrlForTheme( 'some.png', "/path/to/some/other.png" );
       *    console.log( JSON.parse( axAssetsMock( 'myMessages.json' ) ) );  // output: { yo: 7 }
       *    console.log( assetsMock.urlForTheme( 'some.png' ) );  // output: "/path/to/some/other.png"
       * ```
       *
       * @param {Object} [artifactAssets={}]
       *    the assets entry to base the mock on
       * @param {String} [theme='default.theme']
       *    the theme name to use. For portability, keeping the default is recommended.
       * @param {String} [artifactName='mock-widget']
       *    the artifact name, only relevant for error messages
       *
       * @return {AxAssetsMock}
       *    a mock of `axAssets` that can be spied and/or mocked with additional assets
       */
      function create() {
        var artifactAssets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var theme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default.theme';
        var artifactName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'mock-widget';

        var assets = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_object__["f" /* deepClone */])(artifactAssets);

        var artifactsProviderMock = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__artifact_provider_mock__["a" /* create */])(theme);
        artifactsProviderMock.forWidget.mock(artifactName, {
          descriptor: { name: artifactName },
          assets: assets
        });
        var widgetArtifactsMock = artifactsProviderMock.forWidget(artifactName);
        var spy = function spy(name, backend) {
          return jasmine.createSpy(name).and.callFake(backend);
        };

        /**
         * An AxAssets-compatible mock.
         *
         * See {@link #create} for usage details.
         *
         * @name AxAssetsMock
         * @constructor
         * @extends AxAssets
         */
        var assetServiceMock = spy('axAssets', widgetArtifactsMock.asset);

        assetServiceMock.url = spy('axAssets.url', widgetArtifactsMock.assetUrl);
        assetServiceMock.forTheme = spy('axAssets.forTheme', widgetArtifactsMock.assetForTheme);
        assetServiceMock.urlForTheme = spy('axAssets.urlForTheme', widgetArtifactsMock.assetUrlForTheme);

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Mock a regular asset.
         *
         * @param {String} path
         *    the asset path to mock
         * @param {String} content
         *    the asset contents that the mock should provide. Omit to discard the asset content.
         *
         * @memberof AxAssetsMock
         */
        assetServiceMock.mock = function (path, content) {
          assets[path] = assets[path] || {};
          assets[path].content = content;
        };

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Mock a regular asset URL.
         *
         * @param {String} path
         *    the asset path to mock
         * @param {String} [url]
         *    the asset URL to provide. Omit to discard the asset URL.
         *
         * @memberof AxAssetsMock
         */
        assetServiceMock.mockUrl = function (path, url) {
          assets[path] = assets[path] || {};
          assets[path].url = url;
        };

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Mock an asset for the current theme.
         *
         * @param {String} path
         *    the theme-dependent asset path to mock
         * @param {String} [content]
         *    the asset content to provide. Omit to discard the asset content.
         *
         * @memberof AxAssetsMock
         */
        assetServiceMock.mockForTheme = function (path, content) {
          var themedAssets = assets[theme] = assets[theme] || {};
          themedAssets[path] = themedAssets[path] || {};
          themedAssets[path].content = content;
        };

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Mock an asset URL for the current theme.
         *
         * @param {String} path
         *    the theme-dependent asset path to mock
         * @param {String} [url]
         *    the asset URL to provide. Omit to discard the asset URL.
         *
         * @memberof AxAssetsMock
         */
        assetServiceMock.mockUrlForTheme = function (path, url) {
          var themedAssets = assets[theme] = assets[theme] || {};
          themedAssets[path] = themedAssets[path] || {};
          themedAssets[path].url = url;
        };

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        return assetServiceMock;
      }

      /***/
    },
    /* 20 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony export (immutable) */
      __webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Allows to instantiate a mock implementation of {@link AxI18n}, compatible to "axI18n" injection.
       *
       * @module i18n_mock
       */

      /**
       * Creates a mock for the "axI18n" injection of a widget.
       *
       * The mock needs to be backed by an actual i18n implementation. In widget tests, the provided implementation
       * should usually use the same context as the rest of the widget test. Feature-specific locales constructed
       * multiple times using the `forFeature` method will retain their spies over time, as long as the same mock
       * object is used.
       *
       * @param {AxI18n} i18n
       *    a specific backing {@link AxI18n} instance to return localizations from
       *
       * @return {AxI18n}
       *    a mock of `axI18n` that can be spied upon and/or mocked with additional items
       */
      function create(i18n) {

        // feature instances are re-used for spies to work across `forFeature` calls
        var byFeature = {};

        var api = Object.assign({
          forFeature: forFeature,
          release: i18n.release
        }, forFeature('i18n'));

        spyOn(api, 'release').and.callThrough();

        return api;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function forFeature(path) {
          if (!(path in byFeature)) {
            (function () {
              var i18nForFeature = i18n.forFeature(path);
              Object.keys(i18nForFeature).forEach(function (method) {
                spyOn(i18nForFeature, method).and.callThrough();
              });
              byFeature[path] = i18nForFeature;
            })();
          }
          return byFeature[path];
        }
      }

      /***/
    },
    /* 21 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__storage_mock__ = __webpack_require__(4);
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Allows to instantiate a mock implementations of {@link AxStorage}, compatible to the "axStorage" injection.
       *
       * @module widget_services_storage_mock
       */

      /**
       * Creates a mock for the `axStorage` injection of a widget.
       *
       * @return {AxStorageMock}
       *    a mock of `axStorage` that can be spied and/or mocked with additional items
       */
      function create() {

        var globalStorageMock = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__storage_mock__["a" /* create */])();
        var namespace = 'mock';

        var local = globalStorageMock.getLocalStorage(namespace);
        var session = globalStorageMock.getSessionStorage(namespace);

        /**
         * The AxStorageMock provides the same API as AxStorage, with the additional property
         * {@link #mockBackends} to inspect and/or simulate mock values in the storage backend.
         *
         * @name AxStorageMock
         * @constructor
         * @extends AxStorage
         */
        return {
          local: local,
          session: session,

          /**
           * Provides access to the backing stores for `local` and `session` storage.
           *
           * Contains `local` and `session` store properties. The stores are plain objects whose properties
           * reflect any setItem/removeItem operations. When properties are set on a store, they are observed
           * by `getItem` calls on the corresponding axStorage API.
           *
           * @memberof AxStorageMock
           */
          mockBackends: {
            local: globalStorageMock.mockBackends.local[namespace].store,
            session: globalStorageMock.mockBackends.session[namespace].store
          }
        };
      }

      /***/
    },
    /* 22 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";
      /* harmony import */
      var __WEBPACK_IMPORTED_MODULE_0__utilities_assert__ = __webpack_require__(1);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__widget_services_area_helper_mock__ = __webpack_require__(5);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__runtime_widget_services_visibility__ = __webpack_require__(13);
      /* harmony export (immutable) */__webpack_exports__["a"] = create;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */

      /**
       * Allows to instantiate a mock implementations of {@link AxVisibility}, compatible to the "axVisibility"
       * widet service injection.
       *
       * @module widget_services_visibility_mock
       */

      /**
       * Creates a mock for the widget-specific "axVisibility" injection.
       *
       * @param {AxContext} context
       *   an object with an `eventBus` and a `widget.area`.
       *
       * @return {AxVisibilityMock}
       *   an `axVisibility`-compatible mock object
       */
      function create(context) {
        var eventBus = context.eventBus,
            area = context.widget.area;

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(eventBus).hasType(Object).isNotNull();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utilities_assert__["a" /* default */])(area).hasType(String).isNotNull();
        var areaHelperMock = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__widget_services_area_helper_mock__["a" /* create */])();

        var mockStatus = false;

        /**
         * A mock version of {@link AxVisibility}, the widget-specific "axVisibility" injection.
         *
         * The mock:
         * - spies on the regular methods,
         * - turns the update-methods into no-ops (but you can still inspect their spies),
         * - offers additional `mockShow` and `mockHide` methods, which internally use the context (mock) event bus
         *   to allow testing features that involve `track/onShow/onHide/onChange/unsubscribe`.
         *   If the (mock) event bus has a flush method, using `mockShow` and `mockHide` will automatically flush.
         *
         * @name AxVisibilityMock
         * @constructor
         * @extends AxMock
         */
        var visibility = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__runtime_widget_services_visibility__["a" /* create */])(context, areaHelperMock);
        Object.keys(visibility).forEach(function (method) {
          if (['updateAreaVisibility', 'updateWidgetVisibility'].includes(method)) {
            spyOn(visibility, method).and.callFake(function () {
              return Promise.resolve();
            });
          } else if (method === 'isVisible') {
            spyOn(visibility, method).and.callFake(function () {
              return mockStatus;
            });
          } else {
            spyOn(visibility, method).and.callThrough();
          }
        });

        /**
         * Simulates the widget's containing area becoming visible.
         * Flushes the underlying event bus mock as a side-effect.
         *
         * @memberof AxVisibilityMock
         * @type {Function}
         */
        visibility.mockShow = mockPublish(true);

        /**
         * Simulates the widget's containing area becoming hidden.
         * Flushes the underlying event bus mock as a side-effect.
         *
         * @memberof AxVisibilityMock
         * @type {Function}
         */
        visibility.mockHide = mockPublish(false);
        return visibility;

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function mockPublish(visible) {
          return function () {
            mockStatus = visible;
            eventBus.publish('didChangeAreaVisibility.' + area + '.' + visible, { area: area, visible: visible });
            if (eventBus.flush) {
              eventBus.flush();
            }
          };
        }
      }

      /***/
    },
    /* 23 */
    /***/function (module, exports) {

      var g;

      // This works in non-strict mode
      g = function () {
        return this;
      }();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if ((typeof window === 'undefined' ? 'undefined' : _typeof3(window)) === "object") g = window;
      }

      // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}

      module.exports = g;

      /***/
    },
    /* 24 */
    /***/function (module, __webpack_exports__, __webpack_require__) {

      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_laxar__ = __webpack_require__(8);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_laxar__);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__ = __webpack_require__(7);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2_laxar_tooling_lib_ajv__ = __webpack_require__(6);
      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2_laxar_tooling_lib_ajv___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_laxar_tooling_lib_ajv__);
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "TEST_WIDGET_ID", function () {
        return TEST_WIDGET_ID;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "fixtures", function () {
        return fixtures;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "eventBus", function () {
        return eventBus;
      });
      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "widget", function () {
        return widget;
      });
      /* harmony export (immutable) */__webpack_exports__["tearDown"] = tearDown;
      /* harmony export (immutable) */__webpack_exports__["triggerStartupEvents"] = triggerStartupEvents;
      /* harmony export (immutable) */__webpack_exports__["setupForWidget"] = setupForWidget;
      /* harmony export (immutable) */__webpack_exports__["createSetupForWidget"] = createSetupForWidget;
      /**
       * Copyright 2016 aixigo AG
       * Released under the MIT license.
       * http://laxarjs.org/license
       */
      /**
       * A testing framework for LaxarJS widgets.
       *
       * @module laxar-mocks
       */

      var widgetPrivateApi = {};

      // The AngularJS adapter messes with the regular Promise API.
      // To guarantee AngularJS-free scheduling of `widget.render` we need to hold on to the original.
      var Promise = window.Promise;
      var nextTick = function nextTick(f) {
        Promise.resolve().then(f);
      };

      var noOp = function noOp() {};

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * The ID used for the widget instance loaded in the test environment.
       *
       * @name TEST_WIDGET_ID
       * @type {String}
       */
      var TEST_WIDGET_ID = 'test-widget';

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Can be used to specify setup-fixtures for widget/activity tests.
       *
       * Spec-runners may add entries to this map to provision widget specs with options that will automatically be
       * picked up by `setupForWidget`. For example, the laxar-mocks spec-loader for webpack puts the `artifacts`,
       * `adapter` and `descriptor` options here.
       *
       * Options passed by the spec-test to {@link #setupForWidget} will take precedence over these values.
       *
       * @name fixtures
       * @type {Object}
       */
      var fixtures = {};

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      var eventBus = void 0;

      var adapterInstancePromise = void 0;
      var adapter = void 0;
      var anchorElement = void 0;
      var artifacts = void 0;
      var configuration = void 0;
      var laxarServices = void 0;

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * The API to instrument and inspect the widget under test. In addition to the listed methods it has all
       * injections for the specific widget technology set as properties. E.g. for every widget technology there
       * will be `axEventBus` and `axContext` properties, but for AngularJS widgets there will be an additional
       * `$scope` property. Note that these are only available after `load()` has been called and the widget
       * controller is loaded.
       *
       * The methods of the event bus instance available as `axEventBus` are already provided with
       * [Jasmine spies](http://jasmine.github.io/2.3/introduction.html#section-Spies).
       *
       * @name Widget
       */
      var widget = {

        /**
         * Allows the user to configures the widget features before loading.
         *
         * Configuration may be specified using
         *  - a configuration object, similar to a `features` key within a page descriptor,
         *  - a combination of feature path and value, allowing to conveniently override individual values.
         *
         * Shorthands may be used:
         *
         * ```js
         * beforeEach( () => {
         *    testing.widget.configure( 'search.resource', 'search' );
         * } );
         * ```
         *
         * If no previous configuration was given for other `search` sub-keys, this is equivalent to the following:
         *
         * ```js
         * beforeEach( () => {
         *    testing.widget.configure( {
         *       search: {
         *          resource: 'search'
         *       }
         *    } );
         * } );
         * ```
         *
         * @param {String|Object} keyOrConfiguration
         *    either an object for the full features configuration or the path to the property to configure
         * @param {*} [optionalValue]
         *    if `keyOrConfiguration` is a string, this is the value to set the feature configuration to
         *
         * @memberOf Widget
         */
        configure: function configure(keyOrConfiguration, optionalValue) {
          if (!widgetPrivateApi.configure) {
            throw new Error('laxar-mocks: createSetupForWidget needs to be called prior to configure.');
          }
          widgetPrivateApi.configure(keyOrConfiguration, optionalValue);
        },

        /**
         * Loads the given widget and instantiates its controller. As this function is asynchronous, it receives
         * a Jasmine `done` callback that is called when the widget is ready.
         *
         * The instance ID (`axContext.widget.id`) for widgets loaded by laxar-mocks is always `testWidget`.
         * Their containing widget area is always `content`.
         *
         * The simplest way to call this function is by passing it to its own `beforeEach` call:
         * ```js
         * beforeEach( testing.widget.load );
         * ```
         *
         * @param {Function} done
         *    callback to notify Jasmine that the asynchronous widget loading has finished
         *
         * @memberOf Widget
         */
        load: function load(done) {
          if (!widgetPrivateApi.load) {
            throw new Error('laxar-mocks: createSetupForWidget needs to be called prior to load.');
          }
          if (typeof done !== 'function') {
            throw new Error('laxar-mocks: widget.load must be called with a Jasmine done-callback function.');
          }
          widgetPrivateApi.load().catch(handleErrorForJasmine).then(function () {
            return nextTick(done);
          });
        },

        /**
         * Renders the widget's template by calling the appropriate widget adapter and appends it within a
         * container div to the test's DOM. The widget DOM fragement will be returned in order to simulate
         * user interaction on it. Calling `tearDown()` will remove it again.
         *
         * Note that calling this method for an activity has no effect and hence is unnessecary.
         *
         * @return {Node}
         *    the widget DOM fragment
         *
         * @memberOf Widget
         */
        render: function render() {
          widgetPrivateApi.renderTo(anchorElement);
          return anchorElement.firstChild;
        }
      };

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function decoratedAdapter(adapter) {
        return {
          technology: adapter.technology,
          bootstrap: function bootstrap(artifacts, services, domRoot) {
            laxarServices = services;
            eventBus = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["a" /* createAxEventBusMock */])();
            var adapterFactory = adapter.bootstrap(artifacts, services, domRoot);
            return Object.assign({}, adapterFactory, {
              serviceDecorators: createServiceDecoratorsFactory(adapterFactory),
              create: function create() {
                adapterInstancePromise = Promise.resolve(adapterFactory.create.apply(adapterFactory, arguments));
                return adapterInstancePromise;
              }
            });
          }
        };

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

        function createServiceDecoratorsFactory(adapterFactory) {
          return function serviceDecorators() {
            return Object.assign({}, (adapterFactory.serviceDecorators || noOp)(), {
              axAreaHelper: function axAreaHelper() {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["b" /* createAxAreaHelperMock */])({ widget: { id: TEST_WIDGET_ID } });
              },
              axAssets: function axAssets() {
                var assets = artifacts.widgets[0].assets;

                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["c" /* createAxAssetsMock */])(assets);
              },
              axConfiguration: function axConfiguration() {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["d" /* createAxConfigurationMock */])(configuration);
              },
              axEventBus: function axEventBus(eventBus) {
                var methods = ['subscribe', 'publish', 'publishAndGatherReplies', 'addInspector'];
                methods.forEach(function (method) {
                  spyOn(eventBus, method).and.callThrough();
                });
                return eventBus;
              },
              axFlowService: function axFlowService() {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["e" /* createAxFlowServiceMock */])();
              },
              axGlobalEventBus: function axGlobalEventBus() {
                return eventBus;
              },
              axGlobalLog: function axGlobalLog() {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["f" /* createAxLogMock */])();
              },
              axGlobalStorage: function axGlobalStorage() {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["g" /* createAxGlobalStorageMock */])();
              },
              axHeartbeat: function axHeartbeat() {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["h" /* createAxHeartbeatMock */])();
              },
              axI18n: function axI18n(i18n) {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["i" /* createAxI18nMock */])(i18n);
              },
              axLog: function axLog() {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["f" /* createAxLogMock */])();
              },
              axStorage: function axStorage() {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["j" /* createAxStorageMock */])();
              },
              axVisibility: function axVisibility() {
                return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar_laxar_widget_service_mocks__["k" /* createAxVisibilityMock */])();
              }
            });
          };
        }
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Removes any DOM fragments of the widget and calls the appropriate destructors. It is advised to call
       * this once in an `afterEach` call. Passing this function directly to `afterEach` works as well.
       *
       * Example.
       * ```js
       * afterEach( axMocks.tearDown );
       * ```
       */
      function tearDown() {
        widgetPrivateApi.destroy();
        if (anchorElement && anchorElement.parentElement) {
          anchorElement.parentElement.removeChild(anchorElement);
          anchorElement = null;
        }
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      var defaultEvents = [{
        topic: 'didChangeLocale',
        subtopics: {
          'default': {
            locale: 'default',
            languageTag: 'en'
          }
        }
      }, {
        topic: 'didChangeLocale',
        subtopics: {
          'default': {
            theme: 'default'
          }
        }
      }, {
        topic: 'beginLifecycleRequest',
        subtopics: {
          'default': {
            lifecycleId: 'default'
          }
        }
      }, {
        topic: 'didChangeAreaVisibility',
        subtopics: {
          'content.true': {
            area: 'content',
            visible: true
          }
        }
      }, {
        topic: 'didNavigate',
        subtopics: {
          testing: {
            place: 'testing',
            target: '_self',
            data: {}
          }
        }
      }];

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Triggers all events normally published by the runtime after instantiation of the controller. This
       * includes the following events, listed with their payloads in the order they are published:
       *
       * ###### Default Lifecycle Events
       *
       * **1. didChangeLocale.default:**
       * ```js
       * {
       *    locale: 'default',
       *    languageTag: 'en'
       * }
       * ```
       *
       * **2. didChangeTheme.default:**
       * ```js
       * {
       *    theme: 'default'
       * }
       * ```
       *
       * **3. beginLifecycleRequest.default:**
       * ```js
       * {
       *    lifecycleId: 'default'
       * }
       * ```
       *
       * **4. didChangeAreaVisibility.content.true:**
       * ```js
       * {
       *    area: 'content',
       *    visible: true
       * }
       * ```
       *
       * **5. didNavigate.testing:**
       * ```js
       * {
       *    place: 'testing',
       *    target: '_self',
       *    data: {}
       * }
       * ```
       *
       * ###### Customizing the Lifecycle Events
       *
       * Via the `optionalEvents` argument it is possible to add events with different topic suffixes, to
       * overwrite events defined above, or to completely prevent from triggering any of the events. To do so
       * pass a map, where the primary topics are the keys where each value is a map from topic suffix to
       * payload. If the value is `null`, the specific event is not published.
       *
       * Example:
       * ```js
       * axMocks.triggerStartupEvents( {
       *    didChangeLocale: {
       *       alternative: {
       *          locale: 'alternative',
       *          languageTag: 'de'
       *       }
       *    },
       *    didChangeTheme: {
       *       'default': null
       *    },
       *    didNavigate: {
       *       testing: {
       *          place: 'testing',
       *          target: '_self',
       *          data: {
       *             user: 'Peter',
       *             articleId: '1234'
       *          }
       *       }
       *    }
       * } );
       * ```
       *
       * The effect of this call is the following:
       * 1. There will be two *didChangeLocale* events: *didChangeLocale.default*, carrying the language tag *en*
       *    in its payload, and *didChangeLocale.alternative*, carrying the language tag *de* in its payload.
       * 2. There will be no *didChangeTheme* event, since the only pre-configured one is set to `null`.
       * 3. The parameters of the *didNavigate.testing* event are changed to be
       *    `{ user: 'Peter', articleId: '1234' }`.
       *
       * @param {Object} [optionalEvents]
       *    optional map of user defined events
       *
       */
      function triggerStartupEvents() {
        var optionalEvents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        defaultEvents.map(function (_ref) {
          var topic = _ref.topic,
              subtopics = _ref.subtopics;
          return {
            topic: topic,
            subtopics: Object.assign({}, subtopics, optionalEvents[topic])
          };
        }).forEach(function (_ref2) {
          var topic = _ref2.topic,
              subtopics = _ref2.subtopics;

          Object.keys(subtopics).filter(function (key) {
            return subtopics[key] != null;
          }).forEach(function (key) {
            eventBus.publish(topic + '.' + key, subtopics[key]);
          });
          eventBus.flush();
        });
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Creates the setup function for a widget test, using externally provided fixtures.
       *
       * This is the recommended way to setup your widget test. For this to work, *this* module's `fixtures` export
       * needs to be initialized with the following properties:
       *
       *   - `descriptor` - the widget's JSON descriptor,
       *   - `adapter` - the adapter module for the widget's integration technology (use `null` for "plain"),
       *   - `artifacts` - an artifact listing containing the assets of the widget and its controls.
       *
       * When webpack loads spec-tests through the `laxar-mocks/spec-loader`, fixtures are provided automatically.
       * To manually provide these fixtures, controlling every aspect of your test environment, pass them using the
       * named `optionalOptions` parameter.
       *
       * The returned function is asynchronous and should simply be passed to `beforeEach`. By doing so, the Jasmine
       * `done` callback is handled under the hood.
       *
       * ###### Example (ES 2015) `example-widget.spec.js`:
       *
       * ```js
       * import * as axMocks from 'laxar-mocks';
       *
       * describe( 'An ExampleWidget', () => {
       *    beforeEach( testing.setupForWidget() );
       *    // ... widget configuration, loading and your tests ...
       *    afterEach( axMocks.tearDown );
       * } );
       * ```
       *
       * When using the spec-loader, something like the following code will be generated:
       *
       * ```js
       * ( fixtures => {
       *    fixtures.descriptor = require( '../widget.json' );
       *    fixtures.artifacts = require( 'laxar-loader?widget=example-widget' );
       *    fixtures.adapter = require( 'laxar-' + fixtures.descriptor.integration.technology + '-adapter' );
       * } )( require( 'laxar-mocks' ).fixtures );
       * import * as axMocks from 'laxar-mocks';
       *
       * describe( 'An ExampleWidget', () => {
       *    // ... same as above ...
       * } );
       * ```
       * @param {Object} [optionalOptions]
       *    optional map of options
       * @param {Object} [optionalOptions.adapter=undefined]
       *    a widget-adapter matching the integration technology of the widget; omit if "plain"
       * @param {Object} [optionalOptions.artifacts={}]
       *    artifacts listing for this widget and its controls. Because it is hard to manually produce this
       *    correctly, using the laxar-mocks spec-loader is recommended
       * @param {Object} [optionalOptions.configuration={ baseHref: '/' }]
       *    mock configuration data to use for the `axConfiguration` injection of the widget
       * @param {Object} [optionalOptions.descriptor={}]
       *    the contents of this widget's `widget.json`, including the JSON schema for the widget features
       *
       * @return {Function}
       *    a function to directly pass to `beforeEach`, accepting a Jasmine `done` callback
       */
      function setupForWidget() {
        var optionalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(optionalOptions).hasType(Object);
        var setupFixtures = Object.assign({ configuration: { baseHref: '/' } }, fixtures, optionalOptions);
        var _setupFixtures$adapte = setupFixtures.adapter;
        adapter = _setupFixtures$adapte === undefined ? __WEBPACK_IMPORTED_MODULE_0_laxar__["plainAdapter"] : _setupFixtures$adapte;
        artifacts = setupFixtures.artifacts;
        var _setupFixtures$config = setupFixtures.configuration;
        configuration = _setupFixtures$config === undefined ? {} : _setupFixtures$config;
        var descriptor = setupFixtures.descriptor;

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(artifacts).isNotNull('laxar-mocks.setupForWidget: *artifacts* must be set as fixture (use spec-loader) or passed as option');
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(adapter).isNotNull('laxar-mocks.setupForWidget: the *adapter* option must not be set to null');
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(configuration).isNotNull('laxar-mocks.setupForWidget: the *configuration* option must not be set to null');
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(descriptor).isNotNull('laxar-mocks.setupForWidget: *descriptor* must be set as fixture (use spec-loader) or passed as option');

        return function (done) {
          var htmlTemplate = void 0;
          var features = {};
          var loadContext = void 0;

          __WEBPACK_IMPORTED_MODULE_0_laxar__["assert"].state(adapter.technology === descriptor.integration.technology, 'laxar-mocks: Widget is using technology "' + descriptor.integration.technology + '", ' + ('but adapter is for "' + adapter.technology + '". ') + 'Pass the correct adapter as option "adapter" to `createSetupForWidget`.');

          if (anchorElement && anchorElement.parentElement) {
            anchorElement.parentElement.removeChild(anchorElement);
          }
          anchorElement = document.createElement('DIV');
          anchorElement.id = 'widgetContainer';
          document.body.appendChild(anchorElement);

          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["bootstrap"])(anchorElement, {
            widgetAdapters: [decoratedAdapter(adapter)],
            configuration: configuration,
            artifacts: artifacts
          });
          var adapterInstance = void 0;

          widgetPrivateApi.configure = function (keyOrConfiguration, optionalValue) {
            if (typeof keyOrConfiguration === 'string') {
              __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].setPath(features, keyOrConfiguration, optionalValue);
            } else {
              features = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].deepClone(keyOrConfiguration);
            }
          };

          widgetPrivateApi.load = function (done) {
            return laxarServices.widgetLoader.load({
              id: TEST_WIDGET_ID,
              widget: descriptor.name,
              features: validate(features, descriptor)
            }, {
              whenServicesAvailable: function whenServicesAvailable(services) {
                // Grab the widget injections and make them available to tests.
                // Do this lazily to avoid creating services that where not actually injected.
                Object.keys(services).forEach(function (k) {
                  delete widget[k];
                  Object.defineProperty(widget, k, {
                    configurable: true,
                    get: function get() {
                      return services[k];
                    }
                  });
                });
              }
            }).then(function (_) {
              loadContext = _;
              return loadContext.templatePromise;
            }).then(function (_) {
              htmlTemplate = _;
              return adapterInstancePromise;
            }).then(function (_) {
              adapterInstance = _;
            }).then(done);
          };

          widgetPrivateApi.destroy = function () {
            if (loadContext) {
              loadContext.destroy();
              loadContext = null;
            }
            if (adapter.reset) {
              adapter.reset();
            }
          };

          widgetPrivateApi.renderTo = function (container) {
            adapterInstance.domAttachTo(container, htmlTemplate);
          };

          done();
        };
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Creates the setup function for a widget test, using user-provided fixtures.
       *
       * This function exists for backwards compatibility with LaxarJS v1. It is recommended to use
       * {@link #setupForWidget} instead, which does not expect the user to provide descriptor, artifacts listing
       * and adapter module and instead relies on external tooling (such as the `laxar-mocks/spec-loader`).
       *
       * The returned function is asynchronous and should simply be passed to `beforeEach`. By doing so, the Jasmine
       * `done` callback is handled under the hood.
       *
       * **Note:** This method has been deprecated. Use {@link #setupForWidget} instead.
       *
       * ### Example (ES 2015) `example-widget.spec.js`:
       *
       * ```js
       * import * as axMocks from 'laxar-mocks';
       *
       * describe( 'An ExampleWidget', () => {
       *    beforeEach( testing.createSetupForWidget( descriptor, {
       *       artifacts: {
       *          // ... should be generated, see laxar-tooling project for details ...
       *       },
       *       adapter: require( 'laxar-my-adapter' )
       *    } ) );
       *
       *    // ... widget configuration, loading and your tests ...
       *
       *    afterEach( axMocks.tearDown );
       * } );
       * ```
       *
       * @deprecated use {@link #setupForWidget} instead
       *
       * @param {Object} descriptor
       *    the widget descriptor (taken from `widget.json`)
       * @param {Object} [optionalOptions]
       *    optional map of options
       * @param {Object} [optionalOptions.adapter=laxar.plainAdapter]
       *    a technology adapter to use for this widget.
       *    When using a custom integration technology (something other than "plain" or "angular"), pass the
       *    adapter module using this option.
       * @param {Object} [optionalOptions.artifacts={}]
       *    an artifacts listing containing all assets for the widget and its controls
       * @param {Object} [optionalOptions.configuration={}]
       *    mock configuration data to use for the `axConfiguration` injection of the widget
       *
       * @return {Function}
       *    a function to directly pass to `beforeEach`, accepting a Jasmine `done` callback
       */
      function createSetupForWidget(descriptor) {
        var optionalOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (window.console && window.console.warn) {
          window.console.warn('laxar-mocks: DEPRECATION: `createSetupForWidget( args )` should be changed to `setupForWidget()`');
        }
        optionalOptions.descriptor = descriptor;
        return setupForWidget(optionalOptions);
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function validate(features, descriptor) {
        var newFeatures = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].deepClone(features);
        if (descriptor.features) {
          var jsonSchema = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_laxar_tooling_lib_ajv__["create"])();
          var _validate = jsonSchema.compile(descriptor.features, descriptor.name, { isFeaturesValidator: true });

          var valid = _validate(newFeatures);
          if (!valid) {
            throw jsonSchema.error('Validation failed for widget "' + name + '"', _validate.errors);
          }
        }
        return newFeatures;
      }

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////

      function handleErrorForJasmine(err) {
        if (window.console && window.console.error) {
          window.console.error(err);
        }
        jasmine.getEnv().fail(err);
      }

      /***/
    }])
  );
});
//# sourceMappingURL=laxar-mocks.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)(module)))

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(13);

var getEventTarget = __webpack_require__(52);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ?  true ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ?  true ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (true) {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames:  true ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (true) {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }

};

module.exports = EventPluginRegistry;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventPluginRegistry = __webpack_require__(30);
var ReactEventEmitterMixin = __webpack_require__(168);
var ViewportMetrics = __webpack_require__(83);

var getVendorPrefixedEventName = __webpack_require__(202);
var isEventSupported = __webpack_require__(53);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }

});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(29);
var ViewportMetrics = __webpack_require__(83);

var getEventModifierState = __webpack_require__(51);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ?  true ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ?  true ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html


/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var DOMNamespaces = __webpack_require__(42);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(49);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 36 */,
/* 37 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_dom__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_dom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react_dom__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "technology", function() { return technology; });
/* harmony export (immutable) */ __webpack_exports__["bootstrap"] = bootstrap;
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */

/**
 * Implements the LaxarJS adapter API for the integration technology "react":
 * https://github.com/LaxarJS/laxar/blob/master/docs/manuals/adapters.md
 *
 * @module laxar-react-adapter
 */



var noOp = function noOp() {};

var technology = 'react';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function bootstrap(_ref, _ref2) {
   var widgets = _ref.widgets;
   var adapterUtilities = _ref2.adapterUtilities;


   var widgetModules = {};
   var activitySet = {};
   widgets.forEach(function (_ref3) {
      var descriptor = _ref3.descriptor,
          module = _ref3.module;

      widgetModules[descriptor.name] = module;
      if (descriptor.integration.type === 'activity') {
         activitySet[descriptor.name] = true;
      }
   });

   return {
      create: create
   };

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   function create(_ref4) {
      var widgetName = _ref4.widgetName,
          anchorElement = _ref4.anchorElement,
          services = _ref4.services,
          provideServices = _ref4.provideServices;


      var domAttached = false;
      var onDomAvailable = null;
      createController();
      return {
         domAttachTo: domAttachTo,
         domDetach: domDetach
      };

      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      function createController() {
         // backwards compatibility with old-style AMD widgets:
         var module = widgetModules[widgetName].default || widgetModules[widgetName];
         if (!module) {
            throw adapterUtilities.unknownWidget({ technology: technology, widgetName: widgetName });
         }

         var reactServices = {
            axReactRender: function axReactRender(componentInstance) {
               if (domAttached) {
                  __WEBPACK_IMPORTED_MODULE_0_react_dom__["render"](componentInstance, anchorElement);
               }
            }
         };

         var injectionsByName = {};
         var injections = (module.injections || []).map(function (injection) {
            var value = reactServices[injection] || services[injection];
            if (value === undefined) {
               throw adapterUtilities.unknownInjection({ technology: technology, injection: injection, widgetName: widgetName });
            }
            if (injection === 'axReactRender' && activitySet[widgetName]) {
               throw adapterUtilities.activityAccessingDom({ technology: technology, injection: injection, widgetName: widgetName });
            }
            injectionsByName[injection] = value;
            return value;
         });
         provideServices(injectionsByName);

         var _ref5 = module.create.apply(module, _toConsumableArray(injections)) || {};

         var _ref5$onDomAvailable = _ref5.onDomAvailable;
         onDomAvailable = _ref5$onDomAvailable === undefined ? noOp : _ref5$onDomAvailable;
      }

      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      function domAttachTo(areaElement) {
         domAttached = true;
         areaElement.appendChild(anchorElement);
         onDomAvailable();
      }

      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      function domDetach() {
         domAttached = false;
         var parent = anchorElement.parentNode;
         if (parent) {
            parent.removeChild(anchorElement);
         }
      }
   }
}

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(116);


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMLazyTree = __webpack_require__(20);
var Danger = __webpack_require__(144);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(8);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(49);
var setInnerHTML = __webpack_require__(35);
var setTextContent = __webpack_require__(90);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (true) {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (true) {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (true) {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: { toIndex: update.toIndex, content: update.content.toString() }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (true) {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactErrorUtils = __webpack_require__(47);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (true) {
       true ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (true) {
       true ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (true) {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

     true ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (true) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (true) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (true) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ?  true ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(18);
var ReactPropTypesSecret = __webpack_require__(82);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: React.PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
         true ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ?  true ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (true) {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      // $FlowFixMe https://github.com/facebook/flow/issues/2336
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(12);
var ReactInstanceMap = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(8);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (true) {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
       true ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (true) {
     true ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (true) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
         true ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (true) {
      ReactInstrumentation.debugTool.onSetState();
       true ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ?  true ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }

};

module.exports = ReactUpdateQueue;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var emptyFunction = __webpack_require__(9);
var warning = __webpack_require__(2);

var validateDOMNesting = emptyFunction;

if (true) {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
       true ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
         true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
         true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(17);

var ReactNoopUpdateQueue = __webpack_require__(57);

var canDefineProperty = __webpack_require__(59);
var emptyObject = __webpack_require__(23);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  true ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (true) {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
           true ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (true) {
    var constructor = publicInstance.constructor;
     true ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (true) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (true) {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 61 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function() {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		var result = [];
		for(var i = 0; i < this.length; i++) {
			var item = this[i];
			if(item[2]) {
				result.push("@media " + item[2] + "{" + item[1] + "}");
			} else {
				result.push(item[1]);
			}
		}
		return result.join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};


/***/ }),
/* 62 */,
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/glyphicons-halflings-regular.eot";

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {  /* globals require, module */

  

  /**
   * Module dependencies.
   */

  var pathtoRegexp = __webpack_require__(110);

  /**
   * Module exports.
   */

  module.exports = page;

  /**
   * Detect click event
   */
  var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';

  /**
   * To work properly with the URL
   * history.location generated polyfill in https://github.com/devote/HTML5-History-API
   */

  var location = ('undefined' !== typeof window) && (window.history.location || window.location);

  /**
   * Perform initial dispatch.
   */

  var dispatch = true;


  /**
   * Decode URL components (query string, pathname, hash).
   * Accommodates both regular percent encoding and x-www-form-urlencoded format.
   */
  var decodeURLComponents = true;

  /**
   * Base path.
   */

  var base = '';

  /**
   * Running flag.
   */

  var running;

  /**
   * HashBang option
   */

  var hashbang = false;

  /**
   * Previous context, for capturing
   * page exit events.
   */

  var prevContext;

  /**
   * Register `path` with callback `fn()`,
   * or route `path`, or redirection,
   * or `page.start()`.
   *
   *   page(fn);
   *   page('*', fn);
   *   page('/user/:id', load, user);
   *   page('/user/' + user.id, { some: 'thing' });
   *   page('/user/' + user.id);
   *   page('/from', '/to')
   *   page();
   *
   * @param {string|!Function|!Object} path
   * @param {Function=} fn
   * @api public
   */

  function page(path, fn) {
    // <callback>
    if ('function' === typeof path) {
      return page('*', path);
    }

    // route <path> to <callback ...>
    if ('function' === typeof fn) {
      var route = new Route(/** @type {string} */ (path));
      for (var i = 1; i < arguments.length; ++i) {
        page.callbacks.push(route.middleware(arguments[i]));
      }
      // show <path> with [state]
    } else if ('string' === typeof path) {
      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);
      // start [options]
    } else {
      page.start(path);
    }
  }

  /**
   * Callback functions.
   */

  page.callbacks = [];
  page.exits = [];

  /**
   * Current path being processed
   * @type {string}
   */
  page.current = '';

  /**
   * Number of pages navigated to.
   * @type {number}
   *
   *     page.len == 0;
   *     page('/login');
   *     page.len == 1;
   */

  page.len = 0;

  /**
   * Get or set basepath to `path`.
   *
   * @param {string} path
   * @api public
   */

  page.base = function(path) {
    if (0 === arguments.length) return base;
    base = path;
  };

  /**
   * Bind with the given `options`.
   *
   * Options:
   *
   *    - `click` bind to click events [true]
   *    - `popstate` bind to popstate [true]
   *    - `dispatch` perform initial dispatch [true]
   *
   * @param {Object} options
   * @api public
   */

  page.start = function(options) {
    options = options || {};
    if (running) return;
    running = true;
    if (false === options.dispatch) dispatch = false;
    if (false === options.decodeURLComponents) decodeURLComponents = false;
    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);
    if (false !== options.click) {
      document.addEventListener(clickEvent, onclick, false);
    }
    if (true === options.hashbang) hashbang = true;
    if (!dispatch) return;
    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;
    page.replace(url, null, true, dispatch);
  };

  /**
   * Unbind click and popstate event handlers.
   *
   * @api public
   */

  page.stop = function() {
    if (!running) return;
    page.current = '';
    page.len = 0;
    running = false;
    document.removeEventListener(clickEvent, onclick, false);
    window.removeEventListener('popstate', onpopstate, false);
  };

  /**
   * Show `path` with optional `state` object.
   *
   * @param {string} path
   * @param {Object=} state
   * @param {boolean=} dispatch
   * @param {boolean=} push
   * @return {!Context}
   * @api public
   */

  page.show = function(path, state, dispatch, push) {
    var ctx = new Context(path, state);
    page.current = ctx.path;
    if (false !== dispatch) page.dispatch(ctx);
    if (false !== ctx.handled && false !== push) ctx.pushState();
    return ctx;
  };

  /**
   * Goes back in the history
   * Back should always let the current route push state and then go back.
   *
   * @param {string} path - fallback path to go back if no more history exists, if undefined defaults to page.base
   * @param {Object=} state
   * @api public
   */

  page.back = function(path, state) {
    if (page.len > 0) {
      // this may need more testing to see if all browsers
      // wait for the next tick to go back in history
      history.back();
      page.len--;
    } else if (path) {
      setTimeout(function() {
        page.show(path, state);
      });
    }else{
      setTimeout(function() {
        page.show(base, state);
      });
    }
  };


  /**
   * Register route to redirect from one path to other
   * or just redirect to another route
   *
   * @param {string} from - if param 'to' is undefined redirects to 'from'
   * @param {string=} to
   * @api public
   */
  page.redirect = function(from, to) {
    // Define route from a path to another
    if ('string' === typeof from && 'string' === typeof to) {
      page(from, function(e) {
        setTimeout(function() {
          page.replace(/** @type {!string} */ (to));
        }, 0);
      });
    }

    // Wait for the push state and replace it with another
    if ('string' === typeof from && 'undefined' === typeof to) {
      setTimeout(function() {
        page.replace(from);
      }, 0);
    }
  };

  /**
   * Replace `path` with optional `state` object.
   *
   * @param {string} path
   * @param {Object=} state
   * @param {boolean=} init
   * @param {boolean=} dispatch
   * @return {!Context}
   * @api public
   */


  page.replace = function(path, state, init, dispatch) {
    var ctx = new Context(path, state);
    page.current = ctx.path;
    ctx.init = init;
    ctx.save(); // save before dispatching, which may redirect
    if (false !== dispatch) page.dispatch(ctx);
    return ctx;
  };

  /**
   * Dispatch the given `ctx`.
   *
   * @param {Context} ctx
   * @api private
   */
  page.dispatch = function(ctx) {
    var prev = prevContext,
      i = 0,
      j = 0;

    prevContext = ctx;

    function nextExit() {
      var fn = page.exits[j++];
      if (!fn) return nextEnter();
      fn(prev, nextExit);
    }

    function nextEnter() {
      var fn = page.callbacks[i++];

      if (ctx.path !== page.current) {
        ctx.handled = false;
        return;
      }
      if (!fn) return unhandled(ctx);
      fn(ctx, nextEnter);
    }

    if (prev) {
      nextExit();
    } else {
      nextEnter();
    }
  };

  /**
   * Unhandled `ctx`. When it's not the initial
   * popstate then redirect. If you wish to handle
   * 404s on your own use `page('*', callback)`.
   *
   * @param {Context} ctx
   * @api private
   */
  function unhandled(ctx) {
    if (ctx.handled) return;
    var current;

    if (hashbang) {
      current = base + location.hash.replace('#!', '');
    } else {
      current = location.pathname + location.search;
    }

    if (current === ctx.canonicalPath) return;
    page.stop();
    ctx.handled = false;
    location.href = ctx.canonicalPath;
  }

  /**
   * Register an exit route on `path` with
   * callback `fn()`, which will be called
   * on the previous context when a new
   * page is visited.
   */
  page.exit = function(path, fn) {
    if (typeof path === 'function') {
      return page.exit('*', path);
    }

    var route = new Route(path);
    for (var i = 1; i < arguments.length; ++i) {
      page.exits.push(route.middleware(arguments[i]));
    }
  };

  /**
   * Remove URL encoding from the given `str`.
   * Accommodates whitespace in both x-www-form-urlencoded
   * and regular percent-encoded form.
   *
   * @param {string} val - URL component to decode
   */
  function decodeURLEncodedURIComponent(val) {
    if (typeof val !== 'string') { return val; }
    return decodeURLComponents ? decodeURIComponent(val.replace(/\+/g, ' ')) : val;
  }

  /**
   * Initialize a new "request" `Context`
   * with the given `path` and optional initial `state`.
   *
   * @constructor
   * @param {string} path
   * @param {Object=} state
   * @api public
   */

  function Context(path, state) {
    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;
    var i = path.indexOf('?');

    this.canonicalPath = path;
    this.path = path.replace(base, '') || '/';
    if (hashbang) this.path = this.path.replace('#!', '') || '/';

    this.title = document.title;
    this.state = state || {};
    this.state.path = path;
    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';
    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);
    this.params = {};

    // fragment
    this.hash = '';
    if (!hashbang) {
      if (!~this.path.indexOf('#')) return;
      var parts = this.path.split('#');
      this.path = parts[0];
      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';
      this.querystring = this.querystring.split('#')[0];
    }
  }

  /**
   * Expose `Context`.
   */

  page.Context = Context;

  /**
   * Push state.
   *
   * @api private
   */

  Context.prototype.pushState = function() {
    page.len++;
    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
  };

  /**
   * Save the context state.
   *
   * @api public
   */

  Context.prototype.save = function() {
    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
  };

  /**
   * Initialize `Route` with the given HTTP `path`,
   * and an array of `callbacks` and `options`.
   *
   * Options:
   *
   *   - `sensitive`    enable case-sensitive routes
   *   - `strict`       enable strict matching for trailing slashes
   *
   * @constructor
   * @param {string} path
   * @param {Object=} options
   * @api private
   */

  function Route(path, options) {
    options = options || {};
    this.path = (path === '*') ? '(.*)' : path;
    this.method = 'GET';
    this.regexp = pathtoRegexp(this.path,
      this.keys = [],
      options);
  }

  /**
   * Expose `Route`.
   */

  page.Route = Route;

  /**
   * Return route middleware with
   * the given callback `fn()`.
   *
   * @param {Function} fn
   * @return {Function}
   * @api public
   */

  Route.prototype.middleware = function(fn) {
    var self = this;
    return function(ctx, next) {
      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);
      next();
    };
  };

  /**
   * Check if this route matches `path`, if so
   * populate `params`.
   *
   * @param {string} path
   * @param {Object} params
   * @return {boolean}
   * @api private
   */

  Route.prototype.match = function(path, params) {
    var keys = this.keys,
      qsIndex = path.indexOf('?'),
      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,
      m = this.regexp.exec(decodeURIComponent(pathname));

    if (!m) return false;

    for (var i = 1, len = m.length; i < len; ++i) {
      var key = keys[i - 1];
      var val = decodeURLEncodedURIComponent(m[i]);
      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {
        params[key.name] = val;
      }
    }

    return true;
  };


  /**
   * Handle "populate" events.
   */

  var onpopstate = (function () {
    var loaded = false;
    if ('undefined' === typeof window) {
      return;
    }
    if (document.readyState === 'complete') {
      loaded = true;
    } else {
      window.addEventListener('load', function() {
        setTimeout(function() {
          loaded = true;
        }, 0);
      });
    }
    return function onpopstate(e) {
      if (!loaded) return;
      if (e.state) {
        var path = e.state.path;
        page.replace(path, e.state);
      } else {
        page.show(location.pathname + location.hash, undefined, undefined, false);
      }
    };
  })();
  /**
   * Handle "click" events.
   */

  function onclick(e) {

    if (1 !== which(e)) return;

    if (e.metaKey || e.ctrlKey || e.shiftKey) return;
    if (e.defaultPrevented) return;



    // ensure link
    // use shadow dom when available
    var el = e.path ? e.path[0] : e.target;
    while (el && 'A' !== el.nodeName) el = el.parentNode;
    if (!el || 'A' !== el.nodeName) return;



    // Ignore if tag has
    // 1. "download" attribute
    // 2. rel="external" attribute
    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;

    // ensure non-hash for the same path
    var link = el.getAttribute('href');
    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;



    // Check for mailto: in the href
    if (link && link.indexOf('mailto:') > -1) return;

    // check target
    if (el.target) return;

    // x-origin
    if (!sameOrigin(el.href)) return;



    // rebuild path
    var path = el.pathname + el.search + (el.hash || '');

    // strip leading "/[drive letter]:" on NW.js on Windows
    if (typeof process !== 'undefined' && path.match(/^\/[a-zA-Z]:\//)) {
      path = path.replace(/^\/[a-zA-Z]:\//, '/');
    }

    // same page
    var orig = path;

    if (path.indexOf(base) === 0) {
      path = path.substr(base.length);
    }

    if (hashbang) path = path.replace('#!', '');

    if (base && orig === path) return;

    e.preventDefault();
    page.show(orig);
  }

  /**
   * Event button.
   */

  function which(e) {
    e = e || window.event;
    return null === e.which ? e.button : e.which;
  }

  /**
   * Check if `href` is the same origin.
   */

  function sameOrigin(href) {
    var origin = location.protocol + '//' + location.hostname;
    if (location.port) origin += ':' + location.port;
    return (href && (0 === href.indexOf(origin)));
  }

  page.sameOrigin = sameOrigin;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 65 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var stylesInDom = {},
	memoize = function(fn) {
		var memo;
		return function () {
			if (typeof memo === "undefined") memo = fn.apply(this, arguments);
			return memo;
		};
	},
	isOldIE = memoize(function() {
		return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
	}),
	getHeadElement = memoize(function () {
		return document.head || document.getElementsByTagName("head")[0];
	}),
	singletonElement = null,
	singletonCounter = 0,
	styleElementsInsertedAtTop = [];

module.exports = function(list, options) {
	if(typeof DEBUG !== "undefined" && DEBUG) {
		if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};
	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (typeof options.singleton === "undefined") options.singleton = isOldIE();

	// By default, add <style> tags to the bottom of <head>.
	if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

	var styles = listToStyles(list);
	addStylesToDom(styles, options);

	return function update(newList) {
		var mayRemove = [];
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			domStyle.refs--;
			mayRemove.push(domStyle);
		}
		if(newList) {
			var newStyles = listToStyles(newList);
			addStylesToDom(newStyles, options);
		}
		for(var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];
			if(domStyle.refs === 0) {
				for(var j = 0; j < domStyle.parts.length; j++)
					domStyle.parts[j]();
				delete stylesInDom[domStyle.id];
			}
		}
	};
}

function addStylesToDom(styles, options) {
	for(var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];
		if(domStyle) {
			domStyle.refs++;
			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}
			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];
			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}
			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles(list) {
	var styles = [];
	var newStyles = {};
	for(var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};
		if(!newStyles[id])
			styles.push(newStyles[id] = {id: id, parts: [part]});
		else
			newStyles[id].parts.push(part);
	}
	return styles;
}

function insertStyleElement(options, styleElement) {
	var head = getHeadElement();
	var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
	if (options.insertAt === "top") {
		if(!lastStyleElementInsertedAtTop) {
			head.insertBefore(styleElement, head.firstChild);
		} else if(lastStyleElementInsertedAtTop.nextSibling) {
			head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			head.appendChild(styleElement);
		}
		styleElementsInsertedAtTop.push(styleElement);
	} else if (options.insertAt === "bottom") {
		head.appendChild(styleElement);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement(styleElement) {
	styleElement.parentNode.removeChild(styleElement);
	var idx = styleElementsInsertedAtTop.indexOf(styleElement);
	if(idx >= 0) {
		styleElementsInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement(options) {
	var styleElement = document.createElement("style");
	styleElement.type = "text/css";
	insertStyleElement(options, styleElement);
	return styleElement;
}

function createLinkElement(options) {
	var linkElement = document.createElement("link");
	linkElement.rel = "stylesheet";
	insertStyleElement(options, linkElement);
	return linkElement;
}

function addStyle(obj, options) {
	var styleElement, update, remove;

	if (options.singleton) {
		var styleIndex = singletonCounter++;
		styleElement = singletonElement || (singletonElement = createStyleElement(options));
		update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
		remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
	} else if(obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function") {
		styleElement = createLinkElement(options);
		update = updateLink.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
			if(styleElement.href)
				URL.revokeObjectURL(styleElement.href);
		};
	} else {
		styleElement = createStyleElement(options);
		update = applyToTag.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
		};
	}

	update(obj);

	return function updateStyle(newObj) {
		if(newObj) {
			if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
				return;
			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;
		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag(styleElement, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (styleElement.styleSheet) {
		styleElement.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = styleElement.childNodes;
		if (childNodes[index]) styleElement.removeChild(childNodes[index]);
		if (childNodes.length) {
			styleElement.insertBefore(cssNode, childNodes[index]);
		} else {
			styleElement.appendChild(cssNode);
		}
	}
}

function applyToTag(styleElement, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		styleElement.setAttribute("media", media)
	}

	if(styleElement.styleSheet) {
		styleElement.styleSheet.cssText = css;
	} else {
		while(styleElement.firstChild) {
			styleElement.removeChild(styleElement.firstChild);
		}
		styleElement.appendChild(document.createTextNode(css));
	}
}

function updateLink(linkElement, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	if(sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = linkElement.href;

	linkElement.href = URL.createObjectURL(blob);

	if(oldSrc)
		URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 66 */,
/* 67 */,
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(9);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (true) {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridColumn: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = __webpack_require__(15);

var invariant = __webpack_require__(1);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ?  true ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(14);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(8);

var quoteAttributeValueForBrowser = __webpack_require__(203);
var warning = __webpack_require__(2);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
   true ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (true) {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (true) {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (true) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (true) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }

};

module.exports = DOMPropertyOperations;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(45);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
     true ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
       true ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
       true ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (true) {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
       true ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ?  true ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMSelection = __webpack_require__(160);

var containsNode = __webpack_require__(127);
var focusNode = __webpack_require__(69);
var getActiveElement = __webpack_require__(70);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(20);
var DOMProperty = __webpack_require__(14);
var React = __webpack_require__(18);
var ReactBrowserEventEmitter = __webpack_require__(31);
var ReactCurrentOwner = __webpack_require__(12);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMContainerInfo = __webpack_require__(152);
var ReactDOMFeatureFlags = __webpack_require__(154);
var ReactFeatureFlags = __webpack_require__(77);
var ReactInstanceMap = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(8);
var ReactMarkupChecksum = __webpack_require__(173);
var ReactReconciler = __webpack_require__(19);
var ReactUpdateQueue = __webpack_require__(48);
var ReactUpdates = __webpack_require__(10);

var emptyObject = __webpack_require__(23);
var instantiateReactComponent = __webpack_require__(88);
var invariant = __webpack_require__(1);
var setInnerHTML = __webpack_require__(35);
var shouldUpdateReactComponent = __webpack_require__(54);
var warning = __webpack_require__(2);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (true) {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (true) {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (true) {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
     true ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ?  true ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ?  true ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ?  true ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

     true ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (true) {
       true ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
             true ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
     true ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ?  true ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (true) {
       true ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (true) {
         true ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ?  true ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (true) {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (true) {
           true ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (true) {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(18);

var invariant = __webpack_require__(1);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ?  true ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ?  true ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactNodeTypes = __webpack_require__(81);

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var ReactCompositeComponent = __webpack_require__(115);
var ReactEmptyComponent = __webpack_require__(76);
var ReactHostComponent = __webpack_require__(78);

var getNextDebugID = __webpack_require__(119);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};
_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (true) {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ?  true ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ?  true ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (true) {
     true ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (true) {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (true) {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var escapeTextContentForBrowser = __webpack_require__(34);
var setInnerHTML = __webpack_require__(35);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(12);
var REACT_ELEMENT_TYPE = __webpack_require__(167);

var getIteratorFn = __webpack_require__(200);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(44);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (true) {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (true) {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(12);
var ReactComponentTreeHook = __webpack_require__(7);
var ReactElement = __webpack_require__(16);

var checkReactTypeSpec = __webpack_require__(213);

var canDefineProperty = __webpack_require__(59);
var getIteratorFn = __webpack_require__(60);
var warning = __webpack_require__(2);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

   true ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
     true ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
        info += getDeclarationErrorAddendum();
         true ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (true) {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
             true ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 95 */,
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(61)();
// imports


// module
exports.push([module.i, "@charset \"UTF-8\";\n/* FONT PATH\n * -------------------------- */\n@font-face {\n  font-family: 'FontAwesome';\n  /* IE < 9\n      The two src data are needed to circumvent a bug in IE for the rendering of the text.\n      IE9+ supports the type format *.woff. */\n  src: url(" + __webpack_require__(103) + ");\n  /* IE9 Compat Modes */\n  src: url(" + __webpack_require__(102) + "?#iefix&v=4.7.0) format(\"embedded-opentype\");\n  /* IE6-IE8 */\n  src: url(" + __webpack_require__(108) + "#fontawesomeregular) format(\"svg\"), url(" + __webpack_require__(105) + ") format(\"woff2\"), url(" + __webpack_require__(106) + ") format(\"woff\"), url(" + __webpack_require__(104) + ") format(\"truetype\");\n  /* Safari, Android, iOS */\n  /* To avoid a bug in Webkit-Browsers set all font-* properties to normal. */\n  font-weight: normal;\n  font-style: normal;\n  font-variant: normal;\n}\n\n.fa {\n  display: inline-block;\n  font: normal normal normal 14px/1 FontAwesome;\n  font-size: inherit;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/* makes the font 33% larger relative to the icon container */\n.fa-lg {\n  font-size: 1.3333333333em;\n  line-height: 0.75em;\n  vertical-align: -15%;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-fw {\n  width: 1.2857142857em;\n  text-align: center;\n}\n\n.fa-ul {\n  padding-left: 0;\n  margin-left: 2.1428571429em;\n  list-style-type: none;\n}\n\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  position: absolute;\n  left: -2.1428571429em;\n  width: 2.1428571429em;\n  top: 0.1428571429em;\n  text-align: center;\n}\n\n.fa-li.fa-lg {\n  left: -1.8571428571em;\n}\n\n.fa-border {\n  padding: .2em .25em .15em;\n  border: solid 0.08em #eee;\n  border-radius: .1em;\n}\n\n.fa-pull-left {\n  float: left;\n}\n\n.fa-pull-right {\n  float: right;\n}\n\n.fa.fa-pull-left {\n  margin-right: .3em;\n}\n\n.fa.fa-pull-right {\n  margin-left: .3em;\n}\n\n/* Deprecated as of 4.4.0 */\n.pull-right {\n  float: right;\n}\n\n.pull-left {\n  float: left;\n}\n\n.fa.pull-left {\n  margin-right: .3em;\n}\n\n.fa.pull-right {\n  margin-left: .3em;\n}\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n  animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n  animation: fa-spin 1s infinite steps(8);\n}\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n\n.fa-rotate-90 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\";\n  -webkit-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\";\n  -webkit-transform: rotate(180deg);\n  -ms-transform: rotate(180deg);\n  transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\";\n  -webkit-transform: rotate(270deg);\n  -ms-transform: rotate(270deg);\n  transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\";\n  -webkit-transform: scale(-1, 1);\n  -ms-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";\n  -webkit-transform: scale(1, -1);\n  -ms-transform: scale(1, -1);\n  transform: scale(1, -1);\n}\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  -webkit-filter: none;\n          filter: none;\n}\n\n.fa-stack {\n  position: relative;\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  line-height: 2em;\n  vertical-align: middle;\n}\n\n.fa-stack-1x, .fa-stack-2x {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n\n.fa-stack-1x {\n  line-height: inherit;\n}\n\n.fa-stack-2x {\n  font-size: 2em;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n/* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen\n   readers do not read off random characters that represent icons */\n.fa-glass:before {\n  content: \"\\F000\";\n}\n\n.fa-music:before {\n  content: \"\\F001\";\n}\n\n.fa-search:before {\n  content: \"\\F002\";\n}\n\n.fa-envelope-o:before {\n  content: \"\\F003\";\n}\n\n.fa-heart:before {\n  content: \"\\F004\";\n}\n\n.fa-star:before {\n  content: \"\\F005\";\n}\n\n.fa-star-o:before {\n  content: \"\\F006\";\n}\n\n.fa-user:before {\n  content: \"\\F007\";\n}\n\n.fa-film:before {\n  content: \"\\F008\";\n}\n\n.fa-th-large:before {\n  content: \"\\F009\";\n}\n\n.fa-th:before {\n  content: \"\\F00A\";\n}\n\n.fa-th-list:before {\n  content: \"\\F00B\";\n}\n\n.fa-check:before {\n  content: \"\\F00C\";\n}\n\n.fa-remove:before,\n.fa-close:before,\n.fa-times:before {\n  content: \"\\F00D\";\n}\n\n.fa-search-plus:before {\n  content: \"\\F00E\";\n}\n\n.fa-search-minus:before {\n  content: \"\\F010\";\n}\n\n.fa-power-off:before {\n  content: \"\\F011\";\n}\n\n.fa-signal:before {\n  content: \"\\F012\";\n}\n\n.fa-gear:before,\n.fa-cog:before {\n  content: \"\\F013\";\n}\n\n.fa-trash-o:before {\n  content: \"\\F014\";\n}\n\n.fa-home:before {\n  content: \"\\F015\";\n}\n\n.fa-file-o:before {\n  content: \"\\F016\";\n}\n\n.fa-clock-o:before {\n  content: \"\\F017\";\n}\n\n.fa-road:before {\n  content: \"\\F018\";\n}\n\n.fa-download:before {\n  content: \"\\F019\";\n}\n\n.fa-arrow-circle-o-down:before {\n  content: \"\\F01A\";\n}\n\n.fa-arrow-circle-o-up:before {\n  content: \"\\F01B\";\n}\n\n.fa-inbox:before {\n  content: \"\\F01C\";\n}\n\n.fa-play-circle-o:before {\n  content: \"\\F01D\";\n}\n\n.fa-rotate-right:before,\n.fa-repeat:before {\n  content: \"\\F01E\";\n}\n\n.fa-refresh:before {\n  content: \"\\F021\";\n}\n\n.fa-list-alt:before {\n  content: \"\\F022\";\n}\n\n.fa-lock:before {\n  content: \"\\F023\";\n}\n\n.fa-flag:before {\n  content: \"\\F024\";\n}\n\n.fa-headphones:before {\n  content: \"\\F025\";\n}\n\n.fa-volume-off:before {\n  content: \"\\F026\";\n}\n\n.fa-volume-down:before {\n  content: \"\\F027\";\n}\n\n.fa-volume-up:before {\n  content: \"\\F028\";\n}\n\n.fa-qrcode:before {\n  content: \"\\F029\";\n}\n\n.fa-barcode:before {\n  content: \"\\F02A\";\n}\n\n.fa-tag:before {\n  content: \"\\F02B\";\n}\n\n.fa-tags:before {\n  content: \"\\F02C\";\n}\n\n.fa-book:before {\n  content: \"\\F02D\";\n}\n\n.fa-bookmark:before {\n  content: \"\\F02E\";\n}\n\n.fa-print:before {\n  content: \"\\F02F\";\n}\n\n.fa-camera:before {\n  content: \"\\F030\";\n}\n\n.fa-font:before {\n  content: \"\\F031\";\n}\n\n.fa-bold:before {\n  content: \"\\F032\";\n}\n\n.fa-italic:before {\n  content: \"\\F033\";\n}\n\n.fa-text-height:before {\n  content: \"\\F034\";\n}\n\n.fa-text-width:before {\n  content: \"\\F035\";\n}\n\n.fa-align-left:before {\n  content: \"\\F036\";\n}\n\n.fa-align-center:before {\n  content: \"\\F037\";\n}\n\n.fa-align-right:before {\n  content: \"\\F038\";\n}\n\n.fa-align-justify:before {\n  content: \"\\F039\";\n}\n\n.fa-list:before {\n  content: \"\\F03A\";\n}\n\n.fa-dedent:before,\n.fa-outdent:before {\n  content: \"\\F03B\";\n}\n\n.fa-indent:before {\n  content: \"\\F03C\";\n}\n\n.fa-video-camera:before {\n  content: \"\\F03D\";\n}\n\n.fa-photo:before,\n.fa-image:before,\n.fa-picture-o:before {\n  content: \"\\F03E\";\n}\n\n.fa-pencil:before {\n  content: \"\\F040\";\n}\n\n.fa-map-marker:before {\n  content: \"\\F041\";\n}\n\n.fa-adjust:before {\n  content: \"\\F042\";\n}\n\n.fa-tint:before {\n  content: \"\\F043\";\n}\n\n.fa-edit:before,\n.fa-pencil-square-o:before {\n  content: \"\\F044\";\n}\n\n.fa-share-square-o:before {\n  content: \"\\F045\";\n}\n\n.fa-check-square-o:before {\n  content: \"\\F046\";\n}\n\n.fa-arrows:before {\n  content: \"\\F047\";\n}\n\n.fa-step-backward:before {\n  content: \"\\F048\";\n}\n\n.fa-fast-backward:before {\n  content: \"\\F049\";\n}\n\n.fa-backward:before {\n  content: \"\\F04A\";\n}\n\n.fa-play:before {\n  content: \"\\F04B\";\n}\n\n.fa-pause:before {\n  content: \"\\F04C\";\n}\n\n.fa-stop:before {\n  content: \"\\F04D\";\n}\n\n.fa-forward:before {\n  content: \"\\F04E\";\n}\n\n.fa-fast-forward:before {\n  content: \"\\F050\";\n}\n\n.fa-step-forward:before {\n  content: \"\\F051\";\n}\n\n.fa-eject:before {\n  content: \"\\F052\";\n}\n\n.fa-chevron-left:before {\n  content: \"\\F053\";\n}\n\n.fa-chevron-right:before {\n  content: \"\\F054\";\n}\n\n.fa-plus-circle:before {\n  content: \"\\F055\";\n}\n\n.fa-minus-circle:before {\n  content: \"\\F056\";\n}\n\n.fa-times-circle:before {\n  content: \"\\F057\";\n}\n\n.fa-check-circle:before {\n  content: \"\\F058\";\n}\n\n.fa-question-circle:before {\n  content: \"\\F059\";\n}\n\n.fa-info-circle:before {\n  content: \"\\F05A\";\n}\n\n.fa-crosshairs:before {\n  content: \"\\F05B\";\n}\n\n.fa-times-circle-o:before {\n  content: \"\\F05C\";\n}\n\n.fa-check-circle-o:before {\n  content: \"\\F05D\";\n}\n\n.fa-ban:before {\n  content: \"\\F05E\";\n}\n\n.fa-arrow-left:before {\n  content: \"\\F060\";\n}\n\n.fa-arrow-right:before {\n  content: \"\\F061\";\n}\n\n.fa-arrow-up:before {\n  content: \"\\F062\";\n}\n\n.fa-arrow-down:before {\n  content: \"\\F063\";\n}\n\n.fa-mail-forward:before,\n.fa-share:before {\n  content: \"\\F064\";\n}\n\n.fa-expand:before {\n  content: \"\\F065\";\n}\n\n.fa-compress:before {\n  content: \"\\F066\";\n}\n\n.fa-plus:before {\n  content: \"\\F067\";\n}\n\n.fa-minus:before {\n  content: \"\\F068\";\n}\n\n.fa-asterisk:before {\n  content: \"\\F069\";\n}\n\n.fa-exclamation-circle:before {\n  content: \"\\F06A\";\n}\n\n.fa-gift:before {\n  content: \"\\F06B\";\n}\n\n.fa-leaf:before {\n  content: \"\\F06C\";\n}\n\n.fa-fire:before {\n  content: \"\\F06D\";\n}\n\n.fa-eye:before {\n  content: \"\\F06E\";\n}\n\n.fa-eye-slash:before {\n  content: \"\\F070\";\n}\n\n.fa-warning:before,\n.fa-exclamation-triangle:before {\n  content: \"\\F071\";\n}\n\n.fa-plane:before {\n  content: \"\\F072\";\n}\n\n.fa-calendar:before {\n  content: \"\\F073\";\n}\n\n.fa-random:before {\n  content: \"\\F074\";\n}\n\n.fa-comment:before {\n  content: \"\\F075\";\n}\n\n.fa-magnet:before {\n  content: \"\\F076\";\n}\n\n.fa-chevron-up:before {\n  content: \"\\F077\";\n}\n\n.fa-chevron-down:before {\n  content: \"\\F078\";\n}\n\n.fa-retweet:before {\n  content: \"\\F079\";\n}\n\n.fa-shopping-cart:before {\n  content: \"\\F07A\";\n}\n\n.fa-folder:before {\n  content: \"\\F07B\";\n}\n\n.fa-folder-open:before {\n  content: \"\\F07C\";\n}\n\n.fa-arrows-v:before {\n  content: \"\\F07D\";\n}\n\n.fa-arrows-h:before {\n  content: \"\\F07E\";\n}\n\n.fa-bar-chart-o:before,\n.fa-bar-chart:before {\n  content: \"\\F080\";\n}\n\n.fa-twitter-square:before {\n  content: \"\\F081\";\n}\n\n.fa-facebook-square:before {\n  content: \"\\F082\";\n}\n\n.fa-camera-retro:before {\n  content: \"\\F083\";\n}\n\n.fa-key:before {\n  content: \"\\F084\";\n}\n\n.fa-gears:before,\n.fa-cogs:before {\n  content: \"\\F085\";\n}\n\n.fa-comments:before {\n  content: \"\\F086\";\n}\n\n.fa-thumbs-o-up:before {\n  content: \"\\F087\";\n}\n\n.fa-thumbs-o-down:before {\n  content: \"\\F088\";\n}\n\n.fa-star-half:before {\n  content: \"\\F089\";\n}\n\n.fa-heart-o:before {\n  content: \"\\F08A\";\n}\n\n.fa-sign-out:before {\n  content: \"\\F08B\";\n}\n\n.fa-linkedin-square:before {\n  content: \"\\F08C\";\n}\n\n.fa-thumb-tack:before {\n  content: \"\\F08D\";\n}\n\n.fa-external-link:before {\n  content: \"\\F08E\";\n}\n\n.fa-sign-in:before {\n  content: \"\\F090\";\n}\n\n.fa-trophy:before {\n  content: \"\\F091\";\n}\n\n.fa-github-square:before {\n  content: \"\\F092\";\n}\n\n.fa-upload:before {\n  content: \"\\F093\";\n}\n\n.fa-lemon-o:before {\n  content: \"\\F094\";\n}\n\n.fa-phone:before {\n  content: \"\\F095\";\n}\n\n.fa-square-o:before {\n  content: \"\\F096\";\n}\n\n.fa-bookmark-o:before {\n  content: \"\\F097\";\n}\n\n.fa-phone-square:before {\n  content: \"\\F098\";\n}\n\n.fa-twitter:before {\n  content: \"\\F099\";\n}\n\n.fa-facebook-f:before,\n.fa-facebook:before {\n  content: \"\\F09A\";\n}\n\n.fa-github:before {\n  content: \"\\F09B\";\n}\n\n.fa-unlock:before {\n  content: \"\\F09C\";\n}\n\n.fa-credit-card:before {\n  content: \"\\F09D\";\n}\n\n.fa-feed:before,\n.fa-rss:before {\n  content: \"\\F09E\";\n}\n\n.fa-hdd-o:before {\n  content: \"\\F0A0\";\n}\n\n.fa-bullhorn:before {\n  content: \"\\F0A1\";\n}\n\n.fa-bell:before {\n  content: \"\\F0F3\";\n}\n\n.fa-certificate:before {\n  content: \"\\F0A3\";\n}\n\n.fa-hand-o-right:before {\n  content: \"\\F0A4\";\n}\n\n.fa-hand-o-left:before {\n  content: \"\\F0A5\";\n}\n\n.fa-hand-o-up:before {\n  content: \"\\F0A6\";\n}\n\n.fa-hand-o-down:before {\n  content: \"\\F0A7\";\n}\n\n.fa-arrow-circle-left:before {\n  content: \"\\F0A8\";\n}\n\n.fa-arrow-circle-right:before {\n  content: \"\\F0A9\";\n}\n\n.fa-arrow-circle-up:before {\n  content: \"\\F0AA\";\n}\n\n.fa-arrow-circle-down:before {\n  content: \"\\F0AB\";\n}\n\n.fa-globe:before {\n  content: \"\\F0AC\";\n}\n\n.fa-wrench:before {\n  content: \"\\F0AD\";\n}\n\n.fa-tasks:before {\n  content: \"\\F0AE\";\n}\n\n.fa-filter:before {\n  content: \"\\F0B0\";\n}\n\n.fa-briefcase:before {\n  content: \"\\F0B1\";\n}\n\n.fa-arrows-alt:before {\n  content: \"\\F0B2\";\n}\n\n.fa-group:before,\n.fa-users:before {\n  content: \"\\F0C0\";\n}\n\n.fa-chain:before,\n.fa-link:before {\n  content: \"\\F0C1\";\n}\n\n.fa-cloud:before {\n  content: \"\\F0C2\";\n}\n\n.fa-flask:before {\n  content: \"\\F0C3\";\n}\n\n.fa-cut:before,\n.fa-scissors:before {\n  content: \"\\F0C4\";\n}\n\n.fa-copy:before,\n.fa-files-o:before {\n  content: \"\\F0C5\";\n}\n\n.fa-paperclip:before {\n  content: \"\\F0C6\";\n}\n\n.fa-save:before,\n.fa-floppy-o:before {\n  content: \"\\F0C7\";\n}\n\n.fa-square:before {\n  content: \"\\F0C8\";\n}\n\n.fa-navicon:before,\n.fa-reorder:before,\n.fa-bars:before {\n  content: \"\\F0C9\";\n}\n\n.fa-list-ul:before {\n  content: \"\\F0CA\";\n}\n\n.fa-list-ol:before {\n  content: \"\\F0CB\";\n}\n\n.fa-strikethrough:before {\n  content: \"\\F0CC\";\n}\n\n.fa-underline:before {\n  content: \"\\F0CD\";\n}\n\n.fa-table:before {\n  content: \"\\F0CE\";\n}\n\n.fa-magic:before {\n  content: \"\\F0D0\";\n}\n\n.fa-truck:before {\n  content: \"\\F0D1\";\n}\n\n.fa-pinterest:before {\n  content: \"\\F0D2\";\n}\n\n.fa-pinterest-square:before {\n  content: \"\\F0D3\";\n}\n\n.fa-google-plus-square:before {\n  content: \"\\F0D4\";\n}\n\n.fa-google-plus:before {\n  content: \"\\F0D5\";\n}\n\n.fa-money:before {\n  content: \"\\F0D6\";\n}\n\n.fa-caret-down:before {\n  content: \"\\F0D7\";\n}\n\n.fa-caret-up:before {\n  content: \"\\F0D8\";\n}\n\n.fa-caret-left:before {\n  content: \"\\F0D9\";\n}\n\n.fa-caret-right:before {\n  content: \"\\F0DA\";\n}\n\n.fa-columns:before {\n  content: \"\\F0DB\";\n}\n\n.fa-unsorted:before,\n.fa-sort:before {\n  content: \"\\F0DC\";\n}\n\n.fa-sort-down:before,\n.fa-sort-desc:before {\n  content: \"\\F0DD\";\n}\n\n.fa-sort-up:before,\n.fa-sort-asc:before {\n  content: \"\\F0DE\";\n}\n\n.fa-envelope:before {\n  content: \"\\F0E0\";\n}\n\n.fa-linkedin:before {\n  content: \"\\F0E1\";\n}\n\n.fa-rotate-left:before,\n.fa-undo:before {\n  content: \"\\F0E2\";\n}\n\n.fa-legal:before,\n.fa-gavel:before {\n  content: \"\\F0E3\";\n}\n\n.fa-dashboard:before,\n.fa-tachometer:before {\n  content: \"\\F0E4\";\n}\n\n.fa-comment-o:before {\n  content: \"\\F0E5\";\n}\n\n.fa-comments-o:before {\n  content: \"\\F0E6\";\n}\n\n.fa-flash:before,\n.fa-bolt:before {\n  content: \"\\F0E7\";\n}\n\n.fa-sitemap:before {\n  content: \"\\F0E8\";\n}\n\n.fa-umbrella:before {\n  content: \"\\F0E9\";\n}\n\n.fa-paste:before,\n.fa-clipboard:before {\n  content: \"\\F0EA\";\n}\n\n.fa-lightbulb-o:before {\n  content: \"\\F0EB\";\n}\n\n.fa-exchange:before {\n  content: \"\\F0EC\";\n}\n\n.fa-cloud-download:before {\n  content: \"\\F0ED\";\n}\n\n.fa-cloud-upload:before {\n  content: \"\\F0EE\";\n}\n\n.fa-user-md:before {\n  content: \"\\F0F0\";\n}\n\n.fa-stethoscope:before {\n  content: \"\\F0F1\";\n}\n\n.fa-suitcase:before {\n  content: \"\\F0F2\";\n}\n\n.fa-bell-o:before {\n  content: \"\\F0A2\";\n}\n\n.fa-coffee:before {\n  content: \"\\F0F4\";\n}\n\n.fa-cutlery:before {\n  content: \"\\F0F5\";\n}\n\n.fa-file-text-o:before {\n  content: \"\\F0F6\";\n}\n\n.fa-building-o:before {\n  content: \"\\F0F7\";\n}\n\n.fa-hospital-o:before {\n  content: \"\\F0F8\";\n}\n\n.fa-ambulance:before {\n  content: \"\\F0F9\";\n}\n\n.fa-medkit:before {\n  content: \"\\F0FA\";\n}\n\n.fa-fighter-jet:before {\n  content: \"\\F0FB\";\n}\n\n.fa-beer:before {\n  content: \"\\F0FC\";\n}\n\n.fa-h-square:before {\n  content: \"\\F0FD\";\n}\n\n.fa-plus-square:before {\n  content: \"\\F0FE\";\n}\n\n.fa-angle-double-left:before {\n  content: \"\\F100\";\n}\n\n.fa-angle-double-right:before {\n  content: \"\\F101\";\n}\n\n.fa-angle-double-up:before {\n  content: \"\\F102\";\n}\n\n.fa-angle-double-down:before {\n  content: \"\\F103\";\n}\n\n.fa-angle-left:before {\n  content: \"\\F104\";\n}\n\n.fa-angle-right:before {\n  content: \"\\F105\";\n}\n\n.fa-angle-up:before {\n  content: \"\\F106\";\n}\n\n.fa-angle-down:before {\n  content: \"\\F107\";\n}\n\n.fa-desktop:before {\n  content: \"\\F108\";\n}\n\n.fa-laptop:before {\n  content: \"\\F109\";\n}\n\n.fa-tablet:before {\n  content: \"\\F10A\";\n}\n\n.fa-mobile-phone:before,\n.fa-mobile:before {\n  content: \"\\F10B\";\n}\n\n.fa-circle-o:before {\n  content: \"\\F10C\";\n}\n\n.fa-quote-left:before {\n  content: \"\\F10D\";\n}\n\n.fa-quote-right:before {\n  content: \"\\F10E\";\n}\n\n.fa-spinner:before {\n  content: \"\\F110\";\n}\n\n.fa-circle:before {\n  content: \"\\F111\";\n}\n\n.fa-mail-reply:before,\n.fa-reply:before {\n  content: \"\\F112\";\n}\n\n.fa-github-alt:before {\n  content: \"\\F113\";\n}\n\n.fa-folder-o:before {\n  content: \"\\F114\";\n}\n\n.fa-folder-open-o:before {\n  content: \"\\F115\";\n}\n\n.fa-smile-o:before {\n  content: \"\\F118\";\n}\n\n.fa-frown-o:before {\n  content: \"\\F119\";\n}\n\n.fa-meh-o:before {\n  content: \"\\F11A\";\n}\n\n.fa-gamepad:before {\n  content: \"\\F11B\";\n}\n\n.fa-keyboard-o:before {\n  content: \"\\F11C\";\n}\n\n.fa-flag-o:before {\n  content: \"\\F11D\";\n}\n\n.fa-flag-checkered:before {\n  content: \"\\F11E\";\n}\n\n.fa-terminal:before {\n  content: \"\\F120\";\n}\n\n.fa-code:before {\n  content: \"\\F121\";\n}\n\n.fa-mail-reply-all:before,\n.fa-reply-all:before {\n  content: \"\\F122\";\n}\n\n.fa-star-half-empty:before,\n.fa-star-half-full:before,\n.fa-star-half-o:before {\n  content: \"\\F123\";\n}\n\n.fa-location-arrow:before {\n  content: \"\\F124\";\n}\n\n.fa-crop:before {\n  content: \"\\F125\";\n}\n\n.fa-code-fork:before {\n  content: \"\\F126\";\n}\n\n.fa-unlink:before,\n.fa-chain-broken:before {\n  content: \"\\F127\";\n}\n\n.fa-question:before {\n  content: \"\\F128\";\n}\n\n.fa-info:before {\n  content: \"\\F129\";\n}\n\n.fa-exclamation:before {\n  content: \"\\F12A\";\n}\n\n.fa-superscript:before {\n  content: \"\\F12B\";\n}\n\n.fa-subscript:before {\n  content: \"\\F12C\";\n}\n\n.fa-eraser:before {\n  content: \"\\F12D\";\n}\n\n.fa-puzzle-piece:before {\n  content: \"\\F12E\";\n}\n\n.fa-microphone:before {\n  content: \"\\F130\";\n}\n\n.fa-microphone-slash:before {\n  content: \"\\F131\";\n}\n\n.fa-shield:before {\n  content: \"\\F132\";\n}\n\n.fa-calendar-o:before {\n  content: \"\\F133\";\n}\n\n.fa-fire-extinguisher:before {\n  content: \"\\F134\";\n}\n\n.fa-rocket:before {\n  content: \"\\F135\";\n}\n\n.fa-maxcdn:before {\n  content: \"\\F136\";\n}\n\n.fa-chevron-circle-left:before {\n  content: \"\\F137\";\n}\n\n.fa-chevron-circle-right:before {\n  content: \"\\F138\";\n}\n\n.fa-chevron-circle-up:before {\n  content: \"\\F139\";\n}\n\n.fa-chevron-circle-down:before {\n  content: \"\\F13A\";\n}\n\n.fa-html5:before {\n  content: \"\\F13B\";\n}\n\n.fa-css3:before {\n  content: \"\\F13C\";\n}\n\n.fa-anchor:before {\n  content: \"\\F13D\";\n}\n\n.fa-unlock-alt:before {\n  content: \"\\F13E\";\n}\n\n.fa-bullseye:before {\n  content: \"\\F140\";\n}\n\n.fa-ellipsis-h:before {\n  content: \"\\F141\";\n}\n\n.fa-ellipsis-v:before {\n  content: \"\\F142\";\n}\n\n.fa-rss-square:before {\n  content: \"\\F143\";\n}\n\n.fa-play-circle:before {\n  content: \"\\F144\";\n}\n\n.fa-ticket:before {\n  content: \"\\F145\";\n}\n\n.fa-minus-square:before {\n  content: \"\\F146\";\n}\n\n.fa-minus-square-o:before {\n  content: \"\\F147\";\n}\n\n.fa-level-up:before {\n  content: \"\\F148\";\n}\n\n.fa-level-down:before {\n  content: \"\\F149\";\n}\n\n.fa-check-square:before {\n  content: \"\\F14A\";\n}\n\n.fa-pencil-square:before {\n  content: \"\\F14B\";\n}\n\n.fa-external-link-square:before {\n  content: \"\\F14C\";\n}\n\n.fa-share-square:before {\n  content: \"\\F14D\";\n}\n\n.fa-compass:before {\n  content: \"\\F14E\";\n}\n\n.fa-toggle-down:before,\n.fa-caret-square-o-down:before {\n  content: \"\\F150\";\n}\n\n.fa-toggle-up:before,\n.fa-caret-square-o-up:before {\n  content: \"\\F151\";\n}\n\n.fa-toggle-right:before,\n.fa-caret-square-o-right:before {\n  content: \"\\F152\";\n}\n\n.fa-euro:before,\n.fa-eur:before {\n  content: \"\\F153\";\n}\n\n.fa-gbp:before {\n  content: \"\\F154\";\n}\n\n.fa-dollar:before,\n.fa-usd:before {\n  content: \"\\F155\";\n}\n\n.fa-rupee:before,\n.fa-inr:before {\n  content: \"\\F156\";\n}\n\n.fa-cny:before,\n.fa-rmb:before,\n.fa-yen:before,\n.fa-jpy:before {\n  content: \"\\F157\";\n}\n\n.fa-ruble:before,\n.fa-rouble:before,\n.fa-rub:before {\n  content: \"\\F158\";\n}\n\n.fa-won:before,\n.fa-krw:before {\n  content: \"\\F159\";\n}\n\n.fa-bitcoin:before,\n.fa-btc:before {\n  content: \"\\F15A\";\n}\n\n.fa-file:before {\n  content: \"\\F15B\";\n}\n\n.fa-file-text:before {\n  content: \"\\F15C\";\n}\n\n.fa-sort-alpha-asc:before {\n  content: \"\\F15D\";\n}\n\n.fa-sort-alpha-desc:before {\n  content: \"\\F15E\";\n}\n\n.fa-sort-amount-asc:before {\n  content: \"\\F160\";\n}\n\n.fa-sort-amount-desc:before {\n  content: \"\\F161\";\n}\n\n.fa-sort-numeric-asc:before {\n  content: \"\\F162\";\n}\n\n.fa-sort-numeric-desc:before {\n  content: \"\\F163\";\n}\n\n.fa-thumbs-up:before {\n  content: \"\\F164\";\n}\n\n.fa-thumbs-down:before {\n  content: \"\\F165\";\n}\n\n.fa-youtube-square:before {\n  content: \"\\F166\";\n}\n\n.fa-youtube:before {\n  content: \"\\F167\";\n}\n\n.fa-xing:before {\n  content: \"\\F168\";\n}\n\n.fa-xing-square:before {\n  content: \"\\F169\";\n}\n\n.fa-youtube-play:before {\n  content: \"\\F16A\";\n}\n\n.fa-dropbox:before {\n  content: \"\\F16B\";\n}\n\n.fa-stack-overflow:before {\n  content: \"\\F16C\";\n}\n\n.fa-instagram:before {\n  content: \"\\F16D\";\n}\n\n.fa-flickr:before {\n  content: \"\\F16E\";\n}\n\n.fa-adn:before {\n  content: \"\\F170\";\n}\n\n.fa-bitbucket:before {\n  content: \"\\F171\";\n}\n\n.fa-bitbucket-square:before {\n  content: \"\\F172\";\n}\n\n.fa-tumblr:before {\n  content: \"\\F173\";\n}\n\n.fa-tumblr-square:before {\n  content: \"\\F174\";\n}\n\n.fa-long-arrow-down:before {\n  content: \"\\F175\";\n}\n\n.fa-long-arrow-up:before {\n  content: \"\\F176\";\n}\n\n.fa-long-arrow-left:before {\n  content: \"\\F177\";\n}\n\n.fa-long-arrow-right:before {\n  content: \"\\F178\";\n}\n\n.fa-apple:before {\n  content: \"\\F179\";\n}\n\n.fa-windows:before {\n  content: \"\\F17A\";\n}\n\n.fa-android:before {\n  content: \"\\F17B\";\n}\n\n.fa-linux:before {\n  content: \"\\F17C\";\n}\n\n.fa-dribbble:before {\n  content: \"\\F17D\";\n}\n\n.fa-skype:before {\n  content: \"\\F17E\";\n}\n\n.fa-foursquare:before {\n  content: \"\\F180\";\n}\n\n.fa-trello:before {\n  content: \"\\F181\";\n}\n\n.fa-female:before {\n  content: \"\\F182\";\n}\n\n.fa-male:before {\n  content: \"\\F183\";\n}\n\n.fa-gittip:before,\n.fa-gratipay:before {\n  content: \"\\F184\";\n}\n\n.fa-sun-o:before {\n  content: \"\\F185\";\n}\n\n.fa-moon-o:before {\n  content: \"\\F186\";\n}\n\n.fa-archive:before {\n  content: \"\\F187\";\n}\n\n.fa-bug:before {\n  content: \"\\F188\";\n}\n\n.fa-vk:before {\n  content: \"\\F189\";\n}\n\n.fa-weibo:before {\n  content: \"\\F18A\";\n}\n\n.fa-renren:before {\n  content: \"\\F18B\";\n}\n\n.fa-pagelines:before {\n  content: \"\\F18C\";\n}\n\n.fa-stack-exchange:before {\n  content: \"\\F18D\";\n}\n\n.fa-arrow-circle-o-right:before {\n  content: \"\\F18E\";\n}\n\n.fa-arrow-circle-o-left:before {\n  content: \"\\F190\";\n}\n\n.fa-toggle-left:before,\n.fa-caret-square-o-left:before {\n  content: \"\\F191\";\n}\n\n.fa-dot-circle-o:before {\n  content: \"\\F192\";\n}\n\n.fa-wheelchair:before {\n  content: \"\\F193\";\n}\n\n.fa-vimeo-square:before {\n  content: \"\\F194\";\n}\n\n.fa-turkish-lira:before,\n.fa-try:before {\n  content: \"\\F195\";\n}\n\n.fa-plus-square-o:before {\n  content: \"\\F196\";\n}\n\n.fa-space-shuttle:before {\n  content: \"\\F197\";\n}\n\n.fa-slack:before {\n  content: \"\\F198\";\n}\n\n.fa-envelope-square:before {\n  content: \"\\F199\";\n}\n\n.fa-wordpress:before {\n  content: \"\\F19A\";\n}\n\n.fa-openid:before {\n  content: \"\\F19B\";\n}\n\n.fa-institution:before,\n.fa-bank:before,\n.fa-university:before {\n  content: \"\\F19C\";\n}\n\n.fa-mortar-board:before,\n.fa-graduation-cap:before {\n  content: \"\\F19D\";\n}\n\n.fa-yahoo:before {\n  content: \"\\F19E\";\n}\n\n.fa-google:before {\n  content: \"\\F1A0\";\n}\n\n.fa-reddit:before {\n  content: \"\\F1A1\";\n}\n\n.fa-reddit-square:before {\n  content: \"\\F1A2\";\n}\n\n.fa-stumbleupon-circle:before {\n  content: \"\\F1A3\";\n}\n\n.fa-stumbleupon:before {\n  content: \"\\F1A4\";\n}\n\n.fa-delicious:before {\n  content: \"\\F1A5\";\n}\n\n.fa-digg:before {\n  content: \"\\F1A6\";\n}\n\n.fa-pied-piper-pp:before {\n  content: \"\\F1A7\";\n}\n\n.fa-pied-piper-alt:before {\n  content: \"\\F1A8\";\n}\n\n.fa-drupal:before {\n  content: \"\\F1A9\";\n}\n\n.fa-joomla:before {\n  content: \"\\F1AA\";\n}\n\n.fa-language:before {\n  content: \"\\F1AB\";\n}\n\n.fa-fax:before {\n  content: \"\\F1AC\";\n}\n\n.fa-building:before {\n  content: \"\\F1AD\";\n}\n\n.fa-child:before {\n  content: \"\\F1AE\";\n}\n\n.fa-paw:before {\n  content: \"\\F1B0\";\n}\n\n.fa-spoon:before {\n  content: \"\\F1B1\";\n}\n\n.fa-cube:before {\n  content: \"\\F1B2\";\n}\n\n.fa-cubes:before {\n  content: \"\\F1B3\";\n}\n\n.fa-behance:before {\n  content: \"\\F1B4\";\n}\n\n.fa-behance-square:before {\n  content: \"\\F1B5\";\n}\n\n.fa-steam:before {\n  content: \"\\F1B6\";\n}\n\n.fa-steam-square:before {\n  content: \"\\F1B7\";\n}\n\n.fa-recycle:before {\n  content: \"\\F1B8\";\n}\n\n.fa-automobile:before,\n.fa-car:before {\n  content: \"\\F1B9\";\n}\n\n.fa-cab:before,\n.fa-taxi:before {\n  content: \"\\F1BA\";\n}\n\n.fa-tree:before {\n  content: \"\\F1BB\";\n}\n\n.fa-spotify:before {\n  content: \"\\F1BC\";\n}\n\n.fa-deviantart:before {\n  content: \"\\F1BD\";\n}\n\n.fa-soundcloud:before {\n  content: \"\\F1BE\";\n}\n\n.fa-database:before {\n  content: \"\\F1C0\";\n}\n\n.fa-file-pdf-o:before {\n  content: \"\\F1C1\";\n}\n\n.fa-file-word-o:before {\n  content: \"\\F1C2\";\n}\n\n.fa-file-excel-o:before {\n  content: \"\\F1C3\";\n}\n\n.fa-file-powerpoint-o:before {\n  content: \"\\F1C4\";\n}\n\n.fa-file-photo-o:before,\n.fa-file-picture-o:before,\n.fa-file-image-o:before {\n  content: \"\\F1C5\";\n}\n\n.fa-file-zip-o:before,\n.fa-file-archive-o:before {\n  content: \"\\F1C6\";\n}\n\n.fa-file-sound-o:before,\n.fa-file-audio-o:before {\n  content: \"\\F1C7\";\n}\n\n.fa-file-movie-o:before,\n.fa-file-video-o:before {\n  content: \"\\F1C8\";\n}\n\n.fa-file-code-o:before {\n  content: \"\\F1C9\";\n}\n\n.fa-vine:before {\n  content: \"\\F1CA\";\n}\n\n.fa-codepen:before {\n  content: \"\\F1CB\";\n}\n\n.fa-jsfiddle:before {\n  content: \"\\F1CC\";\n}\n\n.fa-life-bouy:before,\n.fa-life-buoy:before,\n.fa-life-saver:before,\n.fa-support:before,\n.fa-life-ring:before {\n  content: \"\\F1CD\";\n}\n\n.fa-circle-o-notch:before {\n  content: \"\\F1CE\";\n}\n\n.fa-ra:before,\n.fa-resistance:before,\n.fa-rebel:before {\n  content: \"\\F1D0\";\n}\n\n.fa-ge:before,\n.fa-empire:before {\n  content: \"\\F1D1\";\n}\n\n.fa-git-square:before {\n  content: \"\\F1D2\";\n}\n\n.fa-git:before {\n  content: \"\\F1D3\";\n}\n\n.fa-y-combinator-square:before,\n.fa-yc-square:before,\n.fa-hacker-news:before {\n  content: \"\\F1D4\";\n}\n\n.fa-tencent-weibo:before {\n  content: \"\\F1D5\";\n}\n\n.fa-qq:before {\n  content: \"\\F1D6\";\n}\n\n.fa-wechat:before,\n.fa-weixin:before {\n  content: \"\\F1D7\";\n}\n\n.fa-send:before,\n.fa-paper-plane:before {\n  content: \"\\F1D8\";\n}\n\n.fa-send-o:before,\n.fa-paper-plane-o:before {\n  content: \"\\F1D9\";\n}\n\n.fa-history:before {\n  content: \"\\F1DA\";\n}\n\n.fa-circle-thin:before {\n  content: \"\\F1DB\";\n}\n\n.fa-header:before {\n  content: \"\\F1DC\";\n}\n\n.fa-paragraph:before {\n  content: \"\\F1DD\";\n}\n\n.fa-sliders:before {\n  content: \"\\F1DE\";\n}\n\n.fa-share-alt:before {\n  content: \"\\F1E0\";\n}\n\n.fa-share-alt-square:before {\n  content: \"\\F1E1\";\n}\n\n.fa-bomb:before {\n  content: \"\\F1E2\";\n}\n\n.fa-soccer-ball-o:before,\n.fa-futbol-o:before {\n  content: \"\\F1E3\";\n}\n\n.fa-tty:before {\n  content: \"\\F1E4\";\n}\n\n.fa-binoculars:before {\n  content: \"\\F1E5\";\n}\n\n.fa-plug:before {\n  content: \"\\F1E6\";\n}\n\n.fa-slideshare:before {\n  content: \"\\F1E7\";\n}\n\n.fa-twitch:before {\n  content: \"\\F1E8\";\n}\n\n.fa-yelp:before {\n  content: \"\\F1E9\";\n}\n\n.fa-newspaper-o:before {\n  content: \"\\F1EA\";\n}\n\n.fa-wifi:before {\n  content: \"\\F1EB\";\n}\n\n.fa-calculator:before {\n  content: \"\\F1EC\";\n}\n\n.fa-paypal:before {\n  content: \"\\F1ED\";\n}\n\n.fa-google-wallet:before {\n  content: \"\\F1EE\";\n}\n\n.fa-cc-visa:before {\n  content: \"\\F1F0\";\n}\n\n.fa-cc-mastercard:before {\n  content: \"\\F1F1\";\n}\n\n.fa-cc-discover:before {\n  content: \"\\F1F2\";\n}\n\n.fa-cc-amex:before {\n  content: \"\\F1F3\";\n}\n\n.fa-cc-paypal:before {\n  content: \"\\F1F4\";\n}\n\n.fa-cc-stripe:before {\n  content: \"\\F1F5\";\n}\n\n.fa-bell-slash:before {\n  content: \"\\F1F6\";\n}\n\n.fa-bell-slash-o:before {\n  content: \"\\F1F7\";\n}\n\n.fa-trash:before {\n  content: \"\\F1F8\";\n}\n\n.fa-copyright:before {\n  content: \"\\F1F9\";\n}\n\n.fa-at:before {\n  content: \"\\F1FA\";\n}\n\n.fa-eyedropper:before {\n  content: \"\\F1FB\";\n}\n\n.fa-paint-brush:before {\n  content: \"\\F1FC\";\n}\n\n.fa-birthday-cake:before {\n  content: \"\\F1FD\";\n}\n\n.fa-area-chart:before {\n  content: \"\\F1FE\";\n}\n\n.fa-pie-chart:before {\n  content: \"\\F200\";\n}\n\n.fa-line-chart:before {\n  content: \"\\F201\";\n}\n\n.fa-lastfm:before {\n  content: \"\\F202\";\n}\n\n.fa-lastfm-square:before {\n  content: \"\\F203\";\n}\n\n.fa-toggle-off:before {\n  content: \"\\F204\";\n}\n\n.fa-toggle-on:before {\n  content: \"\\F205\";\n}\n\n.fa-bicycle:before {\n  content: \"\\F206\";\n}\n\n.fa-bus:before {\n  content: \"\\F207\";\n}\n\n.fa-ioxhost:before {\n  content: \"\\F208\";\n}\n\n.fa-angellist:before {\n  content: \"\\F209\";\n}\n\n.fa-cc:before {\n  content: \"\\F20A\";\n}\n\n.fa-shekel:before,\n.fa-sheqel:before,\n.fa-ils:before {\n  content: \"\\F20B\";\n}\n\n.fa-meanpath:before {\n  content: \"\\F20C\";\n}\n\n.fa-buysellads:before {\n  content: \"\\F20D\";\n}\n\n.fa-connectdevelop:before {\n  content: \"\\F20E\";\n}\n\n.fa-dashcube:before {\n  content: \"\\F210\";\n}\n\n.fa-forumbee:before {\n  content: \"\\F211\";\n}\n\n.fa-leanpub:before {\n  content: \"\\F212\";\n}\n\n.fa-sellsy:before {\n  content: \"\\F213\";\n}\n\n.fa-shirtsinbulk:before {\n  content: \"\\F214\";\n}\n\n.fa-simplybuilt:before {\n  content: \"\\F215\";\n}\n\n.fa-skyatlas:before {\n  content: \"\\F216\";\n}\n\n.fa-cart-plus:before {\n  content: \"\\F217\";\n}\n\n.fa-cart-arrow-down:before {\n  content: \"\\F218\";\n}\n\n.fa-diamond:before {\n  content: \"\\F219\";\n}\n\n.fa-ship:before {\n  content: \"\\F21A\";\n}\n\n.fa-user-secret:before {\n  content: \"\\F21B\";\n}\n\n.fa-motorcycle:before {\n  content: \"\\F21C\";\n}\n\n.fa-street-view:before {\n  content: \"\\F21D\";\n}\n\n.fa-heartbeat:before {\n  content: \"\\F21E\";\n}\n\n.fa-venus:before {\n  content: \"\\F221\";\n}\n\n.fa-mars:before {\n  content: \"\\F222\";\n}\n\n.fa-mercury:before {\n  content: \"\\F223\";\n}\n\n.fa-intersex:before,\n.fa-transgender:before {\n  content: \"\\F224\";\n}\n\n.fa-transgender-alt:before {\n  content: \"\\F225\";\n}\n\n.fa-venus-double:before {\n  content: \"\\F226\";\n}\n\n.fa-mars-double:before {\n  content: \"\\F227\";\n}\n\n.fa-venus-mars:before {\n  content: \"\\F228\";\n}\n\n.fa-mars-stroke:before {\n  content: \"\\F229\";\n}\n\n.fa-mars-stroke-v:before {\n  content: \"\\F22A\";\n}\n\n.fa-mars-stroke-h:before {\n  content: \"\\F22B\";\n}\n\n.fa-neuter:before {\n  content: \"\\F22C\";\n}\n\n.fa-genderless:before {\n  content: \"\\F22D\";\n}\n\n.fa-facebook-official:before {\n  content: \"\\F230\";\n}\n\n.fa-pinterest-p:before {\n  content: \"\\F231\";\n}\n\n.fa-whatsapp:before {\n  content: \"\\F232\";\n}\n\n.fa-server:before {\n  content: \"\\F233\";\n}\n\n.fa-user-plus:before {\n  content: \"\\F234\";\n}\n\n.fa-user-times:before {\n  content: \"\\F235\";\n}\n\n.fa-hotel:before,\n.fa-bed:before {\n  content: \"\\F236\";\n}\n\n.fa-viacoin:before {\n  content: \"\\F237\";\n}\n\n.fa-train:before {\n  content: \"\\F238\";\n}\n\n.fa-subway:before {\n  content: \"\\F239\";\n}\n\n.fa-medium:before {\n  content: \"\\F23A\";\n}\n\n.fa-yc:before,\n.fa-y-combinator:before {\n  content: \"\\F23B\";\n}\n\n.fa-optin-monster:before {\n  content: \"\\F23C\";\n}\n\n.fa-opencart:before {\n  content: \"\\F23D\";\n}\n\n.fa-expeditedssl:before {\n  content: \"\\F23E\";\n}\n\n.fa-battery-4:before,\n.fa-battery:before,\n.fa-battery-full:before {\n  content: \"\\F240\";\n}\n\n.fa-battery-3:before,\n.fa-battery-three-quarters:before {\n  content: \"\\F241\";\n}\n\n.fa-battery-2:before,\n.fa-battery-half:before {\n  content: \"\\F242\";\n}\n\n.fa-battery-1:before,\n.fa-battery-quarter:before {\n  content: \"\\F243\";\n}\n\n.fa-battery-0:before,\n.fa-battery-empty:before {\n  content: \"\\F244\";\n}\n\n.fa-mouse-pointer:before {\n  content: \"\\F245\";\n}\n\n.fa-i-cursor:before {\n  content: \"\\F246\";\n}\n\n.fa-object-group:before {\n  content: \"\\F247\";\n}\n\n.fa-object-ungroup:before {\n  content: \"\\F248\";\n}\n\n.fa-sticky-note:before {\n  content: \"\\F249\";\n}\n\n.fa-sticky-note-o:before {\n  content: \"\\F24A\";\n}\n\n.fa-cc-jcb:before {\n  content: \"\\F24B\";\n}\n\n.fa-cc-diners-club:before {\n  content: \"\\F24C\";\n}\n\n.fa-clone:before {\n  content: \"\\F24D\";\n}\n\n.fa-balance-scale:before {\n  content: \"\\F24E\";\n}\n\n.fa-hourglass-o:before {\n  content: \"\\F250\";\n}\n\n.fa-hourglass-1:before,\n.fa-hourglass-start:before {\n  content: \"\\F251\";\n}\n\n.fa-hourglass-2:before,\n.fa-hourglass-half:before {\n  content: \"\\F252\";\n}\n\n.fa-hourglass-3:before,\n.fa-hourglass-end:before {\n  content: \"\\F253\";\n}\n\n.fa-hourglass:before {\n  content: \"\\F254\";\n}\n\n.fa-hand-grab-o:before,\n.fa-hand-rock-o:before {\n  content: \"\\F255\";\n}\n\n.fa-hand-stop-o:before,\n.fa-hand-paper-o:before {\n  content: \"\\F256\";\n}\n\n.fa-hand-scissors-o:before {\n  content: \"\\F257\";\n}\n\n.fa-hand-lizard-o:before {\n  content: \"\\F258\";\n}\n\n.fa-hand-spock-o:before {\n  content: \"\\F259\";\n}\n\n.fa-hand-pointer-o:before {\n  content: \"\\F25A\";\n}\n\n.fa-hand-peace-o:before {\n  content: \"\\F25B\";\n}\n\n.fa-trademark:before {\n  content: \"\\F25C\";\n}\n\n.fa-registered:before {\n  content: \"\\F25D\";\n}\n\n.fa-creative-commons:before {\n  content: \"\\F25E\";\n}\n\n.fa-gg:before {\n  content: \"\\F260\";\n}\n\n.fa-gg-circle:before {\n  content: \"\\F261\";\n}\n\n.fa-tripadvisor:before {\n  content: \"\\F262\";\n}\n\n.fa-odnoklassniki:before {\n  content: \"\\F263\";\n}\n\n.fa-odnoklassniki-square:before {\n  content: \"\\F264\";\n}\n\n.fa-get-pocket:before {\n  content: \"\\F265\";\n}\n\n.fa-wikipedia-w:before {\n  content: \"\\F266\";\n}\n\n.fa-safari:before {\n  content: \"\\F267\";\n}\n\n.fa-chrome:before {\n  content: \"\\F268\";\n}\n\n.fa-firefox:before {\n  content: \"\\F269\";\n}\n\n.fa-opera:before {\n  content: \"\\F26A\";\n}\n\n.fa-internet-explorer:before {\n  content: \"\\F26B\";\n}\n\n.fa-tv:before,\n.fa-television:before {\n  content: \"\\F26C\";\n}\n\n.fa-contao:before {\n  content: \"\\F26D\";\n}\n\n.fa-500px:before {\n  content: \"\\F26E\";\n}\n\n.fa-amazon:before {\n  content: \"\\F270\";\n}\n\n.fa-calendar-plus-o:before {\n  content: \"\\F271\";\n}\n\n.fa-calendar-minus-o:before {\n  content: \"\\F272\";\n}\n\n.fa-calendar-times-o:before {\n  content: \"\\F273\";\n}\n\n.fa-calendar-check-o:before {\n  content: \"\\F274\";\n}\n\n.fa-industry:before {\n  content: \"\\F275\";\n}\n\n.fa-map-pin:before {\n  content: \"\\F276\";\n}\n\n.fa-map-signs:before {\n  content: \"\\F277\";\n}\n\n.fa-map-o:before {\n  content: \"\\F278\";\n}\n\n.fa-map:before {\n  content: \"\\F279\";\n}\n\n.fa-commenting:before {\n  content: \"\\F27A\";\n}\n\n.fa-commenting-o:before {\n  content: \"\\F27B\";\n}\n\n.fa-houzz:before {\n  content: \"\\F27C\";\n}\n\n.fa-vimeo:before {\n  content: \"\\F27D\";\n}\n\n.fa-black-tie:before {\n  content: \"\\F27E\";\n}\n\n.fa-fonticons:before {\n  content: \"\\F280\";\n}\n\n.fa-reddit-alien:before {\n  content: \"\\F281\";\n}\n\n.fa-edge:before {\n  content: \"\\F282\";\n}\n\n.fa-credit-card-alt:before {\n  content: \"\\F283\";\n}\n\n.fa-codiepie:before {\n  content: \"\\F284\";\n}\n\n.fa-modx:before {\n  content: \"\\F285\";\n}\n\n.fa-fort-awesome:before {\n  content: \"\\F286\";\n}\n\n.fa-usb:before {\n  content: \"\\F287\";\n}\n\n.fa-product-hunt:before {\n  content: \"\\F288\";\n}\n\n.fa-mixcloud:before {\n  content: \"\\F289\";\n}\n\n.fa-scribd:before {\n  content: \"\\F28A\";\n}\n\n.fa-pause-circle:before {\n  content: \"\\F28B\";\n}\n\n.fa-pause-circle-o:before {\n  content: \"\\F28C\";\n}\n\n.fa-stop-circle:before {\n  content: \"\\F28D\";\n}\n\n.fa-stop-circle-o:before {\n  content: \"\\F28E\";\n}\n\n.fa-shopping-bag:before {\n  content: \"\\F290\";\n}\n\n.fa-shopping-basket:before {\n  content: \"\\F291\";\n}\n\n.fa-hashtag:before {\n  content: \"\\F292\";\n}\n\n.fa-bluetooth:before {\n  content: \"\\F293\";\n}\n\n.fa-bluetooth-b:before {\n  content: \"\\F294\";\n}\n\n.fa-percent:before {\n  content: \"\\F295\";\n}\n\n.fa-gitlab:before {\n  content: \"\\F296\";\n}\n\n.fa-wpbeginner:before {\n  content: \"\\F297\";\n}\n\n.fa-wpforms:before {\n  content: \"\\F298\";\n}\n\n.fa-envira:before {\n  content: \"\\F299\";\n}\n\n.fa-universal-access:before {\n  content: \"\\F29A\";\n}\n\n.fa-wheelchair-alt:before {\n  content: \"\\F29B\";\n}\n\n.fa-question-circle-o:before {\n  content: \"\\F29C\";\n}\n\n.fa-blind:before {\n  content: \"\\F29D\";\n}\n\n.fa-audio-description:before {\n  content: \"\\F29E\";\n}\n\n.fa-volume-control-phone:before {\n  content: \"\\F2A0\";\n}\n\n.fa-braille:before {\n  content: \"\\F2A1\";\n}\n\n.fa-assistive-listening-systems:before {\n  content: \"\\F2A2\";\n}\n\n.fa-asl-interpreting:before,\n.fa-american-sign-language-interpreting:before {\n  content: \"\\F2A3\";\n}\n\n.fa-deafness:before,\n.fa-hard-of-hearing:before,\n.fa-deaf:before {\n  content: \"\\F2A4\";\n}\n\n.fa-glide:before {\n  content: \"\\F2A5\";\n}\n\n.fa-glide-g:before {\n  content: \"\\F2A6\";\n}\n\n.fa-signing:before,\n.fa-sign-language:before {\n  content: \"\\F2A7\";\n}\n\n.fa-low-vision:before {\n  content: \"\\F2A8\";\n}\n\n.fa-viadeo:before {\n  content: \"\\F2A9\";\n}\n\n.fa-viadeo-square:before {\n  content: \"\\F2AA\";\n}\n\n.fa-snapchat:before {\n  content: \"\\F2AB\";\n}\n\n.fa-snapchat-ghost:before {\n  content: \"\\F2AC\";\n}\n\n.fa-snapchat-square:before {\n  content: \"\\F2AD\";\n}\n\n.fa-pied-piper:before {\n  content: \"\\F2AE\";\n}\n\n.fa-first-order:before {\n  content: \"\\F2B0\";\n}\n\n.fa-yoast:before {\n  content: \"\\F2B1\";\n}\n\n.fa-themeisle:before {\n  content: \"\\F2B2\";\n}\n\n.fa-google-plus-circle:before,\n.fa-google-plus-official:before {\n  content: \"\\F2B3\";\n}\n\n.fa-fa:before,\n.fa-font-awesome:before {\n  content: \"\\F2B4\";\n}\n\n.fa-handshake-o:before {\n  content: \"\\F2B5\";\n}\n\n.fa-envelope-open:before {\n  content: \"\\F2B6\";\n}\n\n.fa-envelope-open-o:before {\n  content: \"\\F2B7\";\n}\n\n.fa-linode:before {\n  content: \"\\F2B8\";\n}\n\n.fa-address-book:before {\n  content: \"\\F2B9\";\n}\n\n.fa-address-book-o:before {\n  content: \"\\F2BA\";\n}\n\n.fa-vcard:before,\n.fa-address-card:before {\n  content: \"\\F2BB\";\n}\n\n.fa-vcard-o:before,\n.fa-address-card-o:before {\n  content: \"\\F2BC\";\n}\n\n.fa-user-circle:before {\n  content: \"\\F2BD\";\n}\n\n.fa-user-circle-o:before {\n  content: \"\\F2BE\";\n}\n\n.fa-user-o:before {\n  content: \"\\F2C0\";\n}\n\n.fa-id-badge:before {\n  content: \"\\F2C1\";\n}\n\n.fa-drivers-license:before,\n.fa-id-card:before {\n  content: \"\\F2C2\";\n}\n\n.fa-drivers-license-o:before,\n.fa-id-card-o:before {\n  content: \"\\F2C3\";\n}\n\n.fa-quora:before {\n  content: \"\\F2C4\";\n}\n\n.fa-free-code-camp:before {\n  content: \"\\F2C5\";\n}\n\n.fa-telegram:before {\n  content: \"\\F2C6\";\n}\n\n.fa-thermometer-4:before,\n.fa-thermometer:before,\n.fa-thermometer-full:before {\n  content: \"\\F2C7\";\n}\n\n.fa-thermometer-3:before,\n.fa-thermometer-three-quarters:before {\n  content: \"\\F2C8\";\n}\n\n.fa-thermometer-2:before,\n.fa-thermometer-half:before {\n  content: \"\\F2C9\";\n}\n\n.fa-thermometer-1:before,\n.fa-thermometer-quarter:before {\n  content: \"\\F2CA\";\n}\n\n.fa-thermometer-0:before,\n.fa-thermometer-empty:before {\n  content: \"\\F2CB\";\n}\n\n.fa-shower:before {\n  content: \"\\F2CC\";\n}\n\n.fa-bathtub:before,\n.fa-s15:before,\n.fa-bath:before {\n  content: \"\\F2CD\";\n}\n\n.fa-podcast:before {\n  content: \"\\F2CE\";\n}\n\n.fa-window-maximize:before {\n  content: \"\\F2D0\";\n}\n\n.fa-window-minimize:before {\n  content: \"\\F2D1\";\n}\n\n.fa-window-restore:before {\n  content: \"\\F2D2\";\n}\n\n.fa-times-rectangle:before,\n.fa-window-close:before {\n  content: \"\\F2D3\";\n}\n\n.fa-times-rectangle-o:before,\n.fa-window-close-o:before {\n  content: \"\\F2D4\";\n}\n\n.fa-bandcamp:before {\n  content: \"\\F2D5\";\n}\n\n.fa-grav:before {\n  content: \"\\F2D6\";\n}\n\n.fa-etsy:before {\n  content: \"\\F2D7\";\n}\n\n.fa-imdb:before {\n  content: \"\\F2D8\";\n}\n\n.fa-ravelry:before {\n  content: \"\\F2D9\";\n}\n\n.fa-eercast:before {\n  content: \"\\F2DA\";\n}\n\n.fa-microchip:before {\n  content: \"\\F2DB\";\n}\n\n.fa-snowflake-o:before {\n  content: \"\\F2DC\";\n}\n\n.fa-superpowers:before {\n  content: \"\\F2DD\";\n}\n\n.fa-wpexplorer:before {\n  content: \"\\F2DE\";\n}\n\n.fa-meetup:before {\n  content: \"\\F2E0\";\n}\n\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\nhtml {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\nbody {\n  margin: 0;\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  vertical-align: baseline;\n}\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n[hidden],\ntemplate {\n  display: none;\n}\n\na {\n  background-color: transparent;\n}\n\na:active,\na:hover {\n  outline: 0;\n}\n\nabbr[title] {\n  border-bottom: 1px dotted;\n}\n\nb,\nstrong {\n  font-weight: bold;\n}\n\ndfn {\n  font-style: italic;\n}\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\nmark {\n  background: #ff0;\n  color: #000;\n}\n\nsmall {\n  font-size: 80%;\n}\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5em;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nimg {\n  border: 0;\n}\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\nfigure {\n  margin: 1em 40px;\n}\n\nhr {\n  -moz-box-sizing: content-box;\n       box-sizing: content-box;\n  height: 0;\n}\n\npre {\n  overflow: auto;\n}\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\n\nbutton {\n  overflow: visible;\n}\n\nbutton,\nselect {\n  text-transform: none;\n}\n\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer;\n}\n\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\n\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\ninput {\n  line-height: normal;\n}\n\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  -moz-box-sizing: border-box;\n       box-sizing: border-box;\n  padding: 0;\n}\n\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  -moz-box-sizing: content-box;\n       box-sizing: content-box;\n}\n\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\nlegend {\n  border: 0;\n  padding: 0;\n}\n\ntextarea {\n  overflow: auto;\n}\n\noptgroup {\n  font-weight: bold;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd,\nth {\n  padding: 0;\n}\n\n/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */\n@media print {\n  *,\n  *:before,\n  *:after {\n    background: transparent !important;\n    color: #000 !important;\n    box-shadow: none !important;\n    text-shadow: none !important;\n  }\n  a,\n  a:visited {\n    text-decoration: underline;\n  }\n  a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n  a[href^=\"#\"]:after,\n  a[href^=\"javascript:\"]:after {\n    content: \"\";\n  }\n  pre,\n  blockquote {\n    border: 1px solid #999;\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr,\n  img {\n    page-break-inside: avoid;\n  }\n  img {\n    max-width: 100% !important;\n  }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2,\n  h3 {\n    page-break-after: avoid;\n  }\n  .navbar {\n    display: none;\n  }\n  .btn > .caret,\n  .dropup > .btn > .caret {\n    border-top-color: #000 !important;\n  }\n  .label {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td,\n  .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #ddd !important;\n  }\n}\n\n* {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n*:before,\n*:after {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\nhtml {\n  font-size: 10px;\n  -webkit-tap-highlight-color: transparent;\n}\n\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.428571429;\n  color: #333333;\n  background-color: #fff;\n}\n\ninput,\nbutton,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\na {\n  color: #337ab7;\n  text-decoration: none;\n}\n\na:hover, a:focus {\n  color: #23527c;\n  text-decoration: underline;\n}\n\na:focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n\nfigure {\n  margin: 0;\n}\n\nimg {\n  vertical-align: middle;\n}\n\n.img-responsive {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n\n.img-rounded {\n  border-radius: 6px;\n}\n\n.img-thumbnail {\n  padding: 4px;\n  line-height: 1.428571429;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: all 0.2s ease-in-out;\n  transition: all 0.2s ease-in-out;\n  display: inline-block;\n  max-width: 100%;\n  height: auto;\n}\n\n.img-circle {\n  border-radius: 50%;\n}\n\nhr {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #eeeeee;\n}\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n\n[role=\"button\"] {\n  cursor: pointer;\n}\n\nh1, h2, h3, h4, h5, h6,\n.h1, .h2, .h3, .h4, .h5, .h6 {\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.1;\n  color: inherit;\n}\n\nh1 small,\nh1 .small, h2 small,\nh2 .small, h3 small,\nh3 .small, h4 small,\nh4 .small, h5 small,\nh5 .small, h6 small,\nh6 .small,\n.h1 small,\n.h1 .small, .h2 small,\n.h2 .small, .h3 small,\n.h3 .small, .h4 small,\n.h4 .small, .h5 small,\n.h5 .small, .h6 small,\n.h6 .small {\n  font-weight: normal;\n  line-height: 1;\n  color: #777777;\n}\n\nh1, .h1,\nh2, .h2,\nh3, .h3 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\n\nh1 small,\nh1 .small, .h1 small,\n.h1 .small,\nh2 small,\nh2 .small, .h2 small,\n.h2 .small,\nh3 small,\nh3 .small, .h3 small,\n.h3 .small {\n  font-size: 65%;\n}\n\nh4, .h4,\nh5, .h5,\nh6, .h6 {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\nh4 small,\nh4 .small, .h4 small,\n.h4 .small,\nh5 small,\nh5 .small, .h5 small,\n.h5 .small,\nh6 small,\nh6 .small, .h6 small,\n.h6 .small {\n  font-size: 75%;\n}\n\nh1, .h1 {\n  font-size: 36px;\n}\n\nh2, .h2 {\n  font-size: 30px;\n}\n\nh3, .h3 {\n  font-size: 24px;\n}\n\nh4, .h4 {\n  font-size: 18px;\n}\n\nh5, .h5 {\n  font-size: 14px;\n}\n\nh6, .h6 {\n  font-size: 12px;\n}\n\np {\n  margin: 0 0 10px;\n}\n\n.lead {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1.4;\n}\n\n@media (min-width: 768px) {\n  .lead {\n    font-size: 21px;\n  }\n}\n\nsmall,\n.small {\n  font-size: 85%;\n}\n\nmark,\n.mark {\n  background-color: #fcf8e3;\n  padding: .2em;\n}\n\n.text-left {\n  text-align: left;\n}\n\n.text-right {\n  text-align: right;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-justify {\n  text-align: justify;\n}\n\n.text-nowrap {\n  white-space: nowrap;\n}\n\n.text-lowercase {\n  text-transform: lowercase;\n}\n\n.text-uppercase, .initialism {\n  text-transform: uppercase;\n}\n\n.text-capitalize {\n  text-transform: capitalize;\n}\n\n.text-muted {\n  color: #777777;\n}\n\n.text-primary {\n  color: #337ab7;\n}\n\na.text-primary:hover,\na.text-primary:focus {\n  color: #286090;\n}\n\n.text-success {\n  color: #3c763d;\n}\n\na.text-success:hover,\na.text-success:focus {\n  color: #2b542c;\n}\n\n.text-info {\n  color: #31708f;\n}\n\na.text-info:hover,\na.text-info:focus {\n  color: #245269;\n}\n\n.text-warning {\n  color: #8a6d3b;\n}\n\na.text-warning:hover,\na.text-warning:focus {\n  color: #66512c;\n}\n\n.text-danger {\n  color: #a94442;\n}\n\na.text-danger:hover,\na.text-danger:focus {\n  color: #843534;\n}\n\n.bg-primary {\n  color: #fff;\n}\n\n.bg-primary {\n  background-color: #337ab7;\n}\n\na.bg-primary:hover,\na.bg-primary:focus {\n  background-color: #286090;\n}\n\n.bg-success {\n  background-color: #dff0d8;\n}\n\na.bg-success:hover,\na.bg-success:focus {\n  background-color: #c1e2b3;\n}\n\n.bg-info {\n  background-color: #d9edf7;\n}\n\na.bg-info:hover,\na.bg-info:focus {\n  background-color: #afd9ee;\n}\n\n.bg-warning {\n  background-color: #fcf8e3;\n}\n\na.bg-warning:hover,\na.bg-warning:focus {\n  background-color: #f7ecb5;\n}\n\n.bg-danger {\n  background-color: #f2dede;\n}\n\na.bg-danger:hover,\na.bg-danger:focus {\n  background-color: #e4b9b9;\n}\n\n.page-header {\n  padding-bottom: 9px;\n  margin: 40px 0 20px;\n  border-bottom: 1px solid #eeeeee;\n}\n\nul,\nol {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\nul ul,\nul ol,\nol ul,\nol ol {\n  margin-bottom: 0;\n}\n\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n\n.list-inline {\n  padding-left: 0;\n  list-style: none;\n  margin-left: -5px;\n}\n\n.list-inline > li {\n  display: inline-block;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\ndl {\n  margin-top: 0;\n  margin-bottom: 20px;\n}\n\ndt,\ndd {\n  line-height: 1.428571429;\n}\n\ndt {\n  font-weight: bold;\n}\n\ndd {\n  margin-left: 0;\n}\n\n.dl-horizontal dd:before, .dl-horizontal dd:after {\n  content: \" \";\n  display: table;\n}\n\n.dl-horizontal dd:after {\n  clear: both;\n}\n\n@media (min-width: 768px) {\n  .dl-horizontal dt {\n    float: left;\n    width: 160px;\n    clear: left;\n    text-align: right;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .dl-horizontal dd {\n    margin-left: 180px;\n  }\n}\n\nabbr[title],\nabbr[data-original-title] {\n  cursor: help;\n  border-bottom: 1px dotted #777777;\n}\n\n.initialism {\n  font-size: 90%;\n}\n\nblockquote {\n  padding: 10px 20px;\n  margin: 0 0 20px;\n  font-size: 17.5px;\n  border-left: 5px solid #eeeeee;\n}\n\nblockquote p:last-child,\nblockquote ul:last-child,\nblockquote ol:last-child {\n  margin-bottom: 0;\n}\n\nblockquote footer,\nblockquote small,\nblockquote .small {\n  display: block;\n  font-size: 80%;\n  line-height: 1.428571429;\n  color: #777777;\n}\n\nblockquote footer:before,\nblockquote small:before,\nblockquote .small:before {\n  content: '\\2014   \\A0';\n}\n\n.blockquote-reverse,\nblockquote.pull-right {\n  padding-right: 15px;\n  padding-left: 0;\n  border-right: 5px solid #eeeeee;\n  border-left: 0;\n  text-align: right;\n}\n\n.blockquote-reverse footer:before,\n.blockquote-reverse small:before,\n.blockquote-reverse .small:before,\nblockquote.pull-right footer:before,\nblockquote.pull-right small:before,\nblockquote.pull-right .small:before {\n  content: '';\n}\n\n.blockquote-reverse footer:after,\n.blockquote-reverse small:after,\n.blockquote-reverse .small:after,\nblockquote.pull-right footer:after,\nblockquote.pull-right small:after,\nblockquote.pull-right .small:after {\n  content: '\\A0   \\2014';\n}\n\naddress {\n  margin-bottom: 20px;\n  font-style: normal;\n  line-height: 1.428571429;\n}\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\n\ncode {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: 4px;\n}\n\nkbd {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #fff;\n  background-color: #333;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.25);\n}\n\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: bold;\n  box-shadow: none;\n}\n\npre {\n  display: block;\n  padding: 9.5px;\n  margin: 0 0 10px;\n  font-size: 13px;\n  line-height: 1.428571429;\n  word-break: break-all;\n  word-wrap: break-word;\n  color: #333333;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\npre code {\n  padding: 0;\n  font-size: inherit;\n  color: inherit;\n  white-space: pre-wrap;\n  background-color: transparent;\n  border-radius: 0;\n}\n\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n\n.container {\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n.container:before, .container:after {\n  content: \" \";\n  display: table;\n}\n\n.container:after {\n  clear: both;\n}\n\n@media (min-width: 768px) {\n  .container {\n    width: 750px;\n  }\n}\n\n@media (min-width: 992px) {\n  .container {\n    width: 970px;\n  }\n}\n\n@media (min-width: 1200px) {\n  .container {\n    width: 1170px;\n  }\n}\n\n.container-fluid {\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n.container-fluid:before, .container-fluid:after {\n  content: \" \";\n  display: table;\n}\n\n.container-fluid:after {\n  clear: both;\n}\n\n.row {\n  margin-left: -15px;\n  margin-right: -15px;\n}\n\n.row:before, .row:after {\n  content: \" \";\n  display: table;\n}\n\n.row:after {\n  clear: both;\n}\n\n.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {\n  position: relative;\n  min-height: 1px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {\n  float: left;\n}\n\n.col-xs-1 {\n  width: 8.3333333333%;\n}\n\n.col-xs-2 {\n  width: 16.6666666667%;\n}\n\n.col-xs-3 {\n  width: 25%;\n}\n\n.col-xs-4 {\n  width: 33.3333333333%;\n}\n\n.col-xs-5 {\n  width: 41.6666666667%;\n}\n\n.col-xs-6 {\n  width: 50%;\n}\n\n.col-xs-7 {\n  width: 58.3333333333%;\n}\n\n.col-xs-8 {\n  width: 66.6666666667%;\n}\n\n.col-xs-9 {\n  width: 75%;\n}\n\n.col-xs-10 {\n  width: 83.3333333333%;\n}\n\n.col-xs-11 {\n  width: 91.6666666667%;\n}\n\n.col-xs-12 {\n  width: 100%;\n}\n\n.col-xs-pull-0 {\n  right: auto;\n}\n\n.col-xs-pull-1 {\n  right: 8.3333333333%;\n}\n\n.col-xs-pull-2 {\n  right: 16.6666666667%;\n}\n\n.col-xs-pull-3 {\n  right: 25%;\n}\n\n.col-xs-pull-4 {\n  right: 33.3333333333%;\n}\n\n.col-xs-pull-5 {\n  right: 41.6666666667%;\n}\n\n.col-xs-pull-6 {\n  right: 50%;\n}\n\n.col-xs-pull-7 {\n  right: 58.3333333333%;\n}\n\n.col-xs-pull-8 {\n  right: 66.6666666667%;\n}\n\n.col-xs-pull-9 {\n  right: 75%;\n}\n\n.col-xs-pull-10 {\n  right: 83.3333333333%;\n}\n\n.col-xs-pull-11 {\n  right: 91.6666666667%;\n}\n\n.col-xs-pull-12 {\n  right: 100%;\n}\n\n.col-xs-push-0 {\n  left: auto;\n}\n\n.col-xs-push-1 {\n  left: 8.3333333333%;\n}\n\n.col-xs-push-2 {\n  left: 16.6666666667%;\n}\n\n.col-xs-push-3 {\n  left: 25%;\n}\n\n.col-xs-push-4 {\n  left: 33.3333333333%;\n}\n\n.col-xs-push-5 {\n  left: 41.6666666667%;\n}\n\n.col-xs-push-6 {\n  left: 50%;\n}\n\n.col-xs-push-7 {\n  left: 58.3333333333%;\n}\n\n.col-xs-push-8 {\n  left: 66.6666666667%;\n}\n\n.col-xs-push-9 {\n  left: 75%;\n}\n\n.col-xs-push-10 {\n  left: 83.3333333333%;\n}\n\n.col-xs-push-11 {\n  left: 91.6666666667%;\n}\n\n.col-xs-push-12 {\n  left: 100%;\n}\n\n.col-xs-offset-0 {\n  margin-left: 0%;\n}\n\n.col-xs-offset-1 {\n  margin-left: 8.3333333333%;\n}\n\n.col-xs-offset-2 {\n  margin-left: 16.6666666667%;\n}\n\n.col-xs-offset-3 {\n  margin-left: 25%;\n}\n\n.col-xs-offset-4 {\n  margin-left: 33.3333333333%;\n}\n\n.col-xs-offset-5 {\n  margin-left: 41.6666666667%;\n}\n\n.col-xs-offset-6 {\n  margin-left: 50%;\n}\n\n.col-xs-offset-7 {\n  margin-left: 58.3333333333%;\n}\n\n.col-xs-offset-8 {\n  margin-left: 66.6666666667%;\n}\n\n.col-xs-offset-9 {\n  margin-left: 75%;\n}\n\n.col-xs-offset-10 {\n  margin-left: 83.3333333333%;\n}\n\n.col-xs-offset-11 {\n  margin-left: 91.6666666667%;\n}\n\n.col-xs-offset-12 {\n  margin-left: 100%;\n}\n\n@media (min-width: 768px) {\n  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {\n    float: left;\n  }\n  .col-sm-1 {\n    width: 8.3333333333%;\n  }\n  .col-sm-2 {\n    width: 16.6666666667%;\n  }\n  .col-sm-3 {\n    width: 25%;\n  }\n  .col-sm-4 {\n    width: 33.3333333333%;\n  }\n  .col-sm-5 {\n    width: 41.6666666667%;\n  }\n  .col-sm-6 {\n    width: 50%;\n  }\n  .col-sm-7 {\n    width: 58.3333333333%;\n  }\n  .col-sm-8 {\n    width: 66.6666666667%;\n  }\n  .col-sm-9 {\n    width: 75%;\n  }\n  .col-sm-10 {\n    width: 83.3333333333%;\n  }\n  .col-sm-11 {\n    width: 91.6666666667%;\n  }\n  .col-sm-12 {\n    width: 100%;\n  }\n  .col-sm-pull-0 {\n    right: auto;\n  }\n  .col-sm-pull-1 {\n    right: 8.3333333333%;\n  }\n  .col-sm-pull-2 {\n    right: 16.6666666667%;\n  }\n  .col-sm-pull-3 {\n    right: 25%;\n  }\n  .col-sm-pull-4 {\n    right: 33.3333333333%;\n  }\n  .col-sm-pull-5 {\n    right: 41.6666666667%;\n  }\n  .col-sm-pull-6 {\n    right: 50%;\n  }\n  .col-sm-pull-7 {\n    right: 58.3333333333%;\n  }\n  .col-sm-pull-8 {\n    right: 66.6666666667%;\n  }\n  .col-sm-pull-9 {\n    right: 75%;\n  }\n  .col-sm-pull-10 {\n    right: 83.3333333333%;\n  }\n  .col-sm-pull-11 {\n    right: 91.6666666667%;\n  }\n  .col-sm-pull-12 {\n    right: 100%;\n  }\n  .col-sm-push-0 {\n    left: auto;\n  }\n  .col-sm-push-1 {\n    left: 8.3333333333%;\n  }\n  .col-sm-push-2 {\n    left: 16.6666666667%;\n  }\n  .col-sm-push-3 {\n    left: 25%;\n  }\n  .col-sm-push-4 {\n    left: 33.3333333333%;\n  }\n  .col-sm-push-5 {\n    left: 41.6666666667%;\n  }\n  .col-sm-push-6 {\n    left: 50%;\n  }\n  .col-sm-push-7 {\n    left: 58.3333333333%;\n  }\n  .col-sm-push-8 {\n    left: 66.6666666667%;\n  }\n  .col-sm-push-9 {\n    left: 75%;\n  }\n  .col-sm-push-10 {\n    left: 83.3333333333%;\n  }\n  .col-sm-push-11 {\n    left: 91.6666666667%;\n  }\n  .col-sm-push-12 {\n    left: 100%;\n  }\n  .col-sm-offset-0 {\n    margin-left: 0%;\n  }\n  .col-sm-offset-1 {\n    margin-left: 8.3333333333%;\n  }\n  .col-sm-offset-2 {\n    margin-left: 16.6666666667%;\n  }\n  .col-sm-offset-3 {\n    margin-left: 25%;\n  }\n  .col-sm-offset-4 {\n    margin-left: 33.3333333333%;\n  }\n  .col-sm-offset-5 {\n    margin-left: 41.6666666667%;\n  }\n  .col-sm-offset-6 {\n    margin-left: 50%;\n  }\n  .col-sm-offset-7 {\n    margin-left: 58.3333333333%;\n  }\n  .col-sm-offset-8 {\n    margin-left: 66.6666666667%;\n  }\n  .col-sm-offset-9 {\n    margin-left: 75%;\n  }\n  .col-sm-offset-10 {\n    margin-left: 83.3333333333%;\n  }\n  .col-sm-offset-11 {\n    margin-left: 91.6666666667%;\n  }\n  .col-sm-offset-12 {\n    margin-left: 100%;\n  }\n}\n\n@media (min-width: 992px) {\n  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\n    float: left;\n  }\n  .col-md-1 {\n    width: 8.3333333333%;\n  }\n  .col-md-2 {\n    width: 16.6666666667%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-4 {\n    width: 33.3333333333%;\n  }\n  .col-md-5 {\n    width: 41.6666666667%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-7 {\n    width: 58.3333333333%;\n  }\n  .col-md-8 {\n    width: 66.6666666667%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-10 {\n    width: 83.3333333333%;\n  }\n  .col-md-11 {\n    width: 91.6666666667%;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n  .col-md-pull-0 {\n    right: auto;\n  }\n  .col-md-pull-1 {\n    right: 8.3333333333%;\n  }\n  .col-md-pull-2 {\n    right: 16.6666666667%;\n  }\n  .col-md-pull-3 {\n    right: 25%;\n  }\n  .col-md-pull-4 {\n    right: 33.3333333333%;\n  }\n  .col-md-pull-5 {\n    right: 41.6666666667%;\n  }\n  .col-md-pull-6 {\n    right: 50%;\n  }\n  .col-md-pull-7 {\n    right: 58.3333333333%;\n  }\n  .col-md-pull-8 {\n    right: 66.6666666667%;\n  }\n  .col-md-pull-9 {\n    right: 75%;\n  }\n  .col-md-pull-10 {\n    right: 83.3333333333%;\n  }\n  .col-md-pull-11 {\n    right: 91.6666666667%;\n  }\n  .col-md-pull-12 {\n    right: 100%;\n  }\n  .col-md-push-0 {\n    left: auto;\n  }\n  .col-md-push-1 {\n    left: 8.3333333333%;\n  }\n  .col-md-push-2 {\n    left: 16.6666666667%;\n  }\n  .col-md-push-3 {\n    left: 25%;\n  }\n  .col-md-push-4 {\n    left: 33.3333333333%;\n  }\n  .col-md-push-5 {\n    left: 41.6666666667%;\n  }\n  .col-md-push-6 {\n    left: 50%;\n  }\n  .col-md-push-7 {\n    left: 58.3333333333%;\n  }\n  .col-md-push-8 {\n    left: 66.6666666667%;\n  }\n  .col-md-push-9 {\n    left: 75%;\n  }\n  .col-md-push-10 {\n    left: 83.3333333333%;\n  }\n  .col-md-push-11 {\n    left: 91.6666666667%;\n  }\n  .col-md-push-12 {\n    left: 100%;\n  }\n  .col-md-offset-0 {\n    margin-left: 0%;\n  }\n  .col-md-offset-1 {\n    margin-left: 8.3333333333%;\n  }\n  .col-md-offset-2 {\n    margin-left: 16.6666666667%;\n  }\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n  .col-md-offset-4 {\n    margin-left: 33.3333333333%;\n  }\n  .col-md-offset-5 {\n    margin-left: 41.6666666667%;\n  }\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n  .col-md-offset-7 {\n    margin-left: 58.3333333333%;\n  }\n  .col-md-offset-8 {\n    margin-left: 66.6666666667%;\n  }\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n  .col-md-offset-10 {\n    margin-left: 83.3333333333%;\n  }\n  .col-md-offset-11 {\n    margin-left: 91.6666666667%;\n  }\n  .col-md-offset-12 {\n    margin-left: 100%;\n  }\n}\n\n@media (min-width: 1200px) {\n  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {\n    float: left;\n  }\n  .col-lg-1 {\n    width: 8.3333333333%;\n  }\n  .col-lg-2 {\n    width: 16.6666666667%;\n  }\n  .col-lg-3 {\n    width: 25%;\n  }\n  .col-lg-4 {\n    width: 33.3333333333%;\n  }\n  .col-lg-5 {\n    width: 41.6666666667%;\n  }\n  .col-lg-6 {\n    width: 50%;\n  }\n  .col-lg-7 {\n    width: 58.3333333333%;\n  }\n  .col-lg-8 {\n    width: 66.6666666667%;\n  }\n  .col-lg-9 {\n    width: 75%;\n  }\n  .col-lg-10 {\n    width: 83.3333333333%;\n  }\n  .col-lg-11 {\n    width: 91.6666666667%;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n  .col-lg-pull-0 {\n    right: auto;\n  }\n  .col-lg-pull-1 {\n    right: 8.3333333333%;\n  }\n  .col-lg-pull-2 {\n    right: 16.6666666667%;\n  }\n  .col-lg-pull-3 {\n    right: 25%;\n  }\n  .col-lg-pull-4 {\n    right: 33.3333333333%;\n  }\n  .col-lg-pull-5 {\n    right: 41.6666666667%;\n  }\n  .col-lg-pull-6 {\n    right: 50%;\n  }\n  .col-lg-pull-7 {\n    right: 58.3333333333%;\n  }\n  .col-lg-pull-8 {\n    right: 66.6666666667%;\n  }\n  .col-lg-pull-9 {\n    right: 75%;\n  }\n  .col-lg-pull-10 {\n    right: 83.3333333333%;\n  }\n  .col-lg-pull-11 {\n    right: 91.6666666667%;\n  }\n  .col-lg-pull-12 {\n    right: 100%;\n  }\n  .col-lg-push-0 {\n    left: auto;\n  }\n  .col-lg-push-1 {\n    left: 8.3333333333%;\n  }\n  .col-lg-push-2 {\n    left: 16.6666666667%;\n  }\n  .col-lg-push-3 {\n    left: 25%;\n  }\n  .col-lg-push-4 {\n    left: 33.3333333333%;\n  }\n  .col-lg-push-5 {\n    left: 41.6666666667%;\n  }\n  .col-lg-push-6 {\n    left: 50%;\n  }\n  .col-lg-push-7 {\n    left: 58.3333333333%;\n  }\n  .col-lg-push-8 {\n    left: 66.6666666667%;\n  }\n  .col-lg-push-9 {\n    left: 75%;\n  }\n  .col-lg-push-10 {\n    left: 83.3333333333%;\n  }\n  .col-lg-push-11 {\n    left: 91.6666666667%;\n  }\n  .col-lg-push-12 {\n    left: 100%;\n  }\n  .col-lg-offset-0 {\n    margin-left: 0%;\n  }\n  .col-lg-offset-1 {\n    margin-left: 8.3333333333%;\n  }\n  .col-lg-offset-2 {\n    margin-left: 16.6666666667%;\n  }\n  .col-lg-offset-3 {\n    margin-left: 25%;\n  }\n  .col-lg-offset-4 {\n    margin-left: 33.3333333333%;\n  }\n  .col-lg-offset-5 {\n    margin-left: 41.6666666667%;\n  }\n  .col-lg-offset-6 {\n    margin-left: 50%;\n  }\n  .col-lg-offset-7 {\n    margin-left: 58.3333333333%;\n  }\n  .col-lg-offset-8 {\n    margin-left: 66.6666666667%;\n  }\n  .col-lg-offset-9 {\n    margin-left: 75%;\n  }\n  .col-lg-offset-10 {\n    margin-left: 83.3333333333%;\n  }\n  .col-lg-offset-11 {\n    margin-left: 91.6666666667%;\n  }\n  .col-lg-offset-12 {\n    margin-left: 100%;\n  }\n}\n\ntable {\n  background-color: transparent;\n}\n\ncaption {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  color: #777777;\n  text-align: left;\n}\n\nth {\n  text-align: left;\n}\n\n.table {\n  width: 100%;\n  max-width: 100%;\n  margin-bottom: 20px;\n}\n\n.table > thead > tr > th,\n.table > thead > tr > td,\n.table > tbody > tr > th,\n.table > tbody > tr > td,\n.table > tfoot > tr > th,\n.table > tfoot > tr > td {\n  padding: 8px;\n  line-height: 1.428571429;\n  vertical-align: top;\n  border-top: 1px solid #ddd;\n}\n\n.table > thead > tr > th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #ddd;\n}\n\n.table > caption + thead > tr:first-child > th,\n.table > caption + thead > tr:first-child > td,\n.table > colgroup + thead > tr:first-child > th,\n.table > colgroup + thead > tr:first-child > td,\n.table > thead:first-child > tr:first-child > th,\n.table > thead:first-child > tr:first-child > td {\n  border-top: 0;\n}\n\n.table > tbody + tbody {\n  border-top: 2px solid #ddd;\n}\n\n.table .table {\n  background-color: #fff;\n}\n\n.table-condensed > thead > tr > th,\n.table-condensed > thead > tr > td,\n.table-condensed > tbody > tr > th,\n.table-condensed > tbody > tr > td,\n.table-condensed > tfoot > tr > th,\n.table-condensed > tfoot > tr > td {\n  padding: 5px;\n}\n\n.table-bordered {\n  border: 1px solid #ddd;\n}\n\n.table-bordered > thead > tr > th,\n.table-bordered > thead > tr > td,\n.table-bordered > tbody > tr > th,\n.table-bordered > tbody > tr > td,\n.table-bordered > tfoot > tr > th,\n.table-bordered > tfoot > tr > td {\n  border: 1px solid #ddd;\n}\n\n.table-bordered > thead > tr > th,\n.table-bordered > thead > tr > td {\n  border-bottom-width: 2px;\n}\n\n.table-striped > tbody > tr:nth-of-type(odd) {\n  background-color: #f9f9f9;\n}\n\n.table-hover > tbody > tr:hover {\n  background-color: #f5f5f5;\n}\n\ntable col[class*=\"col-\"] {\n  position: static;\n  float: none;\n  display: table-column;\n}\n\ntable td[class*=\"col-\"],\ntable th[class*=\"col-\"] {\n  position: static;\n  float: none;\n  display: table-cell;\n}\n\n.table > thead > tr > td.active, .table > thead > tr > td.ax-active,\n.table > thead > tr > th.active,\n.table > thead > tr > th.ax-active,\n.table > thead > tr.active > td,\n.table > thead > tr.ax-active > td,\n.table > thead > tr.active > th,\n.table > thead > tr.ax-active > th,\n.table > tbody > tr > td.active,\n.table > tbody > tr > td.ax-active,\n.table > tbody > tr > th.active,\n.table > tbody > tr > th.ax-active,\n.table > tbody > tr.active > td,\n.table > tbody > tr.ax-active > td,\n.table > tbody > tr.active > th,\n.table > tbody > tr.ax-active > th,\n.table > tfoot > tr > td.active,\n.table > tfoot > tr > td.ax-active,\n.table > tfoot > tr > th.active,\n.table > tfoot > tr > th.ax-active,\n.table > tfoot > tr.active > td,\n.table > tfoot > tr.ax-active > td,\n.table > tfoot > tr.active > th,\n.table > tfoot > tr.ax-active > th {\n  background-color: #f5f5f5;\n}\n\n.table-hover > tbody > tr > td.active:hover, .table-hover > tbody > tr > td.ax-active:hover,\n.table-hover > tbody > tr > th.active:hover,\n.table-hover > tbody > tr > th.ax-active:hover,\n.table-hover > tbody > tr.active:hover > td,\n.table-hover > tbody > tr.ax-active:hover > td,\n.table-hover > tbody > tr:hover > .active,\n.table-hover > tbody > tr:hover > .ax-active,\n.table-hover > tbody > tr.active:hover > th,\n.table-hover > tbody > tr.ax-active:hover > th {\n  background-color: #e8e8e8;\n}\n\n.table > thead > tr > td.success,\n.table > thead > tr > th.success,\n.table > thead > tr.success > td,\n.table > thead > tr.success > th,\n.table > tbody > tr > td.success,\n.table > tbody > tr > th.success,\n.table > tbody > tr.success > td,\n.table > tbody > tr.success > th,\n.table > tfoot > tr > td.success,\n.table > tfoot > tr > th.success,\n.table > tfoot > tr.success > td,\n.table > tfoot > tr.success > th {\n  background-color: #dff0d8;\n}\n\n.table-hover > tbody > tr > td.success:hover,\n.table-hover > tbody > tr > th.success:hover,\n.table-hover > tbody > tr.success:hover > td,\n.table-hover > tbody > tr:hover > .success,\n.table-hover > tbody > tr.success:hover > th {\n  background-color: #d0e9c6;\n}\n\n.table > thead > tr > td.info,\n.table > thead > tr > th.info,\n.table > thead > tr.info > td,\n.table > thead > tr.info > th,\n.table > tbody > tr > td.info,\n.table > tbody > tr > th.info,\n.table > tbody > tr.info > td,\n.table > tbody > tr.info > th,\n.table > tfoot > tr > td.info,\n.table > tfoot > tr > th.info,\n.table > tfoot > tr.info > td,\n.table > tfoot > tr.info > th {\n  background-color: #d9edf7;\n}\n\n.table-hover > tbody > tr > td.info:hover,\n.table-hover > tbody > tr > th.info:hover,\n.table-hover > tbody > tr.info:hover > td,\n.table-hover > tbody > tr:hover > .info,\n.table-hover > tbody > tr.info:hover > th {\n  background-color: #c4e3f3;\n}\n\n.table > thead > tr > td.warning,\n.table > thead > tr > th.warning,\n.table > thead > tr.warning > td,\n.table > thead > tr.warning > th,\n.table > tbody > tr > td.warning,\n.table > tbody > tr > th.warning,\n.table > tbody > tr.warning > td,\n.table > tbody > tr.warning > th,\n.table > tfoot > tr > td.warning,\n.table > tfoot > tr > th.warning,\n.table > tfoot > tr.warning > td,\n.table > tfoot > tr.warning > th {\n  background-color: #fcf8e3;\n}\n\n.table-hover > tbody > tr > td.warning:hover,\n.table-hover > tbody > tr > th.warning:hover,\n.table-hover > tbody > tr.warning:hover > td,\n.table-hover > tbody > tr:hover > .warning,\n.table-hover > tbody > tr.warning:hover > th {\n  background-color: #faf2cc;\n}\n\n.table > thead > tr > td.danger,\n.table > thead > tr > th.danger,\n.table > thead > tr.danger > td,\n.table > thead > tr.danger > th,\n.table > tbody > tr > td.danger,\n.table > tbody > tr > th.danger,\n.table > tbody > tr.danger > td,\n.table > tbody > tr.danger > th,\n.table > tfoot > tr > td.danger,\n.table > tfoot > tr > th.danger,\n.table > tfoot > tr.danger > td,\n.table > tfoot > tr.danger > th {\n  background-color: #f2dede;\n}\n\n.table-hover > tbody > tr > td.danger:hover,\n.table-hover > tbody > tr > th.danger:hover,\n.table-hover > tbody > tr.danger:hover > td,\n.table-hover > tbody > tr:hover > .danger,\n.table-hover > tbody > tr.danger:hover > th {\n  background-color: #ebcccc;\n}\n\n.table-responsive {\n  overflow-x: auto;\n  min-height: 0.01%;\n}\n\n@media screen and (max-width: 767px) {\n  .table-responsive {\n    width: 100%;\n    margin-bottom: 15px;\n    overflow-y: hidden;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n    border: 1px solid #ddd;\n  }\n  .table-responsive > .table {\n    margin-bottom: 0;\n  }\n  .table-responsive > .table > thead > tr > th,\n  .table-responsive > .table > thead > tr > td,\n  .table-responsive > .table > tbody > tr > th,\n  .table-responsive > .table > tbody > tr > td,\n  .table-responsive > .table > tfoot > tr > th,\n  .table-responsive > .table > tfoot > tr > td {\n    white-space: nowrap;\n  }\n  .table-responsive > .table-bordered {\n    border: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:first-child,\n  .table-responsive > .table-bordered > thead > tr > td:first-child,\n  .table-responsive > .table-bordered > tbody > tr > th:first-child,\n  .table-responsive > .table-bordered > tbody > tr > td:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n    border-left: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:last-child,\n  .table-responsive > .table-bordered > thead > tr > td:last-child,\n  .table-responsive > .table-bordered > tbody > tr > th:last-child,\n  .table-responsive > .table-bordered > tbody > tr > td:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n    border-right: 0;\n  }\n  .table-responsive > .table-bordered > tbody > tr:last-child > th,\n  .table-responsive > .table-bordered > tbody > tr:last-child > td,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > th,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > td {\n    border-bottom: 0;\n  }\n}\n\nfieldset {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  min-width: 0;\n}\n\nlegend {\n  display: block;\n  width: 100%;\n  padding: 0;\n  margin-bottom: 20px;\n  font-size: 21px;\n  line-height: inherit;\n  color: #333333;\n  border: 0;\n  border-bottom: 1px solid #e5e5e5;\n}\n\nlabel {\n  display: inline-block;\n  max-width: 100%;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\n\ninput[type=\"search\"] {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\ninput[type=\"radio\"],\ninput[type=\"checkbox\"] {\n  margin: 4px 0 0;\n  margin-top: 1px \\9;\n  line-height: normal;\n}\n\ninput[type=\"file\"] {\n  display: block;\n}\n\ninput[type=\"range\"] {\n  display: block;\n  width: 100%;\n}\n\nselect[multiple],\nselect[size] {\n  height: auto;\n}\n\ninput[type=\"file\"]:focus,\ninput[type=\"radio\"]:focus,\ninput[type=\"checkbox\"]:focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n\noutput {\n  display: block;\n  padding-top: 7px;\n  font-size: 14px;\n  line-height: 1.428571429;\n  color: #555555;\n}\n\n.form-control {\n  display: block;\n  width: 100%;\n  height: 34px;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.428571429;\n  color: #555555;\n  background-color: #fff;\n  background-image: none;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  -webkit-transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\n  transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\n}\n\n.form-control:focus {\n  border-color: #66afe9;\n  outline: 0;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n}\n\n.form-control::-moz-placeholder {\n  color: #999;\n  opacity: 1;\n}\n\n.form-control:-ms-input-placeholder {\n  color: #999;\n}\n\n.form-control::-webkit-input-placeholder {\n  color: #999;\n}\n\n.form-control::-ms-expand {\n  border: 0;\n  background-color: transparent;\n}\n\n.form-control[disabled], .form-control[readonly],\nfieldset[disabled] .form-control {\n  background-color: #eeeeee;\n  opacity: 1;\n}\n\n.form-control[disabled],\nfieldset[disabled] .form-control {\n  cursor: not-allowed;\n}\n\ntextarea.form-control {\n  height: auto;\n}\n\ninput[type=\"search\"] {\n  -webkit-appearance: none;\n}\n\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\n  input[type=\"date\"].form-control,\n  input[type=\"time\"].form-control,\n  input[type=\"datetime-local\"].form-control,\n  input[type=\"month\"].form-control {\n    line-height: 34px;\n  }\n  input[type=\"date\"].input-sm, .input-group-sm > input[type=\"date\"].form-control,\n  .input-group-sm > input[type=\"date\"].input-group-addon,\n  .input-group-sm > .input-group-btn > input[type=\"date\"].btn,\n  .input-group-sm input[type=\"date\"],\n  input[type=\"time\"].input-sm,\n  .input-group-sm > input[type=\"time\"].form-control,\n  .input-group-sm > input[type=\"time\"].input-group-addon,\n  .input-group-sm > .input-group-btn > input[type=\"time\"].btn,\n  .input-group-sm\n  input[type=\"time\"],\n  input[type=\"datetime-local\"].input-sm,\n  .input-group-sm > input[type=\"datetime-local\"].form-control,\n  .input-group-sm > input[type=\"datetime-local\"].input-group-addon,\n  .input-group-sm > .input-group-btn > input[type=\"datetime-local\"].btn,\n  .input-group-sm\n  input[type=\"datetime-local\"],\n  input[type=\"month\"].input-sm,\n  .input-group-sm > input[type=\"month\"].form-control,\n  .input-group-sm > input[type=\"month\"].input-group-addon,\n  .input-group-sm > .input-group-btn > input[type=\"month\"].btn,\n  .input-group-sm\n  input[type=\"month\"] {\n    line-height: 30px;\n  }\n  input[type=\"date\"].input-lg, .input-group-lg > input[type=\"date\"].form-control,\n  .input-group-lg > input[type=\"date\"].input-group-addon,\n  .input-group-lg > .input-group-btn > input[type=\"date\"].btn,\n  .input-group-lg input[type=\"date\"],\n  input[type=\"time\"].input-lg,\n  .input-group-lg > input[type=\"time\"].form-control,\n  .input-group-lg > input[type=\"time\"].input-group-addon,\n  .input-group-lg > .input-group-btn > input[type=\"time\"].btn,\n  .input-group-lg\n  input[type=\"time\"],\n  input[type=\"datetime-local\"].input-lg,\n  .input-group-lg > input[type=\"datetime-local\"].form-control,\n  .input-group-lg > input[type=\"datetime-local\"].input-group-addon,\n  .input-group-lg > .input-group-btn > input[type=\"datetime-local\"].btn,\n  .input-group-lg\n  input[type=\"datetime-local\"],\n  input[type=\"month\"].input-lg,\n  .input-group-lg > input[type=\"month\"].form-control,\n  .input-group-lg > input[type=\"month\"].input-group-addon,\n  .input-group-lg > .input-group-btn > input[type=\"month\"].btn,\n  .input-group-lg\n  input[type=\"month\"] {\n    line-height: 46px;\n  }\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\n.radio,\n.checkbox {\n  position: relative;\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.radio label,\n.checkbox label {\n  min-height: 20px;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: normal;\n  cursor: pointer;\n}\n\n.radio input[type=\"radio\"],\n.radio-inline input[type=\"radio\"],\n.checkbox input[type=\"checkbox\"],\n.checkbox-inline input[type=\"checkbox\"] {\n  position: absolute;\n  margin-left: -20px;\n  margin-top: 4px \\9;\n}\n\n.radio + .radio,\n.checkbox + .checkbox {\n  margin-top: -5px;\n}\n\n.radio-inline,\n.checkbox-inline {\n  position: relative;\n  display: inline-block;\n  padding-left: 20px;\n  margin-bottom: 0;\n  vertical-align: middle;\n  font-weight: normal;\n  cursor: pointer;\n}\n\n.radio-inline + .radio-inline,\n.checkbox-inline + .checkbox-inline {\n  margin-top: 0;\n  margin-left: 10px;\n}\n\ninput[type=\"radio\"][disabled], input[type=\"radio\"].disabled, input[type=\"radio\"][disabled],\ninput[type=\"radio\"].ax-disabled,\nfieldset[disabled] input[type=\"radio\"],\ninput[type=\"checkbox\"][disabled],\ninput[type=\"checkbox\"].disabled,\ninput[type=\"checkbox\"][disabled],\ninput[type=\"checkbox\"].ax-disabled,\nfieldset[disabled]\ninput[type=\"checkbox\"] {\n  cursor: not-allowed;\n}\n\n.radio-inline.disabled, .radio-inline[disabled],\n.radio-inline.ax-disabled,\nfieldset[disabled] .radio-inline,\n.checkbox-inline.disabled,\n.checkbox-inline[disabled],\n.checkbox-inline.ax-disabled,\nfieldset[disabled]\n.checkbox-inline {\n  cursor: not-allowed;\n}\n\n.radio.disabled label, .radio[disabled] label,\n.radio.ax-disabled label,\nfieldset[disabled] .radio label,\n.checkbox.disabled label, .checkbox[disabled] label,\n.checkbox.ax-disabled label,\nfieldset[disabled]\n.checkbox label {\n  cursor: not-allowed;\n}\n\n.form-control-static {\n  padding-top: 7px;\n  padding-bottom: 7px;\n  margin-bottom: 0;\n  min-height: 34px;\n}\n\n.form-control-static.input-lg, .input-group-lg > .form-control-static.form-control,\n.input-group-lg > .form-control-static.input-group-addon,\n.input-group-lg > .input-group-btn > .form-control-static.btn, .form-control-static.input-sm, .input-group-sm > .form-control-static.form-control,\n.input-group-sm > .form-control-static.input-group-addon,\n.input-group-sm > .input-group-btn > .form-control-static.btn {\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.input-sm, .input-group-sm > .form-control,\n.input-group-sm > .input-group-addon,\n.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n\nselect.input-sm, .input-group-sm > select.form-control,\n.input-group-sm > select.input-group-addon,\n.input-group-sm > .input-group-btn > select.btn {\n  height: 30px;\n  line-height: 30px;\n}\n\ntextarea.input-sm, .input-group-sm > textarea.form-control,\n.input-group-sm > textarea.input-group-addon,\n.input-group-sm > .input-group-btn > textarea.btn,\nselect[multiple].input-sm,\n.input-group-sm > select[multiple].form-control,\n.input-group-sm > select[multiple].input-group-addon,\n.input-group-sm > .input-group-btn > select[multiple].btn {\n  height: auto;\n}\n\n.form-group-sm .form-control {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n\n.form-group-sm select.form-control {\n  height: 30px;\n  line-height: 30px;\n}\n\n.form-group-sm textarea.form-control,\n.form-group-sm select[multiple].form-control {\n  height: auto;\n}\n\n.form-group-sm .form-control-static {\n  height: 30px;\n  min-height: 32px;\n  padding: 6px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n.input-lg, .input-group-lg > .form-control,\n.input-group-lg > .input-group-addon,\n.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n\nselect.input-lg, .input-group-lg > select.form-control,\n.input-group-lg > select.input-group-addon,\n.input-group-lg > .input-group-btn > select.btn {\n  height: 46px;\n  line-height: 46px;\n}\n\ntextarea.input-lg, .input-group-lg > textarea.form-control,\n.input-group-lg > textarea.input-group-addon,\n.input-group-lg > .input-group-btn > textarea.btn,\nselect[multiple].input-lg,\n.input-group-lg > select[multiple].form-control,\n.input-group-lg > select[multiple].input-group-addon,\n.input-group-lg > .input-group-btn > select[multiple].btn {\n  height: auto;\n}\n\n.form-group-lg .form-control {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n\n.form-group-lg select.form-control {\n  height: 46px;\n  line-height: 46px;\n}\n\n.form-group-lg textarea.form-control,\n.form-group-lg select[multiple].form-control {\n  height: auto;\n}\n\n.form-group-lg .form-control-static {\n  height: 46px;\n  min-height: 38px;\n  padding: 11px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n\n.has-feedback {\n  position: relative;\n}\n\n.has-feedback .form-control {\n  padding-right: 42.5px;\n}\n\n.form-control-feedback {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 2;\n  display: block;\n  width: 34px;\n  height: 34px;\n  line-height: 34px;\n  text-align: center;\n  pointer-events: none;\n}\n\n.input-lg + .form-control-feedback, .input-group-lg > .form-control + .form-control-feedback,\n.input-group-lg > .input-group-addon + .form-control-feedback,\n.input-group-lg > .input-group-btn > .btn + .form-control-feedback,\n.input-group-lg + .form-control-feedback,\n.form-group-lg .form-control + .form-control-feedback {\n  width: 46px;\n  height: 46px;\n  line-height: 46px;\n}\n\n.input-sm + .form-control-feedback, .input-group-sm > .form-control + .form-control-feedback,\n.input-group-sm > .input-group-addon + .form-control-feedback,\n.input-group-sm > .input-group-btn > .btn + .form-control-feedback,\n.input-group-sm + .form-control-feedback,\n.form-group-sm .form-control + .form-control-feedback {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n}\n\n.has-success .help-block,\n.has-success .control-label,\n.has-success .radio,\n.has-success .checkbox,\n.has-success .radio-inline,\n.has-success .checkbox-inline,\n.has-success.radio label,\n.has-success.checkbox label,\n.has-success.radio-inline label,\n.has-success.checkbox-inline label {\n  color: #3c763d;\n}\n\n.has-success .form-control {\n  border-color: #3c763d;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n\n.has-success .form-control:focus {\n  border-color: #2b542c;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #67b168;\n}\n\n.has-success .input-group-addon {\n  color: #3c763d;\n  border-color: #3c763d;\n  background-color: #dff0d8;\n}\n\n.has-success .form-control-feedback {\n  color: #3c763d;\n}\n\n.has-warning .help-block,\n.has-warning .control-label,\n.has-warning .radio,\n.has-warning .checkbox,\n.has-warning .radio-inline,\n.has-warning .checkbox-inline,\n.has-warning.radio label,\n.has-warning.checkbox label,\n.has-warning.radio-inline label,\n.has-warning.checkbox-inline label {\n  color: #8a6d3b;\n}\n\n.has-warning .form-control {\n  border-color: #8a6d3b;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n\n.has-warning .form-control:focus {\n  border-color: #66512c;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #c0a16b;\n}\n\n.has-warning .input-group-addon {\n  color: #8a6d3b;\n  border-color: #8a6d3b;\n  background-color: #fcf8e3;\n}\n\n.has-warning .form-control-feedback {\n  color: #8a6d3b;\n}\n\n.has-error .help-block,\n.has-error .control-label,\n.has-error .radio,\n.has-error .checkbox,\n.has-error .radio-inline,\n.has-error .checkbox-inline,\n.has-error.radio label,\n.has-error.checkbox label,\n.has-error.radio-inline label,\n.has-error.checkbox-inline label {\n  color: #a94442;\n}\n\n.has-error .form-control {\n  border-color: #a94442;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n\n.has-error .form-control:focus {\n  border-color: #843534;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ce8483;\n}\n\n.has-error .input-group-addon {\n  color: #a94442;\n  border-color: #a94442;\n  background-color: #f2dede;\n}\n\n.has-error .form-control-feedback {\n  color: #a94442;\n}\n\n.has-feedback label ~ .form-control-feedback {\n  top: 25px;\n}\n\n.has-feedback label.sr-only ~ .form-control-feedback {\n  top: 0;\n}\n\n.help-block {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  color: #737373;\n}\n\n@media (min-width: 768px) {\n  .form-inline .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-static {\n    display: inline-block;\n  }\n  .form-inline .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .form-inline .input-group .input-group-addon,\n  .form-inline .input-group .input-group-btn,\n  .form-inline .input-group .form-control {\n    width: auto;\n  }\n  .form-inline .input-group > .form-control {\n    width: 100%;\n  }\n  .form-inline .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio,\n  .form-inline .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio label,\n  .form-inline .checkbox label {\n    padding-left: 0;\n  }\n  .form-inline .radio input[type=\"radio\"],\n  .form-inline .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .form-inline .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n\n.form-horizontal .radio,\n.form-horizontal .checkbox,\n.form-horizontal .radio-inline,\n.form-horizontal .checkbox-inline {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-top: 7px;\n}\n\n.form-horizontal .radio,\n.form-horizontal .checkbox {\n  min-height: 27px;\n}\n\n.form-horizontal .form-group {\n  margin-left: -15px;\n  margin-right: -15px;\n}\n\n.form-horizontal .form-group:before, .form-horizontal .form-group:after {\n  content: \" \";\n  display: table;\n}\n\n.form-horizontal .form-group:after {\n  clear: both;\n}\n\n@media (min-width: 768px) {\n  .form-horizontal .control-label {\n    text-align: right;\n    margin-bottom: 0;\n    padding-top: 7px;\n  }\n}\n\n.form-horizontal .has-feedback .form-control-feedback {\n  right: 15px;\n}\n\n@media (min-width: 768px) {\n  .form-horizontal .form-group-lg .control-label {\n    padding-top: 11px;\n    font-size: 18px;\n  }\n}\n\n@media (min-width: 768px) {\n  .form-horizontal .form-group-sm .control-label {\n    padding-top: 6px;\n    font-size: 12px;\n  }\n}\n\n.btn {\n  display: inline-block;\n  margin-bottom: 0;\n  font-weight: normal;\n  text-align: center;\n  vertical-align: middle;\n  -ms-touch-action: manipulation;\n      touch-action: manipulation;\n  cursor: pointer;\n  background-image: none;\n  border: 1px solid transparent;\n  white-space: nowrap;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.428571429;\n  border-radius: 4px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.btn:focus, .btn.focus, .btn:active:focus, .btn:active.focus, .btn.active:focus, .btn.ax-active:focus, .btn.active.focus, .btn.focus.ax-active {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n\n.btn:hover, .btn:focus, .btn.focus {\n  color: #333;\n  text-decoration: none;\n}\n\n.btn:active, .btn.active, .btn.ax-active {\n  outline: 0;\n  background-image: none;\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n}\n\n.btn.disabled, .btn[disabled],\n.btn.ax-disabled, .btn[disabled],\nfieldset[disabled] .btn {\n  cursor: not-allowed;\n  opacity: 0.65;\n  filter: alpha(opacity=65);\n  box-shadow: none;\n}\n\na.btn.disabled, a.btn[disabled],\na.btn.ax-disabled,\nfieldset[disabled] a.btn {\n  pointer-events: none;\n}\n\n.btn-default {\n  color: #333;\n  background-color: #fff;\n  border-color: #ccc;\n}\n\n.btn-default:focus, .btn-default.focus {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #8c8c8c;\n}\n\n.btn-default:hover {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n\n.btn-default:active, .btn-default.active, .btn-default.ax-active,\n.open > .btn-default.dropdown-toggle {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n\n.btn-default:active:hover, .btn-default:active:focus, .btn-default:active.focus, .btn-default.active:hover, .btn-default.ax-active:hover, .btn-default.active:focus, .btn-default.ax-active:focus, .btn-default.active.focus, .btn-default.focus.ax-active,\n.open > .btn-default.dropdown-toggle:hover,\n.open > .btn-default.dropdown-toggle:focus,\n.open > .btn-default.dropdown-toggle.focus {\n  color: #333;\n  background-color: #d4d4d4;\n  border-color: #8c8c8c;\n}\n\n.btn-default:active, .btn-default.active, .btn-default.ax-active,\n.open > .btn-default.dropdown-toggle {\n  background-image: none;\n}\n\n.btn-default.disabled:hover, .btn-default[disabled]:hover,\n.btn-default.ax-disabled:hover, .btn-default.disabled:focus, .btn-default[disabled]:focus,\n.btn-default.ax-disabled:focus, .btn-default.disabled.focus, .btn-default.focus[disabled],\n.btn-default.focus.ax-disabled, .btn-default[disabled]:hover, .btn-default[disabled]:focus, .btn-default[disabled].focus,\nfieldset[disabled] .btn-default:hover,\nfieldset[disabled] .btn-default:focus,\nfieldset[disabled] .btn-default.focus {\n  background-color: #fff;\n  border-color: #ccc;\n}\n\n.btn-default .badge {\n  color: #fff;\n  background-color: #333;\n}\n\n.btn-primary {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n\n.btn-primary:focus, .btn-primary.focus {\n  color: #fff;\n  background-color: #286090;\n  border-color: #122b40;\n}\n\n.btn-primary:hover {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n\n.btn-primary:active, .btn-primary.active, .btn-primary.ax-active,\n.open > .btn-primary.dropdown-toggle {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n\n.btn-primary:active:hover, .btn-primary:active:focus, .btn-primary:active.focus, .btn-primary.active:hover, .btn-primary.ax-active:hover, .btn-primary.active:focus, .btn-primary.ax-active:focus, .btn-primary.active.focus, .btn-primary.focus.ax-active,\n.open > .btn-primary.dropdown-toggle:hover,\n.open > .btn-primary.dropdown-toggle:focus,\n.open > .btn-primary.dropdown-toggle.focus {\n  color: #fff;\n  background-color: #204d74;\n  border-color: #122b40;\n}\n\n.btn-primary:active, .btn-primary.active, .btn-primary.ax-active,\n.open > .btn-primary.dropdown-toggle {\n  background-image: none;\n}\n\n.btn-primary.disabled:hover, .btn-primary[disabled]:hover,\n.btn-primary.ax-disabled:hover, .btn-primary.disabled:focus, .btn-primary[disabled]:focus,\n.btn-primary.ax-disabled:focus, .btn-primary.disabled.focus, .btn-primary.focus[disabled],\n.btn-primary.focus.ax-disabled, .btn-primary[disabled]:hover, .btn-primary[disabled]:focus, .btn-primary[disabled].focus,\nfieldset[disabled] .btn-primary:hover,\nfieldset[disabled] .btn-primary:focus,\nfieldset[disabled] .btn-primary.focus {\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n\n.btn-primary .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n\n.btn-success {\n  color: #fff;\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n\n.btn-success:focus, .btn-success.focus {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #255625;\n}\n\n.btn-success:hover {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n\n.btn-success:active, .btn-success.active, .btn-success.ax-active,\n.open > .btn-success.dropdown-toggle {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n\n.btn-success:active:hover, .btn-success:active:focus, .btn-success:active.focus, .btn-success.active:hover, .btn-success.ax-active:hover, .btn-success.active:focus, .btn-success.ax-active:focus, .btn-success.active.focus, .btn-success.focus.ax-active,\n.open > .btn-success.dropdown-toggle:hover,\n.open > .btn-success.dropdown-toggle:focus,\n.open > .btn-success.dropdown-toggle.focus {\n  color: #fff;\n  background-color: #398439;\n  border-color: #255625;\n}\n\n.btn-success:active, .btn-success.active, .btn-success.ax-active,\n.open > .btn-success.dropdown-toggle {\n  background-image: none;\n}\n\n.btn-success.disabled:hover, .btn-success[disabled]:hover,\n.btn-success.ax-disabled:hover, .btn-success.disabled:focus, .btn-success[disabled]:focus,\n.btn-success.ax-disabled:focus, .btn-success.disabled.focus, .btn-success.focus[disabled],\n.btn-success.focus.ax-disabled, .btn-success[disabled]:hover, .btn-success[disabled]:focus, .btn-success[disabled].focus,\nfieldset[disabled] .btn-success:hover,\nfieldset[disabled] .btn-success:focus,\nfieldset[disabled] .btn-success.focus {\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n\n.btn-success .badge {\n  color: #5cb85c;\n  background-color: #fff;\n}\n\n.btn-info {\n  color: #fff;\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n\n.btn-info:focus, .btn-info.focus {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #1b6d85;\n}\n\n.btn-info:hover {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n\n.btn-info:active, .btn-info.active, .btn-info.ax-active,\n.open > .btn-info.dropdown-toggle {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n\n.btn-info:active:hover, .btn-info:active:focus, .btn-info:active.focus, .btn-info.active:hover, .btn-info.ax-active:hover, .btn-info.active:focus, .btn-info.ax-active:focus, .btn-info.active.focus, .btn-info.focus.ax-active,\n.open > .btn-info.dropdown-toggle:hover,\n.open > .btn-info.dropdown-toggle:focus,\n.open > .btn-info.dropdown-toggle.focus {\n  color: #fff;\n  background-color: #269abc;\n  border-color: #1b6d85;\n}\n\n.btn-info:active, .btn-info.active, .btn-info.ax-active,\n.open > .btn-info.dropdown-toggle {\n  background-image: none;\n}\n\n.btn-info.disabled:hover, .btn-info[disabled]:hover,\n.btn-info.ax-disabled:hover, .btn-info.disabled:focus, .btn-info[disabled]:focus,\n.btn-info.ax-disabled:focus, .btn-info.disabled.focus, .btn-info.focus[disabled],\n.btn-info.focus.ax-disabled, .btn-info[disabled]:hover, .btn-info[disabled]:focus, .btn-info[disabled].focus,\nfieldset[disabled] .btn-info:hover,\nfieldset[disabled] .btn-info:focus,\nfieldset[disabled] .btn-info.focus {\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n\n.btn-info .badge {\n  color: #5bc0de;\n  background-color: #fff;\n}\n\n.btn-warning {\n  color: #fff;\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n\n.btn-warning:focus, .btn-warning.focus {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #985f0d;\n}\n\n.btn-warning:hover {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n\n.btn-warning:active, .btn-warning.active, .btn-warning.ax-active,\n.open > .btn-warning.dropdown-toggle {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n\n.btn-warning:active:hover, .btn-warning:active:focus, .btn-warning:active.focus, .btn-warning.active:hover, .btn-warning.ax-active:hover, .btn-warning.active:focus, .btn-warning.ax-active:focus, .btn-warning.active.focus, .btn-warning.focus.ax-active,\n.open > .btn-warning.dropdown-toggle:hover,\n.open > .btn-warning.dropdown-toggle:focus,\n.open > .btn-warning.dropdown-toggle.focus {\n  color: #fff;\n  background-color: #d58512;\n  border-color: #985f0d;\n}\n\n.btn-warning:active, .btn-warning.active, .btn-warning.ax-active,\n.open > .btn-warning.dropdown-toggle {\n  background-image: none;\n}\n\n.btn-warning.disabled:hover, .btn-warning[disabled]:hover,\n.btn-warning.ax-disabled:hover, .btn-warning.disabled:focus, .btn-warning[disabled]:focus,\n.btn-warning.ax-disabled:focus, .btn-warning.disabled.focus, .btn-warning.focus[disabled],\n.btn-warning.focus.ax-disabled, .btn-warning[disabled]:hover, .btn-warning[disabled]:focus, .btn-warning[disabled].focus,\nfieldset[disabled] .btn-warning:hover,\nfieldset[disabled] .btn-warning:focus,\nfieldset[disabled] .btn-warning.focus {\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n\n.btn-warning .badge {\n  color: #f0ad4e;\n  background-color: #fff;\n}\n\n.btn-danger {\n  color: #fff;\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n\n.btn-danger:focus, .btn-danger.focus {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #761c19;\n}\n\n.btn-danger:hover {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n\n.btn-danger:active, .btn-danger.active, .btn-danger.ax-active,\n.open > .btn-danger.dropdown-toggle {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n\n.btn-danger:active:hover, .btn-danger:active:focus, .btn-danger:active.focus, .btn-danger.active:hover, .btn-danger.ax-active:hover, .btn-danger.active:focus, .btn-danger.ax-active:focus, .btn-danger.active.focus, .btn-danger.focus.ax-active,\n.open > .btn-danger.dropdown-toggle:hover,\n.open > .btn-danger.dropdown-toggle:focus,\n.open > .btn-danger.dropdown-toggle.focus {\n  color: #fff;\n  background-color: #ac2925;\n  border-color: #761c19;\n}\n\n.btn-danger:active, .btn-danger.active, .btn-danger.ax-active,\n.open > .btn-danger.dropdown-toggle {\n  background-image: none;\n}\n\n.btn-danger.disabled:hover, .btn-danger[disabled]:hover,\n.btn-danger.ax-disabled:hover, .btn-danger.disabled:focus, .btn-danger[disabled]:focus,\n.btn-danger.ax-disabled:focus, .btn-danger.disabled.focus, .btn-danger.focus[disabled],\n.btn-danger.focus.ax-disabled, .btn-danger[disabled]:hover, .btn-danger[disabled]:focus, .btn-danger[disabled].focus,\nfieldset[disabled] .btn-danger:hover,\nfieldset[disabled] .btn-danger:focus,\nfieldset[disabled] .btn-danger.focus {\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n\n.btn-danger .badge {\n  color: #d9534f;\n  background-color: #fff;\n}\n\n.btn-link {\n  color: #337ab7;\n  font-weight: normal;\n  border-radius: 0;\n}\n\n.btn-link, .btn-link:active, .btn-link.active, .btn-link.ax-active, .btn-link[disabled],\nfieldset[disabled] .btn-link {\n  background-color: transparent;\n  box-shadow: none;\n}\n\n.btn-link, .btn-link:hover, .btn-link:focus, .btn-link:active {\n  border-color: transparent;\n}\n\n.btn-link:hover, .btn-link:focus {\n  color: #23527c;\n  text-decoration: underline;\n  background-color: transparent;\n}\n\n.btn-link[disabled]:hover, .btn-link[disabled]:focus,\nfieldset[disabled] .btn-link:hover,\nfieldset[disabled] .btn-link:focus {\n  color: #777777;\n  text-decoration: none;\n}\n\n.btn-lg, .btn-group-lg > .btn {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n\n.btn-sm, .btn-group-sm > .btn {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n\n.btn-xs, .btn-group-xs > .btn {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n\n.btn-block {\n  display: block;\n  width: 100%;\n}\n\n.btn-block + .btn-block {\n  margin-top: 5px;\n}\n\ninput[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}\n\n.fade {\n  opacity: 0;\n  -webkit-transition: opacity 0.15s linear;\n  transition: opacity 0.15s linear;\n}\n\n.fade.in {\n  opacity: 1;\n}\n\n.collapse {\n  display: none;\n}\n\n.collapse.in {\n  display: block;\n}\n\ntr.collapse.in {\n  display: table-row;\n}\n\ntbody.collapse.in {\n  display: table-row-group;\n}\n\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  -webkit-transition-property: height, visibility;\n  transition-property: height, visibility;\n  -webkit-transition-duration: 0.35s;\n  transition-duration: 0.35s;\n  -webkit-transition-timing-function: ease;\n  transition-timing-function: ease;\n}\n\n@font-face {\n  font-family: 'Glyphicons Halflings';\n  src: url(" + __webpack_require__(63) + ");\n  src: url(" + __webpack_require__(63) + "?#iefix) format(\"embedded-opentype\"), url(" + __webpack_require__(101) + ") format(\"woff2\"), url(" + __webpack_require__(100) + ") format(\"woff\"), url(" + __webpack_require__(99) + ") format(\"truetype\"), url(" + __webpack_require__(107) + "#glyphicons_halflingsregular) format(\"svg\");\n}\n\n.glyphicon {\n  position: relative;\n  top: 1px;\n  display: inline-block;\n  font-family: 'Glyphicons Halflings';\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.glyphicon-asterisk:before {\n  content: \"*\";\n}\n\n.glyphicon-plus:before {\n  content: \"+\";\n}\n\n.glyphicon-euro:before,\n.glyphicon-eur:before {\n  content: \"\\20AC\";\n}\n\n.glyphicon-minus:before {\n  content: \"\\2212\";\n}\n\n.glyphicon-cloud:before {\n  content: \"\\2601\";\n}\n\n.glyphicon-envelope:before {\n  content: \"\\2709\";\n}\n\n.glyphicon-pencil:before {\n  content: \"\\270F\";\n}\n\n.glyphicon-glass:before {\n  content: \"\\E001\";\n}\n\n.glyphicon-music:before {\n  content: \"\\E002\";\n}\n\n.glyphicon-search:before {\n  content: \"\\E003\";\n}\n\n.glyphicon-heart:before {\n  content: \"\\E005\";\n}\n\n.glyphicon-star:before {\n  content: \"\\E006\";\n}\n\n.glyphicon-star-empty:before {\n  content: \"\\E007\";\n}\n\n.glyphicon-user:before {\n  content: \"\\E008\";\n}\n\n.glyphicon-film:before {\n  content: \"\\E009\";\n}\n\n.glyphicon-th-large:before {\n  content: \"\\E010\";\n}\n\n.glyphicon-th:before {\n  content: \"\\E011\";\n}\n\n.glyphicon-th-list:before {\n  content: \"\\E012\";\n}\n\n.glyphicon-ok:before {\n  content: \"\\E013\";\n}\n\n.glyphicon-remove:before {\n  content: \"\\E014\";\n}\n\n.glyphicon-zoom-in:before {\n  content: \"\\E015\";\n}\n\n.glyphicon-zoom-out:before {\n  content: \"\\E016\";\n}\n\n.glyphicon-off:before {\n  content: \"\\E017\";\n}\n\n.glyphicon-signal:before {\n  content: \"\\E018\";\n}\n\n.glyphicon-cog:before {\n  content: \"\\E019\";\n}\n\n.glyphicon-trash:before {\n  content: \"\\E020\";\n}\n\n.glyphicon-home:before {\n  content: \"\\E021\";\n}\n\n.glyphicon-file:before {\n  content: \"\\E022\";\n}\n\n.glyphicon-time:before {\n  content: \"\\E023\";\n}\n\n.glyphicon-road:before {\n  content: \"\\E024\";\n}\n\n.glyphicon-download-alt:before {\n  content: \"\\E025\";\n}\n\n.glyphicon-download:before {\n  content: \"\\E026\";\n}\n\n.glyphicon-upload:before {\n  content: \"\\E027\";\n}\n\n.glyphicon-inbox:before {\n  content: \"\\E028\";\n}\n\n.glyphicon-play-circle:before {\n  content: \"\\E029\";\n}\n\n.glyphicon-repeat:before {\n  content: \"\\E030\";\n}\n\n.glyphicon-refresh:before {\n  content: \"\\E031\";\n}\n\n.glyphicon-list-alt:before {\n  content: \"\\E032\";\n}\n\n.glyphicon-lock:before {\n  content: \"\\E033\";\n}\n\n.glyphicon-flag:before {\n  content: \"\\E034\";\n}\n\n.glyphicon-headphones:before {\n  content: \"\\E035\";\n}\n\n.glyphicon-volume-off:before {\n  content: \"\\E036\";\n}\n\n.glyphicon-volume-down:before {\n  content: \"\\E037\";\n}\n\n.glyphicon-volume-up:before {\n  content: \"\\E038\";\n}\n\n.glyphicon-qrcode:before {\n  content: \"\\E039\";\n}\n\n.glyphicon-barcode:before {\n  content: \"\\E040\";\n}\n\n.glyphicon-tag:before {\n  content: \"\\E041\";\n}\n\n.glyphicon-tags:before {\n  content: \"\\E042\";\n}\n\n.glyphicon-book:before {\n  content: \"\\E043\";\n}\n\n.glyphicon-bookmark:before {\n  content: \"\\E044\";\n}\n\n.glyphicon-print:before {\n  content: \"\\E045\";\n}\n\n.glyphicon-camera:before {\n  content: \"\\E046\";\n}\n\n.glyphicon-font:before {\n  content: \"\\E047\";\n}\n\n.glyphicon-bold:before {\n  content: \"\\E048\";\n}\n\n.glyphicon-italic:before {\n  content: \"\\E049\";\n}\n\n.glyphicon-text-height:before {\n  content: \"\\E050\";\n}\n\n.glyphicon-text-width:before {\n  content: \"\\E051\";\n}\n\n.glyphicon-align-left:before {\n  content: \"\\E052\";\n}\n\n.glyphicon-align-center:before {\n  content: \"\\E053\";\n}\n\n.glyphicon-align-right:before {\n  content: \"\\E054\";\n}\n\n.glyphicon-align-justify:before {\n  content: \"\\E055\";\n}\n\n.glyphicon-list:before {\n  content: \"\\E056\";\n}\n\n.glyphicon-indent-left:before {\n  content: \"\\E057\";\n}\n\n.glyphicon-indent-right:before {\n  content: \"\\E058\";\n}\n\n.glyphicon-facetime-video:before {\n  content: \"\\E059\";\n}\n\n.glyphicon-picture:before {\n  content: \"\\E060\";\n}\n\n.glyphicon-map-marker:before {\n  content: \"\\E062\";\n}\n\n.glyphicon-adjust:before {\n  content: \"\\E063\";\n}\n\n.glyphicon-tint:before {\n  content: \"\\E064\";\n}\n\n.glyphicon-edit:before {\n  content: \"\\E065\";\n}\n\n.glyphicon-share:before {\n  content: \"\\E066\";\n}\n\n.glyphicon-check:before {\n  content: \"\\E067\";\n}\n\n.glyphicon-move:before {\n  content: \"\\E068\";\n}\n\n.glyphicon-step-backward:before {\n  content: \"\\E069\";\n}\n\n.glyphicon-fast-backward:before {\n  content: \"\\E070\";\n}\n\n.glyphicon-backward:before {\n  content: \"\\E071\";\n}\n\n.glyphicon-play:before {\n  content: \"\\E072\";\n}\n\n.glyphicon-pause:before {\n  content: \"\\E073\";\n}\n\n.glyphicon-stop:before {\n  content: \"\\E074\";\n}\n\n.glyphicon-forward:before {\n  content: \"\\E075\";\n}\n\n.glyphicon-fast-forward:before {\n  content: \"\\E076\";\n}\n\n.glyphicon-step-forward:before {\n  content: \"\\E077\";\n}\n\n.glyphicon-eject:before {\n  content: \"\\E078\";\n}\n\n.glyphicon-chevron-left:before {\n  content: \"\\E079\";\n}\n\n.glyphicon-chevron-right:before {\n  content: \"\\E080\";\n}\n\n.glyphicon-plus-sign:before {\n  content: \"\\E081\";\n}\n\n.glyphicon-minus-sign:before {\n  content: \"\\E082\";\n}\n\n.glyphicon-remove-sign:before {\n  content: \"\\E083\";\n}\n\n.glyphicon-ok-sign:before {\n  content: \"\\E084\";\n}\n\n.glyphicon-question-sign:before {\n  content: \"\\E085\";\n}\n\n.glyphicon-info-sign:before {\n  content: \"\\E086\";\n}\n\n.glyphicon-screenshot:before {\n  content: \"\\E087\";\n}\n\n.glyphicon-remove-circle:before {\n  content: \"\\E088\";\n}\n\n.glyphicon-ok-circle:before {\n  content: \"\\E089\";\n}\n\n.glyphicon-ban-circle:before {\n  content: \"\\E090\";\n}\n\n.glyphicon-arrow-left:before {\n  content: \"\\E091\";\n}\n\n.glyphicon-arrow-right:before {\n  content: \"\\E092\";\n}\n\n.glyphicon-arrow-up:before {\n  content: \"\\E093\";\n}\n\n.glyphicon-arrow-down:before {\n  content: \"\\E094\";\n}\n\n.glyphicon-share-alt:before {\n  content: \"\\E095\";\n}\n\n.glyphicon-resize-full:before {\n  content: \"\\E096\";\n}\n\n.glyphicon-resize-small:before {\n  content: \"\\E097\";\n}\n\n.glyphicon-exclamation-sign:before {\n  content: \"\\E101\";\n}\n\n.glyphicon-gift:before {\n  content: \"\\E102\";\n}\n\n.glyphicon-leaf:before {\n  content: \"\\E103\";\n}\n\n.glyphicon-fire:before {\n  content: \"\\E104\";\n}\n\n.glyphicon-eye-open:before {\n  content: \"\\E105\";\n}\n\n.glyphicon-eye-close:before {\n  content: \"\\E106\";\n}\n\n.glyphicon-warning-sign:before {\n  content: \"\\E107\";\n}\n\n.glyphicon-plane:before {\n  content: \"\\E108\";\n}\n\n.glyphicon-calendar:before {\n  content: \"\\E109\";\n}\n\n.glyphicon-random:before {\n  content: \"\\E110\";\n}\n\n.glyphicon-comment:before {\n  content: \"\\E111\";\n}\n\n.glyphicon-magnet:before {\n  content: \"\\E112\";\n}\n\n.glyphicon-chevron-up:before {\n  content: \"\\E113\";\n}\n\n.glyphicon-chevron-down:before {\n  content: \"\\E114\";\n}\n\n.glyphicon-retweet:before {\n  content: \"\\E115\";\n}\n\n.glyphicon-shopping-cart:before {\n  content: \"\\E116\";\n}\n\n.glyphicon-folder-close:before {\n  content: \"\\E117\";\n}\n\n.glyphicon-folder-open:before {\n  content: \"\\E118\";\n}\n\n.glyphicon-resize-vertical:before {\n  content: \"\\E119\";\n}\n\n.glyphicon-resize-horizontal:before {\n  content: \"\\E120\";\n}\n\n.glyphicon-hdd:before {\n  content: \"\\E121\";\n}\n\n.glyphicon-bullhorn:before {\n  content: \"\\E122\";\n}\n\n.glyphicon-bell:before {\n  content: \"\\E123\";\n}\n\n.glyphicon-certificate:before {\n  content: \"\\E124\";\n}\n\n.glyphicon-thumbs-up:before {\n  content: \"\\E125\";\n}\n\n.glyphicon-thumbs-down:before {\n  content: \"\\E126\";\n}\n\n.glyphicon-hand-right:before {\n  content: \"\\E127\";\n}\n\n.glyphicon-hand-left:before {\n  content: \"\\E128\";\n}\n\n.glyphicon-hand-up:before {\n  content: \"\\E129\";\n}\n\n.glyphicon-hand-down:before {\n  content: \"\\E130\";\n}\n\n.glyphicon-circle-arrow-right:before {\n  content: \"\\E131\";\n}\n\n.glyphicon-circle-arrow-left:before {\n  content: \"\\E132\";\n}\n\n.glyphicon-circle-arrow-up:before {\n  content: \"\\E133\";\n}\n\n.glyphicon-circle-arrow-down:before {\n  content: \"\\E134\";\n}\n\n.glyphicon-globe:before {\n  content: \"\\E135\";\n}\n\n.glyphicon-wrench:before {\n  content: \"\\E136\";\n}\n\n.glyphicon-tasks:before {\n  content: \"\\E137\";\n}\n\n.glyphicon-filter:before {\n  content: \"\\E138\";\n}\n\n.glyphicon-briefcase:before {\n  content: \"\\E139\";\n}\n\n.glyphicon-fullscreen:before {\n  content: \"\\E140\";\n}\n\n.glyphicon-dashboard:before {\n  content: \"\\E141\";\n}\n\n.glyphicon-paperclip:before {\n  content: \"\\E142\";\n}\n\n.glyphicon-heart-empty:before {\n  content: \"\\E143\";\n}\n\n.glyphicon-link:before {\n  content: \"\\E144\";\n}\n\n.glyphicon-phone:before {\n  content: \"\\E145\";\n}\n\n.glyphicon-pushpin:before {\n  content: \"\\E146\";\n}\n\n.glyphicon-usd:before {\n  content: \"\\E148\";\n}\n\n.glyphicon-gbp:before {\n  content: \"\\E149\";\n}\n\n.glyphicon-sort:before {\n  content: \"\\E150\";\n}\n\n.glyphicon-sort-by-alphabet:before {\n  content: \"\\E151\";\n}\n\n.glyphicon-sort-by-alphabet-alt:before {\n  content: \"\\E152\";\n}\n\n.glyphicon-sort-by-order:before {\n  content: \"\\E153\";\n}\n\n.glyphicon-sort-by-order-alt:before {\n  content: \"\\E154\";\n}\n\n.glyphicon-sort-by-attributes:before {\n  content: \"\\E155\";\n}\n\n.glyphicon-sort-by-attributes-alt:before {\n  content: \"\\E156\";\n}\n\n.glyphicon-unchecked:before {\n  content: \"\\E157\";\n}\n\n.glyphicon-expand:before {\n  content: \"\\E158\";\n}\n\n.glyphicon-collapse-down:before {\n  content: \"\\E159\";\n}\n\n.glyphicon-collapse-up:before {\n  content: \"\\E160\";\n}\n\n.glyphicon-log-in:before {\n  content: \"\\E161\";\n}\n\n.glyphicon-flash:before {\n  content: \"\\E162\";\n}\n\n.glyphicon-log-out:before {\n  content: \"\\E163\";\n}\n\n.glyphicon-new-window:before {\n  content: \"\\E164\";\n}\n\n.glyphicon-record:before {\n  content: \"\\E165\";\n}\n\n.glyphicon-save:before {\n  content: \"\\E166\";\n}\n\n.glyphicon-open:before {\n  content: \"\\E167\";\n}\n\n.glyphicon-saved:before {\n  content: \"\\E168\";\n}\n\n.glyphicon-import:before {\n  content: \"\\E169\";\n}\n\n.glyphicon-export:before {\n  content: \"\\E170\";\n}\n\n.glyphicon-send:before {\n  content: \"\\E171\";\n}\n\n.glyphicon-floppy-disk:before {\n  content: \"\\E172\";\n}\n\n.glyphicon-floppy-saved:before {\n  content: \"\\E173\";\n}\n\n.glyphicon-floppy-remove:before {\n  content: \"\\E174\";\n}\n\n.glyphicon-floppy-save:before {\n  content: \"\\E175\";\n}\n\n.glyphicon-floppy-open:before {\n  content: \"\\E176\";\n}\n\n.glyphicon-credit-card:before {\n  content: \"\\E177\";\n}\n\n.glyphicon-transfer:before {\n  content: \"\\E178\";\n}\n\n.glyphicon-cutlery:before {\n  content: \"\\E179\";\n}\n\n.glyphicon-header:before {\n  content: \"\\E180\";\n}\n\n.glyphicon-compressed:before {\n  content: \"\\E181\";\n}\n\n.glyphicon-earphone:before {\n  content: \"\\E182\";\n}\n\n.glyphicon-phone-alt:before {\n  content: \"\\E183\";\n}\n\n.glyphicon-tower:before {\n  content: \"\\E184\";\n}\n\n.glyphicon-stats:before {\n  content: \"\\E185\";\n}\n\n.glyphicon-sd-video:before {\n  content: \"\\E186\";\n}\n\n.glyphicon-hd-video:before {\n  content: \"\\E187\";\n}\n\n.glyphicon-subtitles:before {\n  content: \"\\E188\";\n}\n\n.glyphicon-sound-stereo:before {\n  content: \"\\E189\";\n}\n\n.glyphicon-sound-dolby:before {\n  content: \"\\E190\";\n}\n\n.glyphicon-sound-5-1:before {\n  content: \"\\E191\";\n}\n\n.glyphicon-sound-6-1:before {\n  content: \"\\E192\";\n}\n\n.glyphicon-sound-7-1:before {\n  content: \"\\E193\";\n}\n\n.glyphicon-copyright-mark:before {\n  content: \"\\E194\";\n}\n\n.glyphicon-registration-mark:before {\n  content: \"\\E195\";\n}\n\n.glyphicon-cloud-download:before {\n  content: \"\\E197\";\n}\n\n.glyphicon-cloud-upload:before {\n  content: \"\\E198\";\n}\n\n.glyphicon-tree-conifer:before {\n  content: \"\\E199\";\n}\n\n.glyphicon-tree-deciduous:before {\n  content: \"\\E200\";\n}\n\n.glyphicon-cd:before {\n  content: \"\\E201\";\n}\n\n.glyphicon-save-file:before {\n  content: \"\\E202\";\n}\n\n.glyphicon-open-file:before {\n  content: \"\\E203\";\n}\n\n.glyphicon-level-up:before {\n  content: \"\\E204\";\n}\n\n.glyphicon-copy:before {\n  content: \"\\E205\";\n}\n\n.glyphicon-paste:before {\n  content: \"\\E206\";\n}\n\n.glyphicon-alert:before {\n  content: \"\\E209\";\n}\n\n.glyphicon-equalizer:before {\n  content: \"\\E210\";\n}\n\n.glyphicon-king:before {\n  content: \"\\E211\";\n}\n\n.glyphicon-queen:before {\n  content: \"\\E212\";\n}\n\n.glyphicon-pawn:before {\n  content: \"\\E213\";\n}\n\n.glyphicon-bishop:before {\n  content: \"\\E214\";\n}\n\n.glyphicon-knight:before {\n  content: \"\\E215\";\n}\n\n.glyphicon-baby-formula:before {\n  content: \"\\E216\";\n}\n\n.glyphicon-tent:before {\n  content: \"\\26FA\";\n}\n\n.glyphicon-blackboard:before {\n  content: \"\\E218\";\n}\n\n.glyphicon-bed:before {\n  content: \"\\E219\";\n}\n\n.glyphicon-apple:before {\n  content: \"\\F8FF\";\n}\n\n.glyphicon-erase:before {\n  content: \"\\E221\";\n}\n\n.glyphicon-hourglass:before {\n  content: \"\\231B\";\n}\n\n.glyphicon-lamp:before {\n  content: \"\\E223\";\n}\n\n.glyphicon-duplicate:before {\n  content: \"\\E224\";\n}\n\n.glyphicon-piggy-bank:before {\n  content: \"\\E225\";\n}\n\n.glyphicon-scissors:before {\n  content: \"\\E226\";\n}\n\n.glyphicon-bitcoin:before {\n  content: \"\\E227\";\n}\n\n.glyphicon-btc:before {\n  content: \"\\E227\";\n}\n\n.glyphicon-xbt:before {\n  content: \"\\E227\";\n}\n\n.glyphicon-yen:before {\n  content: \"\\A5\";\n}\n\n.glyphicon-jpy:before {\n  content: \"\\A5\";\n}\n\n.glyphicon-ruble:before {\n  content: \"\\20BD\";\n}\n\n.glyphicon-rub:before {\n  content: \"\\20BD\";\n}\n\n.glyphicon-scale:before {\n  content: \"\\E230\";\n}\n\n.glyphicon-ice-lolly:before {\n  content: \"\\E231\";\n}\n\n.glyphicon-ice-lolly-tasted:before {\n  content: \"\\E232\";\n}\n\n.glyphicon-education:before {\n  content: \"\\E233\";\n}\n\n.glyphicon-option-horizontal:before {\n  content: \"\\E234\";\n}\n\n.glyphicon-option-vertical:before {\n  content: \"\\E235\";\n}\n\n.glyphicon-menu-hamburger:before {\n  content: \"\\E236\";\n}\n\n.glyphicon-modal-window:before {\n  content: \"\\E237\";\n}\n\n.glyphicon-oil:before {\n  content: \"\\E238\";\n}\n\n.glyphicon-grain:before {\n  content: \"\\E239\";\n}\n\n.glyphicon-sunglasses:before {\n  content: \"\\E240\";\n}\n\n.glyphicon-text-size:before {\n  content: \"\\E241\";\n}\n\n.glyphicon-text-color:before {\n  content: \"\\E242\";\n}\n\n.glyphicon-text-background:before {\n  content: \"\\E243\";\n}\n\n.glyphicon-object-align-top:before {\n  content: \"\\E244\";\n}\n\n.glyphicon-object-align-bottom:before {\n  content: \"\\E245\";\n}\n\n.glyphicon-object-align-horizontal:before {\n  content: \"\\E246\";\n}\n\n.glyphicon-object-align-left:before {\n  content: \"\\E247\";\n}\n\n.glyphicon-object-align-vertical:before {\n  content: \"\\E248\";\n}\n\n.glyphicon-object-align-right:before {\n  content: \"\\E249\";\n}\n\n.glyphicon-triangle-right:before {\n  content: \"\\E250\";\n}\n\n.glyphicon-triangle-left:before {\n  content: \"\\E251\";\n}\n\n.glyphicon-triangle-bottom:before {\n  content: \"\\E252\";\n}\n\n.glyphicon-triangle-top:before {\n  content: \"\\E253\";\n}\n\n.glyphicon-console:before {\n  content: \"\\E254\";\n}\n\n.glyphicon-superscript:before {\n  content: \"\\E255\";\n}\n\n.glyphicon-subscript:before {\n  content: \"\\E256\";\n}\n\n.glyphicon-menu-left:before {\n  content: \"\\E257\";\n}\n\n.glyphicon-menu-right:before {\n  content: \"\\E258\";\n}\n\n.glyphicon-menu-down:before {\n  content: \"\\E259\";\n}\n\n.glyphicon-menu-up:before {\n  content: \"\\E260\";\n}\n\n.caret {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 2px;\n  vertical-align: middle;\n  border-top: 4px dashed;\n  border-top: 4px solid \\9;\n  border-right: 4px solid transparent;\n  border-left: 4px solid transparent;\n}\n\n.dropup,\n.dropdown {\n  position: relative;\n}\n\n.dropdown-toggle:focus {\n  outline: 0;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 160px;\n  padding: 5px 0;\n  margin: 2px 0 0;\n  list-style: none;\n  font-size: 14px;\n  text-align: left;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n  background-clip: padding-box;\n}\n\n.dropdown-menu.pull-right {\n  right: 0;\n  left: auto;\n}\n\n.dropdown-menu .divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n\n.dropdown-menu > li > a {\n  display: block;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.428571429;\n  color: #333333;\n  white-space: nowrap;\n}\n\n.dropdown-menu > li > a:hover, .dropdown-menu > li > a:focus {\n  text-decoration: none;\n  color: #262626;\n  background-color: #f5f5f5;\n}\n\n.dropdown-menu > .active > a, .dropdown-menu > .ax-active > a, .dropdown-menu > .active > a:hover, .dropdown-menu > .ax-active > a:hover, .dropdown-menu > .active > a:focus, .dropdown-menu > .ax-active > a:focus {\n  color: #fff;\n  text-decoration: none;\n  outline: 0;\n  background-color: #337ab7;\n}\n\n.dropdown-menu > .disabled > a, .dropdown-menu > [disabled] > a, .dropdown-menu >\n.ax-disabled > a, .dropdown-menu > .disabled > a:hover, .dropdown-menu > [disabled] > a:hover, .dropdown-menu >\n.ax-disabled > a:hover, .dropdown-menu > .disabled > a:focus, .dropdown-menu > [disabled] > a:focus, .dropdown-menu >\n.ax-disabled > a:focus {\n  color: #777777;\n}\n\n.dropdown-menu > .disabled > a:hover, .dropdown-menu > [disabled] > a:hover, .dropdown-menu >\n.ax-disabled > a:hover, .dropdown-menu > .disabled > a:focus, .dropdown-menu > [disabled] > a:focus, .dropdown-menu >\n.ax-disabled > a:focus {\n  text-decoration: none;\n  background-color: transparent;\n  background-image: none;\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  cursor: not-allowed;\n}\n\n.open > .dropdown-menu {\n  display: block;\n}\n\n.open > a {\n  outline: 0;\n}\n\n.dropdown-menu-right {\n  left: auto;\n  right: 0;\n}\n\n.dropdown-menu-left {\n  left: 0;\n  right: auto;\n}\n\n.dropdown-header {\n  display: block;\n  padding: 3px 20px;\n  font-size: 12px;\n  line-height: 1.428571429;\n  color: #777777;\n  white-space: nowrap;\n}\n\n.dropdown-backdrop {\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  z-index: 990;\n}\n\n.pull-right > .dropdown-menu {\n  right: 0;\n  left: auto;\n}\n\n.dropup .caret,\n.navbar-fixed-bottom .dropdown .caret {\n  border-top: 0;\n  border-bottom: 4px dashed;\n  border-bottom: 4px solid \\9;\n  content: \"\";\n}\n\n.dropup .dropdown-menu,\n.navbar-fixed-bottom .dropdown .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-bottom: 2px;\n}\n\n@media (min-width: 768px) {\n  .navbar-right .dropdown-menu {\n    right: 0;\n    left: auto;\n  }\n  .navbar-right .dropdown-menu-left {\n    left: 0;\n    right: auto;\n  }\n}\n\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n}\n\n.btn-group > .btn,\n.btn-group-vertical > .btn {\n  position: relative;\n  float: left;\n}\n\n.btn-group > .btn:hover, .btn-group > .btn:focus, .btn-group > .btn:active, .btn-group > .btn.active, .btn-group > .btn.ax-active,\n.btn-group-vertical > .btn:hover,\n.btn-group-vertical > .btn:focus,\n.btn-group-vertical > .btn:active,\n.btn-group-vertical > .btn.active,\n.btn-group-vertical > .btn.ax-active {\n  z-index: 2;\n}\n\n.btn-group .btn + .btn,\n.btn-group .btn + .btn-group,\n.btn-group .btn-group + .btn,\n.btn-group .btn-group + .btn-group {\n  margin-left: -1px;\n}\n\n.btn-toolbar {\n  margin-left: -5px;\n}\n\n.btn-toolbar:before, .btn-toolbar:after {\n  content: \" \";\n  display: table;\n}\n\n.btn-toolbar:after {\n  clear: both;\n}\n\n.btn-toolbar .btn,\n.btn-toolbar .btn-group,\n.btn-toolbar .input-group {\n  float: left;\n}\n\n.btn-toolbar > .btn,\n.btn-toolbar > .btn-group,\n.btn-toolbar > .input-group {\n  margin-left: 5px;\n}\n\n.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n  border-radius: 0;\n}\n\n.btn-group > .btn:first-child {\n  margin-left: 0;\n}\n\n.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.btn-group > .btn:last-child:not(:first-child),\n.btn-group > .dropdown-toggle:not(:first-child) {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n\n.btn-group > .btn-group {\n  float: left;\n}\n\n.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n\n.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n\n.btn-group .dropdown-toggle:active,\n.btn-group.open .dropdown-toggle {\n  outline: 0;\n}\n\n.btn-group > .btn + .dropdown-toggle {\n  padding-left: 8px;\n  padding-right: 8px;\n}\n\n.btn-group > .btn-lg + .dropdown-toggle, .btn-group-lg.btn-group > .btn + .dropdown-toggle {\n  padding-left: 12px;\n  padding-right: 12px;\n}\n\n.btn-group.open .dropdown-toggle {\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n}\n\n.btn-group.open .dropdown-toggle.btn-link {\n  box-shadow: none;\n}\n\n.btn .caret {\n  margin-left: 0;\n}\n\n.btn-lg .caret, .btn-group-lg > .btn .caret {\n  border-width: 5px 5px 0;\n  border-bottom-width: 0;\n}\n\n.dropup .btn-lg .caret, .dropup .btn-group-lg > .btn .caret {\n  border-width: 0 5px 5px;\n}\n\n.btn-group-vertical > .btn,\n.btn-group-vertical > .btn-group,\n.btn-group-vertical > .btn-group > .btn {\n  display: block;\n  float: none;\n  width: 100%;\n  max-width: 100%;\n}\n\n.btn-group-vertical > .btn-group:before, .btn-group-vertical > .btn-group:after {\n  content: \" \";\n  display: table;\n}\n\n.btn-group-vertical > .btn-group:after {\n  clear: both;\n}\n\n.btn-group-vertical > .btn-group > .btn {\n  float: none;\n}\n\n.btn-group-vertical > .btn + .btn,\n.btn-group-vertical > .btn + .btn-group,\n.btn-group-vertical > .btn-group + .btn,\n.btn-group-vertical > .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n\n.btn-group-vertical > .btn:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n\n.btn-group-vertical > .btn:first-child:not(:last-child) {\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.btn-group-vertical > .btn:last-child:not(:first-child) {\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n\n.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n\n.btn-group-justified {\n  display: table;\n  width: 100%;\n  table-layout: fixed;\n  border-collapse: separate;\n}\n\n.btn-group-justified > .btn,\n.btn-group-justified > .btn-group {\n  float: none;\n  display: table-cell;\n  width: 1%;\n}\n\n.btn-group-justified > .btn-group .btn {\n  width: 100%;\n}\n\n.btn-group-justified > .btn-group .dropdown-menu {\n  left: auto;\n}\n\n[data-toggle=\"buttons\"] > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn input[type=\"checkbox\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"checkbox\"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n\n.input-group[class*=\"col-\"] {\n  float: none;\n  padding-left: 0;\n  padding-right: 0;\n}\n\n.input-group .form-control {\n  position: relative;\n  z-index: 2;\n  float: left;\n  width: 100%;\n  margin-bottom: 0;\n}\n\n.input-group .form-control:focus {\n  z-index: 3;\n}\n\n.input-group-addon,\n.input-group-btn,\n.input-group .form-control {\n  display: table-cell;\n}\n\n.input-group-addon:not(:first-child):not(:last-child),\n.input-group-btn:not(:first-child):not(:last-child),\n.input-group .form-control:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n\n.input-group-addon,\n.input-group-btn {\n  width: 1%;\n  white-space: nowrap;\n  vertical-align: middle;\n}\n\n.input-group-addon {\n  padding: 6px 12px;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 1;\n  color: #555555;\n  text-align: center;\n  background-color: #eeeeee;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.input-group-addon.input-sm,\n.input-group-sm > .input-group-addon,\n.input-group-sm > .input-group-btn > .input-group-addon.btn {\n  padding: 5px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n}\n\n.input-group-addon.input-lg,\n.input-group-lg > .input-group-addon,\n.input-group-lg > .input-group-btn > .input-group-addon.btn {\n  padding: 10px 16px;\n  font-size: 18px;\n  border-radius: 6px;\n}\n\n.input-group-addon input[type=\"radio\"],\n.input-group-addon input[type=\"checkbox\"] {\n  margin-top: 0;\n}\n\n.input-group .form-control:first-child,\n.input-group-addon:first-child,\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group > .btn,\n.input-group-btn:first-child > .dropdown-toggle,\n.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.input-group-addon:first-child {\n  border-right: 0;\n}\n\n.input-group .form-control:last-child,\n.input-group-addon:last-child,\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group > .btn,\n.input-group-btn:last-child > .dropdown-toggle,\n.input-group-btn:first-child > .btn:not(:first-child),\n.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n\n.input-group-addon:last-child {\n  border-left: 0;\n}\n\n.input-group-btn {\n  position: relative;\n  font-size: 0;\n  white-space: nowrap;\n}\n\n.input-group-btn > .btn {\n  position: relative;\n}\n\n.input-group-btn > .btn + .btn {\n  margin-left: -1px;\n}\n\n.input-group-btn > .btn:hover, .input-group-btn > .btn:focus, .input-group-btn > .btn:active {\n  z-index: 2;\n}\n\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group {\n  margin-right: -1px;\n}\n\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group {\n  z-index: 2;\n  margin-left: -1px;\n}\n\n.nav {\n  margin-bottom: 0;\n  padding-left: 0;\n  list-style: none;\n}\n\n.nav:before, .nav:after {\n  content: \" \";\n  display: table;\n}\n\n.nav:after {\n  clear: both;\n}\n\n.nav > li {\n  position: relative;\n  display: block;\n}\n\n.nav > li > a {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n}\n\n.nav > li > a:hover, .nav > li > a:focus {\n  text-decoration: none;\n  background-color: #eeeeee;\n}\n\n.nav > li.disabled > a, .nav > li[disabled] > a, .nav >\nli.ax-disabled > a {\n  color: #777777;\n}\n\n.nav > li.disabled > a:hover, .nav > li[disabled] > a:hover, .nav >\nli.ax-disabled > a:hover, .nav > li.disabled > a:focus, .nav > li[disabled] > a:focus, .nav >\nli.ax-disabled > a:focus {\n  color: #777777;\n  text-decoration: none;\n  background-color: transparent;\n  cursor: not-allowed;\n}\n\n.nav .open > a, .nav .open > a:hover, .nav .open > a:focus {\n  background-color: #eeeeee;\n  border-color: #337ab7;\n}\n\n.nav .nav-divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n\n.nav > li > a > img {\n  max-width: none;\n}\n\n.nav-tabs {\n  border-bottom: 1px solid #ddd;\n}\n\n.nav-tabs > li {\n  float: left;\n  margin-bottom: -1px;\n}\n\n.nav-tabs > li > a {\n  margin-right: 2px;\n  line-height: 1.428571429;\n  border: 1px solid transparent;\n  border-radius: 4px 4px 0 0;\n}\n\n.nav-tabs > li > a:hover {\n  border-color: #eeeeee #eeeeee #ddd;\n}\n\n.nav-tabs > li.active > a, .nav-tabs > li.ax-active > a, .nav-tabs > li.active > a:hover, .nav-tabs > li.ax-active > a:hover, .nav-tabs > li.active > a:focus, .nav-tabs > li.ax-active > a:focus {\n  color: #555555;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-bottom-color: transparent;\n  cursor: default;\n}\n\n.nav-pills > li {\n  float: left;\n}\n\n.nav-pills > li > a {\n  border-radius: 4px;\n}\n\n.nav-pills > li + li {\n  margin-left: 2px;\n}\n\n.nav-pills > li.active > a, .nav-pills > li.ax-active > a, .nav-pills > li.active > a:hover, .nav-pills > li.ax-active > a:hover, .nav-pills > li.active > a:focus, .nav-pills > li.ax-active > a:focus {\n  color: #fff;\n  background-color: #337ab7;\n}\n\n.nav-stacked > li {\n  float: none;\n}\n\n.nav-stacked > li + li {\n  margin-top: 2px;\n  margin-left: 0;\n}\n\n.nav-justified, .nav-tabs.nav-justified {\n  width: 100%;\n}\n\n.nav-justified > li, .nav-tabs.nav-justified > li {\n  float: none;\n}\n\n.nav-justified > li > a, .nav-tabs.nav-justified > li > a {\n  text-align: center;\n  margin-bottom: 5px;\n}\n\n.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n\n@media (min-width: 768px) {\n  .nav-justified > li, .nav-tabs.nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-justified > li > a, .nav-tabs.nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n\n.nav-tabs-justified, .nav-tabs.nav-justified {\n  border-bottom: 0;\n}\n\n.nav-tabs-justified > li > a, .nav-tabs.nav-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n\n.nav-tabs-justified > .active > a, .nav-tabs.nav-justified > .active > a, .nav-tabs-justified > .ax-active > a, .nav-tabs.nav-justified > .ax-active > a,\n.nav-tabs-justified > .active > a:hover, .nav-tabs.nav-justified > .active > a:hover,\n.nav-tabs-justified > .ax-active > a:hover, .nav-tabs.nav-justified > .ax-active > a:hover,\n.nav-tabs-justified > .active > a:focus, .nav-tabs.nav-justified > .active > a:focus,\n.nav-tabs-justified > .ax-active > a:focus, .nav-tabs.nav-justified > .ax-active > a:focus {\n  border: 1px solid #ddd;\n}\n\n@media (min-width: 768px) {\n  .nav-tabs-justified > li > a, .nav-tabs.nav-justified > li > a {\n    border-bottom: 1px solid #ddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs-justified > .active > a, .nav-tabs.nav-justified > .active > a, .nav-tabs-justified > .ax-active > a, .nav-tabs.nav-justified > .ax-active > a,\n  .nav-tabs-justified > .active > a:hover, .nav-tabs.nav-justified > .active > a:hover,\n  .nav-tabs-justified > .ax-active > a:hover, .nav-tabs.nav-justified > .ax-active > a:hover,\n  .nav-tabs-justified > .active > a:focus, .nav-tabs.nav-justified > .active > a:focus,\n  .nav-tabs-justified > .ax-active > a:focus, .nav-tabs.nav-justified > .ax-active > a:focus {\n    border-bottom-color: #fff;\n  }\n}\n\n.tab-content > .tab-pane {\n  display: none;\n}\n\n.tab-content > .active, .tab-content > .ax-active {\n  display: block;\n}\n\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n\n.navbar {\n  position: relative;\n  min-height: 50px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n}\n\n.navbar:before, .navbar:after {\n  content: \" \";\n  display: table;\n}\n\n.navbar:after {\n  clear: both;\n}\n\n@media (min-width: 768px) {\n  .navbar {\n    border-radius: 4px;\n  }\n}\n\n.navbar-header:before, .navbar-header:after {\n  content: \" \";\n  display: table;\n}\n\n.navbar-header:after {\n  clear: both;\n}\n\n@media (min-width: 768px) {\n  .navbar-header {\n    float: left;\n  }\n}\n\n.navbar-collapse {\n  overflow-x: visible;\n  padding-right: 15px;\n  padding-left: 15px;\n  border-top: 1px solid transparent;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  -webkit-overflow-scrolling: touch;\n}\n\n.navbar-collapse:before, .navbar-collapse:after {\n  content: \" \";\n  display: table;\n}\n\n.navbar-collapse:after {\n  clear: both;\n}\n\n.navbar-collapse.in {\n  overflow-y: auto;\n}\n\n@media (min-width: 768px) {\n  .navbar-collapse {\n    width: auto;\n    border-top: 0;\n    box-shadow: none;\n  }\n  .navbar-collapse.collapse {\n    display: block !important;\n    height: auto !important;\n    padding-bottom: 0;\n    overflow: visible !important;\n  }\n  .navbar-collapse.in {\n    overflow-y: visible;\n  }\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-static-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    padding-left: 0;\n    padding-right: 0;\n  }\n}\n\n.navbar-fixed-top .navbar-collapse,\n.navbar-fixed-bottom .navbar-collapse {\n  max-height: 340px;\n}\n\n@media (max-device-width: 480px) and (orientation: landscape) {\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    max-height: 200px;\n  }\n}\n\n.container > .navbar-header,\n.container > .navbar-collapse,\n.container-fluid > .navbar-header,\n.container-fluid > .navbar-collapse {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n\n@media (min-width: 768px) {\n  .container > .navbar-header,\n  .container > .navbar-collapse,\n  .container-fluid > .navbar-header,\n  .container-fluid > .navbar-collapse {\n    margin-right: 0;\n    margin-left: 0;\n  }\n}\n\n.navbar-static-top {\n  z-index: 1000;\n  border-width: 0 0 1px;\n}\n\n@media (min-width: 768px) {\n  .navbar-static-top {\n    border-radius: 0;\n  }\n}\n\n.navbar-fixed-top,\n.navbar-fixed-bottom {\n  position: fixed;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n\n@media (min-width: 768px) {\n  .navbar-fixed-top,\n  .navbar-fixed-bottom {\n    border-radius: 0;\n  }\n}\n\n.navbar-fixed-top {\n  top: 0;\n  border-width: 0 0 1px;\n}\n\n.navbar-fixed-bottom {\n  bottom: 0;\n  margin-bottom: 0;\n  border-width: 1px 0 0;\n}\n\n.navbar-brand {\n  float: left;\n  padding: 15px 15px;\n  font-size: 18px;\n  line-height: 20px;\n  height: 50px;\n}\n\n.navbar-brand:hover, .navbar-brand:focus {\n  text-decoration: none;\n}\n\n.navbar-brand > img {\n  display: block;\n}\n\n@media (min-width: 768px) {\n  .navbar > .container .navbar-brand,\n  .navbar > .container-fluid .navbar-brand {\n    margin-left: -15px;\n  }\n}\n\n.navbar-toggle {\n  position: relative;\n  float: right;\n  margin-right: 15px;\n  padding: 9px 10px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  background-color: transparent;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n\n.navbar-toggle:focus {\n  outline: 0;\n}\n\n.navbar-toggle .icon-bar {\n  display: block;\n  width: 22px;\n  height: 2px;\n  border-radius: 1px;\n}\n\n.navbar-toggle .icon-bar + .icon-bar {\n  margin-top: 4px;\n}\n\n@media (min-width: 768px) {\n  .navbar-toggle {\n    display: none;\n  }\n}\n\n.navbar-nav {\n  margin: 7.5px -15px;\n}\n\n.navbar-nav > li > a {\n  padding-top: 10px;\n  padding-bottom: 10px;\n  line-height: 20px;\n}\n\n@media (max-width: 767px) {\n  .navbar-nav .open .dropdown-menu {\n    position: static;\n    float: none;\n    width: auto;\n    margin-top: 0;\n    background-color: transparent;\n    border: 0;\n    box-shadow: none;\n  }\n  .navbar-nav .open .dropdown-menu > li > a,\n  .navbar-nav .open .dropdown-menu .dropdown-header {\n    padding: 5px 15px 5px 25px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a {\n    line-height: 20px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-nav .open .dropdown-menu > li > a:focus {\n    background-image: none;\n  }\n}\n\n@media (min-width: 768px) {\n  .navbar-nav {\n    float: left;\n    margin: 0;\n  }\n  .navbar-nav > li {\n    float: left;\n  }\n  .navbar-nav > li > a {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n}\n\n.navbar-form {\n  margin-left: -15px;\n  margin-right: -15px;\n  padding: 10px 15px;\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1);\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n@media (min-width: 768px) {\n  .navbar-form .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control-static {\n    display: inline-block;\n  }\n  .navbar-form .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .navbar-form .input-group .input-group-addon,\n  .navbar-form .input-group .input-group-btn,\n  .navbar-form .input-group .form-control {\n    width: auto;\n  }\n  .navbar-form .input-group > .form-control {\n    width: 100%;\n  }\n  .navbar-form .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio,\n  .navbar-form .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio label,\n  .navbar-form .checkbox label {\n    padding-left: 0;\n  }\n  .navbar-form .radio input[type=\"radio\"],\n  .navbar-form .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .navbar-form .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n\n@media (max-width: 767px) {\n  .navbar-form .form-group {\n    margin-bottom: 5px;\n  }\n  .navbar-form .form-group:last-child {\n    margin-bottom: 0;\n  }\n}\n\n@media (min-width: 768px) {\n  .navbar-form {\n    width: auto;\n    border: 0;\n    margin-left: 0;\n    margin-right: 0;\n    padding-top: 0;\n    padding-bottom: 0;\n    box-shadow: none;\n  }\n}\n\n.navbar-nav > li > .dropdown-menu {\n  margin-top: 0;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n\n.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {\n  margin-bottom: 0;\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.navbar-btn {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n.navbar-btn.btn-sm, .btn-group-sm > .navbar-btn.btn {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.navbar-btn.btn-xs, .btn-group-xs > .navbar-btn.btn {\n  margin-top: 14px;\n  margin-bottom: 14px;\n}\n\n.navbar-text {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n\n@media (min-width: 768px) {\n  .navbar-text {\n    float: left;\n    margin-left: 15px;\n    margin-right: 15px;\n  }\n}\n\n@media (min-width: 768px) {\n  .navbar-left {\n    float: left !important;\n  }\n  .navbar-right {\n    float: right !important;\n    margin-right: -15px;\n  }\n  .navbar-right ~ .navbar-right {\n    margin-right: 0;\n  }\n}\n\n.navbar-default {\n  background-color: #f8f8f8;\n  border-color: #e7e7e7;\n}\n\n.navbar-default .navbar-brand {\n  color: #777;\n}\n\n.navbar-default .navbar-brand:hover, .navbar-default .navbar-brand:focus {\n  color: #5e5e5e;\n  background-color: transparent;\n}\n\n.navbar-default .navbar-text {\n  color: #777;\n}\n\n.navbar-default .navbar-nav > li > a {\n  color: #777;\n}\n\n.navbar-default .navbar-nav > li > a:hover, .navbar-default .navbar-nav > li > a:focus {\n  color: #333;\n  background-color: transparent;\n}\n\n.navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .ax-active > a, .navbar-default .navbar-nav > .active > a:hover, .navbar-default .navbar-nav > .ax-active > a:hover, .navbar-default .navbar-nav > .active > a:focus, .navbar-default .navbar-nav > .ax-active > a:focus {\n  color: #555;\n  background-color: #e7e7e7;\n}\n\n.navbar-default .navbar-nav > .disabled > a, .navbar-default .navbar-nav > [disabled] > a, .navbar-default .navbar-nav >\n.ax-disabled > a, .navbar-default .navbar-nav > .disabled > a:hover, .navbar-default .navbar-nav > [disabled] > a:hover, .navbar-default .navbar-nav >\n.ax-disabled > a:hover, .navbar-default .navbar-nav > .disabled > a:focus, .navbar-default .navbar-nav > [disabled] > a:focus, .navbar-default .navbar-nav >\n.ax-disabled > a:focus {\n  color: #ccc;\n  background-color: transparent;\n}\n\n.navbar-default .navbar-toggle {\n  border-color: #ddd;\n}\n\n.navbar-default .navbar-toggle:hover, .navbar-default .navbar-toggle:focus {\n  background-color: #ddd;\n}\n\n.navbar-default .navbar-toggle .icon-bar {\n  background-color: #888;\n}\n\n.navbar-default .navbar-collapse,\n.navbar-default .navbar-form {\n  border-color: #e7e7e7;\n}\n\n.navbar-default .navbar-nav > .open > a, .navbar-default .navbar-nav > .open > a:hover, .navbar-default .navbar-nav > .open > a:focus {\n  background-color: #e7e7e7;\n  color: #555;\n}\n\n@media (max-width: 767px) {\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a {\n    color: #777;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #333;\n    background-color: transparent;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a, .navbar-default .navbar-nav .open .dropdown-menu > .ax-active > a, .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > .ax-active > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus, .navbar-default .navbar-nav .open .dropdown-menu > .ax-active > a:focus {\n    color: #555;\n    background-color: #e7e7e7;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a, .navbar-default .navbar-nav .open .dropdown-menu > [disabled] > a, .navbar-default .navbar-nav .open .dropdown-menu >\n  .ax-disabled > a, .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > [disabled] > a:hover, .navbar-default .navbar-nav .open .dropdown-menu >\n  .ax-disabled > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus, .navbar-default .navbar-nav .open .dropdown-menu > [disabled] > a:focus, .navbar-default .navbar-nav .open .dropdown-menu >\n  .ax-disabled > a:focus {\n    color: #ccc;\n    background-color: transparent;\n  }\n}\n\n.navbar-default .navbar-link {\n  color: #777;\n}\n\n.navbar-default .navbar-link:hover {\n  color: #333;\n}\n\n.navbar-default .btn-link {\n  color: #777;\n}\n\n.navbar-default .btn-link:hover, .navbar-default .btn-link:focus {\n  color: #333;\n}\n\n.navbar-default .btn-link[disabled]:hover, .navbar-default .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-default .btn-link:hover,\nfieldset[disabled] .navbar-default .btn-link:focus {\n  color: #ccc;\n}\n\n.navbar-inverse {\n  background-color: #222;\n  border-color: #090909;\n}\n\n.navbar-inverse .navbar-brand {\n  color: #9d9d9d;\n}\n\n.navbar-inverse .navbar-brand:hover, .navbar-inverse .navbar-brand:focus {\n  color: #fff;\n  background-color: transparent;\n}\n\n.navbar-inverse .navbar-text {\n  color: #9d9d9d;\n}\n\n.navbar-inverse .navbar-nav > li > a {\n  color: #9d9d9d;\n}\n\n.navbar-inverse .navbar-nav > li > a:hover, .navbar-inverse .navbar-nav > li > a:focus {\n  color: #fff;\n  background-color: transparent;\n}\n\n.navbar-inverse .navbar-nav > .active > a, .navbar-inverse .navbar-nav > .ax-active > a, .navbar-inverse .navbar-nav > .active > a:hover, .navbar-inverse .navbar-nav > .ax-active > a:hover, .navbar-inverse .navbar-nav > .active > a:focus, .navbar-inverse .navbar-nav > .ax-active > a:focus {\n  color: #fff;\n  background-color: #090909;\n}\n\n.navbar-inverse .navbar-nav > .disabled > a, .navbar-inverse .navbar-nav > [disabled] > a, .navbar-inverse .navbar-nav >\n.ax-disabled > a, .navbar-inverse .navbar-nav > .disabled > a:hover, .navbar-inverse .navbar-nav > [disabled] > a:hover, .navbar-inverse .navbar-nav >\n.ax-disabled > a:hover, .navbar-inverse .navbar-nav > .disabled > a:focus, .navbar-inverse .navbar-nav > [disabled] > a:focus, .navbar-inverse .navbar-nav >\n.ax-disabled > a:focus {\n  color: #444;\n  background-color: transparent;\n}\n\n.navbar-inverse .navbar-toggle {\n  border-color: #333;\n}\n\n.navbar-inverse .navbar-toggle:hover, .navbar-inverse .navbar-toggle:focus {\n  background-color: #333;\n}\n\n.navbar-inverse .navbar-toggle .icon-bar {\n  background-color: #fff;\n}\n\n.navbar-inverse .navbar-collapse,\n.navbar-inverse .navbar-form {\n  border-color: #101010;\n}\n\n.navbar-inverse .navbar-nav > .open > a, .navbar-inverse .navbar-nav > .open > a:hover, .navbar-inverse .navbar-nav > .open > a:focus {\n  background-color: #090909;\n  color: #fff;\n}\n\n@media (max-width: 767px) {\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {\n    border-color: #090909;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {\n    background-color: #090909;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {\n    color: #9d9d9d;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #fff;\n    background-color: transparent;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a, .navbar-inverse .navbar-nav .open .dropdown-menu > .ax-active > a, .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > .ax-active > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus, .navbar-inverse .navbar-nav .open .dropdown-menu > .ax-active > a:focus {\n    color: #fff;\n    background-color: #090909;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a, .navbar-inverse .navbar-nav .open .dropdown-menu > [disabled] > a, .navbar-inverse .navbar-nav .open .dropdown-menu >\n  .ax-disabled > a, .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > [disabled] > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu >\n  .ax-disabled > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus, .navbar-inverse .navbar-nav .open .dropdown-menu > [disabled] > a:focus, .navbar-inverse .navbar-nav .open .dropdown-menu >\n  .ax-disabled > a:focus {\n    color: #444;\n    background-color: transparent;\n  }\n}\n\n.navbar-inverse .navbar-link {\n  color: #9d9d9d;\n}\n\n.navbar-inverse .navbar-link:hover {\n  color: #fff;\n}\n\n.navbar-inverse .btn-link {\n  color: #9d9d9d;\n}\n\n.navbar-inverse .btn-link:hover, .navbar-inverse .btn-link:focus {\n  color: #fff;\n}\n\n.navbar-inverse .btn-link[disabled]:hover, .navbar-inverse .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-inverse .btn-link:hover,\nfieldset[disabled] .navbar-inverse .btn-link:focus {\n  color: #444;\n}\n\n.breadcrumb {\n  padding: 8px 15px;\n  margin-bottom: 20px;\n  list-style: none;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n\n.breadcrumb > li {\n  display: inline-block;\n}\n\n.breadcrumb > li + li:before {\n  content: \"/\\A0\";\n  padding: 0 5px;\n  color: #ccc;\n}\n\n.breadcrumb > .active, .breadcrumb > .ax-active {\n  color: #777777;\n}\n\n.pagination {\n  display: inline-block;\n  padding-left: 0;\n  margin: 20px 0;\n  border-radius: 4px;\n}\n\n.pagination > li {\n  display: inline;\n}\n\n.pagination > li > a,\n.pagination > li > span {\n  position: relative;\n  float: left;\n  padding: 6px 12px;\n  line-height: 1.428571429;\n  text-decoration: none;\n  color: #337ab7;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  margin-left: -1px;\n}\n\n.pagination > li:first-child > a,\n.pagination > li:first-child > span {\n  margin-left: 0;\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n\n.pagination > li:last-child > a,\n.pagination > li:last-child > span {\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n\n.pagination > li > a:hover, .pagination > li > a:focus,\n.pagination > li > span:hover,\n.pagination > li > span:focus {\n  z-index: 2;\n  color: #23527c;\n  background-color: #eeeeee;\n  border-color: #ddd;\n}\n\n.pagination > .active > a, .pagination > .ax-active > a, .pagination > .active > a:hover, .pagination > .ax-active > a:hover, .pagination > .active > a:focus, .pagination > .ax-active > a:focus,\n.pagination > .active > span,\n.pagination > .ax-active > span,\n.pagination > .active > span:hover,\n.pagination > .ax-active > span:hover,\n.pagination > .active > span:focus,\n.pagination > .ax-active > span:focus {\n  z-index: 3;\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n  cursor: default;\n}\n\n.pagination > .disabled > span, .pagination > [disabled] > span, .pagination >\n.ax-disabled > span,\n.pagination > .disabled > span:hover,\n.pagination > [disabled] > span:hover,\n.pagination >\n.ax-disabled > span:hover,\n.pagination > .disabled > span:focus,\n.pagination > [disabled] > span:focus,\n.pagination >\n.ax-disabled > span:focus,\n.pagination > .disabled > a,\n.pagination > [disabled] > a,\n.pagination >\n.ax-disabled > a,\n.pagination > .disabled > a:hover,\n.pagination > [disabled] > a:hover,\n.pagination >\n.ax-disabled > a:hover,\n.pagination > .disabled > a:focus,\n.pagination > [disabled] > a:focus,\n.pagination >\n.ax-disabled > a:focus {\n  color: #777777;\n  background-color: #fff;\n  border-color: #ddd;\n  cursor: not-allowed;\n}\n\n.pagination-lg > li > a,\n.pagination-lg > li > span {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n\n.pagination-lg > li:first-child > a,\n.pagination-lg > li:first-child > span {\n  border-bottom-left-radius: 6px;\n  border-top-left-radius: 6px;\n}\n\n.pagination-lg > li:last-child > a,\n.pagination-lg > li:last-child > span {\n  border-bottom-right-radius: 6px;\n  border-top-right-radius: 6px;\n}\n\n.pagination-sm > li > a,\n.pagination-sm > li > span {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n\n.pagination-sm > li:first-child > a,\n.pagination-sm > li:first-child > span {\n  border-bottom-left-radius: 3px;\n  border-top-left-radius: 3px;\n}\n\n.pagination-sm > li:last-child > a,\n.pagination-sm > li:last-child > span {\n  border-bottom-right-radius: 3px;\n  border-top-right-radius: 3px;\n}\n\n.pager {\n  padding-left: 0;\n  margin: 20px 0;\n  list-style: none;\n  text-align: center;\n}\n\n.pager:before, .pager:after {\n  content: \" \";\n  display: table;\n}\n\n.pager:after {\n  clear: both;\n}\n\n.pager li {\n  display: inline;\n}\n\n.pager li > a,\n.pager li > span {\n  display: inline-block;\n  padding: 5px 14px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 15px;\n}\n\n.pager li > a:hover,\n.pager li > a:focus {\n  text-decoration: none;\n  background-color: #eeeeee;\n}\n\n.pager .next > a,\n.pager .next > span {\n  float: right;\n}\n\n.pager .previous > a,\n.pager .previous > span {\n  float: left;\n}\n\n.pager .disabled > a, .pager [disabled] > a, .pager\n.ax-disabled > a,\n.pager .disabled > a:hover,\n.pager [disabled] > a:hover,\n.pager\n.ax-disabled > a:hover,\n.pager .disabled > a:focus,\n.pager [disabled] > a:focus,\n.pager\n.ax-disabled > a:focus,\n.pager .disabled > span,\n.pager [disabled] > span,\n.pager\n.ax-disabled > span {\n  color: #777777;\n  background-color: #fff;\n  cursor: not-allowed;\n}\n\n.label {\n  display: inline;\n  padding: .2em .6em .3em;\n  font-size: 75%;\n  font-weight: bold;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25em;\n}\n\n.label:empty {\n  display: none;\n}\n\n.btn .label {\n  position: relative;\n  top: -1px;\n}\n\na.label:hover, a.label:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.label-default {\n  background-color: #777777;\n}\n\n.label-default[href]:hover, .label-default[href]:focus {\n  background-color: #5e5e5e;\n}\n\n.label-primary {\n  background-color: #337ab7;\n}\n\n.label-primary[href]:hover, .label-primary[href]:focus {\n  background-color: #286090;\n}\n\n.label-success {\n  background-color: #5cb85c;\n}\n\n.label-success[href]:hover, .label-success[href]:focus {\n  background-color: #449d44;\n}\n\n.label-info {\n  background-color: #5bc0de;\n}\n\n.label-info[href]:hover, .label-info[href]:focus {\n  background-color: #31b0d5;\n}\n\n.label-warning {\n  background-color: #f0ad4e;\n}\n\n.label-warning[href]:hover, .label-warning[href]:focus {\n  background-color: #ec971f;\n}\n\n.label-danger {\n  background-color: #d9534f;\n}\n\n.label-danger[href]:hover, .label-danger[href]:focus {\n  background-color: #c9302c;\n}\n\n.badge {\n  display: inline-block;\n  min-width: 10px;\n  padding: 3px 7px;\n  font-size: 12px;\n  font-weight: bold;\n  color: #fff;\n  line-height: 1;\n  vertical-align: middle;\n  white-space: nowrap;\n  text-align: center;\n  background-color: #777777;\n  border-radius: 10px;\n}\n\n.badge:empty {\n  display: none;\n}\n\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n\n.btn-xs .badge, .btn-group-xs > .btn .badge,\n.btn-group-xs > .btn .badge {\n  top: 0;\n  padding: 1px 5px;\n}\n\n.list-group-item.active > .badge, .list-group-item.ax-active > .badge,\n.nav-pills > .active > a > .badge,\n.nav-pills > .ax-active > a > .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n\n.list-group-item > .badge {\n  float: right;\n}\n\n.list-group-item > .badge + .badge {\n  margin-right: 5px;\n}\n\n.nav-pills > li > a > .badge {\n  margin-left: 3px;\n}\n\na.badge:hover, a.badge:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n\n.jumbotron {\n  padding-top: 30px;\n  padding-bottom: 30px;\n  margin-bottom: 30px;\n  color: inherit;\n  background-color: #eeeeee;\n}\n\n.jumbotron h1,\n.jumbotron .h1 {\n  color: inherit;\n}\n\n.jumbotron p {\n  margin-bottom: 15px;\n  font-size: 21px;\n  font-weight: 200;\n}\n\n.jumbotron > hr {\n  border-top-color: #d5d5d5;\n}\n\n.container .jumbotron,\n.container-fluid .jumbotron {\n  border-radius: 6px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n.jumbotron .container {\n  max-width: 100%;\n}\n\n@media screen and (min-width: 768px) {\n  .jumbotron {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n  .container .jumbotron,\n  .container-fluid .jumbotron {\n    padding-left: 60px;\n    padding-right: 60px;\n  }\n  .jumbotron h1,\n  .jumbotron .h1 {\n    font-size: 63px;\n  }\n}\n\n.thumbnail {\n  display: block;\n  padding: 4px;\n  margin-bottom: 20px;\n  line-height: 1.428571429;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: border 0.2s ease-in-out;\n  transition: border 0.2s ease-in-out;\n}\n\n.thumbnail > img,\n.thumbnail a > img {\n  display: block;\n  max-width: 100%;\n  height: auto;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.thumbnail .caption {\n  padding: 9px;\n  color: #333333;\n}\n\na.thumbnail:hover,\na.thumbnail:focus,\na.thumbnail.active,\na.thumbnail.ax-active {\n  border-color: #337ab7;\n}\n\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n\n.progress {\n  overflow: hidden;\n  height: 20px;\n  margin-bottom: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.progress-bar {\n  float: left;\n  width: 0%;\n  height: 100%;\n  font-size: 12px;\n  line-height: 20px;\n  color: #fff;\n  text-align: center;\n  background-color: #337ab7;\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n  -webkit-transition: width 0.6s ease;\n  transition: width 0.6s ease;\n}\n\n.progress-striped .progress-bar,\n.progress-bar-striped {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-size: 40px 40px;\n}\n\n.progress.active .progress-bar, .progress.ax-active .progress-bar,\n.progress-bar.active,\n.progress-bar.ax-active {\n  -webkit-animation: progress-bar-stripes 2s linear infinite;\n  animation: progress-bar-stripes 2s linear infinite;\n}\n\n.progress-bar-success {\n  background-color: #5cb85c;\n}\n\n.progress-striped .progress-bar-success {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n\n.progress-bar-info {\n  background-color: #5bc0de;\n}\n\n.progress-striped .progress-bar-info {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n\n.progress-bar-warning {\n  background-color: #f0ad4e;\n}\n\n.progress-striped .progress-bar-warning {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n\n.progress-bar-danger {\n  background-color: #d9534f;\n}\n\n.progress-striped .progress-bar-danger {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n\n.media {\n  margin-top: 15px;\n}\n\n.media:first-child {\n  margin-top: 0;\n}\n\n.media,\n.media-body {\n  zoom: 1;\n  overflow: hidden;\n}\n\n.media-body {\n  width: 10000px;\n}\n\n.media-object {\n  display: block;\n}\n\n.media-object.img-thumbnail {\n  max-width: none;\n}\n\n.media-right,\n.media > .pull-right {\n  padding-left: 10px;\n}\n\n.media-left,\n.media > .pull-left {\n  padding-right: 10px;\n}\n\n.media-left,\n.media-right,\n.media-body {\n  display: table-cell;\n  vertical-align: top;\n}\n\n.media-middle {\n  vertical-align: middle;\n}\n\n.media-bottom {\n  vertical-align: bottom;\n}\n\n.media-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n\n.media-list {\n  padding-left: 0;\n  list-style: none;\n}\n\n.list-group {\n  margin-bottom: 20px;\n  padding-left: 0;\n}\n\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n  margin-bottom: -1px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n}\n\n.list-group-item:first-child {\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n}\n\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n\na.list-group-item,\nbutton.list-group-item {\n  color: #555;\n}\n\na.list-group-item .list-group-item-heading,\nbutton.list-group-item .list-group-item-heading {\n  color: #333;\n}\n\na.list-group-item:hover, a.list-group-item:focus,\nbutton.list-group-item:hover,\nbutton.list-group-item:focus {\n  text-decoration: none;\n  color: #555;\n  background-color: #f5f5f5;\n}\n\nbutton.list-group-item {\n  width: 100%;\n  text-align: left;\n}\n\n.list-group-item.disabled, .list-group-item[disabled],\n.list-group-item.ax-disabled, .list-group-item.disabled:hover, .list-group-item[disabled]:hover,\n.list-group-item.ax-disabled:hover, .list-group-item.disabled:focus, .list-group-item[disabled]:focus,\n.list-group-item.ax-disabled:focus {\n  background-color: #eeeeee;\n  color: #777777;\n  cursor: not-allowed;\n}\n\n.list-group-item.disabled .list-group-item-heading, .list-group-item[disabled] .list-group-item-heading,\n.list-group-item.ax-disabled .list-group-item-heading, .list-group-item.disabled:hover .list-group-item-heading, .list-group-item[disabled]:hover .list-group-item-heading,\n.list-group-item.ax-disabled:hover .list-group-item-heading, .list-group-item.disabled:focus .list-group-item-heading, .list-group-item[disabled]:focus .list-group-item-heading,\n.list-group-item.ax-disabled:focus .list-group-item-heading {\n  color: inherit;\n}\n\n.list-group-item.disabled .list-group-item-text, .list-group-item[disabled] .list-group-item-text,\n.list-group-item.ax-disabled .list-group-item-text, .list-group-item.disabled:hover .list-group-item-text, .list-group-item[disabled]:hover .list-group-item-text,\n.list-group-item.ax-disabled:hover .list-group-item-text, .list-group-item.disabled:focus .list-group-item-text, .list-group-item[disabled]:focus .list-group-item-text,\n.list-group-item.ax-disabled:focus .list-group-item-text {\n  color: #777777;\n}\n\n.list-group-item.active, .list-group-item.ax-active, .list-group-item.active:hover, .list-group-item.ax-active:hover, .list-group-item.active:focus, .list-group-item.ax-active:focus {\n  z-index: 2;\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n\n.list-group-item.active .list-group-item-heading, .list-group-item.ax-active .list-group-item-heading,\n.list-group-item.active .list-group-item-heading > small, .list-group-item.ax-active .list-group-item-heading > small,\n.list-group-item.active .list-group-item-heading > .small, .list-group-item.ax-active .list-group-item-heading > .small, .list-group-item.active:hover .list-group-item-heading, .list-group-item.ax-active:hover .list-group-item-heading,\n.list-group-item.active:hover .list-group-item-heading > small, .list-group-item.ax-active:hover .list-group-item-heading > small,\n.list-group-item.active:hover .list-group-item-heading > .small, .list-group-item.ax-active:hover .list-group-item-heading > .small, .list-group-item.active:focus .list-group-item-heading, .list-group-item.ax-active:focus .list-group-item-heading,\n.list-group-item.active:focus .list-group-item-heading > small, .list-group-item.ax-active:focus .list-group-item-heading > small,\n.list-group-item.active:focus .list-group-item-heading > .small, .list-group-item.ax-active:focus .list-group-item-heading > .small {\n  color: inherit;\n}\n\n.list-group-item.active .list-group-item-text, .list-group-item.ax-active .list-group-item-text, .list-group-item.active:hover .list-group-item-text, .list-group-item.ax-active:hover .list-group-item-text, .list-group-item.active:focus .list-group-item-text, .list-group-item.ax-active:focus .list-group-item-text {\n  color: #c7ddef;\n}\n\n.list-group-item-success {\n  color: #3c763d;\n  background-color: #dff0d8;\n}\n\na.list-group-item-success,\nbutton.list-group-item-success {\n  color: #3c763d;\n}\n\na.list-group-item-success .list-group-item-heading,\nbutton.list-group-item-success .list-group-item-heading {\n  color: inherit;\n}\n\na.list-group-item-success:hover, a.list-group-item-success:focus,\nbutton.list-group-item-success:hover,\nbutton.list-group-item-success:focus {\n  color: #3c763d;\n  background-color: #d0e9c6;\n}\n\na.list-group-item-success.active, a.list-group-item-success.ax-active, a.list-group-item-success.active:hover, a.list-group-item-success.ax-active:hover, a.list-group-item-success.active:focus, a.list-group-item-success.ax-active:focus,\nbutton.list-group-item-success.active,\nbutton.list-group-item-success.ax-active,\nbutton.list-group-item-success.active:hover,\nbutton.list-group-item-success.ax-active:hover,\nbutton.list-group-item-success.active:focus,\nbutton.list-group-item-success.ax-active:focus {\n  color: #fff;\n  background-color: #3c763d;\n  border-color: #3c763d;\n}\n\n.list-group-item-info {\n  color: #31708f;\n  background-color: #d9edf7;\n}\n\na.list-group-item-info,\nbutton.list-group-item-info {\n  color: #31708f;\n}\n\na.list-group-item-info .list-group-item-heading,\nbutton.list-group-item-info .list-group-item-heading {\n  color: inherit;\n}\n\na.list-group-item-info:hover, a.list-group-item-info:focus,\nbutton.list-group-item-info:hover,\nbutton.list-group-item-info:focus {\n  color: #31708f;\n  background-color: #c4e3f3;\n}\n\na.list-group-item-info.active, a.list-group-item-info.ax-active, a.list-group-item-info.active:hover, a.list-group-item-info.ax-active:hover, a.list-group-item-info.active:focus, a.list-group-item-info.ax-active:focus,\nbutton.list-group-item-info.active,\nbutton.list-group-item-info.ax-active,\nbutton.list-group-item-info.active:hover,\nbutton.list-group-item-info.ax-active:hover,\nbutton.list-group-item-info.active:focus,\nbutton.list-group-item-info.ax-active:focus {\n  color: #fff;\n  background-color: #31708f;\n  border-color: #31708f;\n}\n\n.list-group-item-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n}\n\na.list-group-item-warning,\nbutton.list-group-item-warning {\n  color: #8a6d3b;\n}\n\na.list-group-item-warning .list-group-item-heading,\nbutton.list-group-item-warning .list-group-item-heading {\n  color: inherit;\n}\n\na.list-group-item-warning:hover, a.list-group-item-warning:focus,\nbutton.list-group-item-warning:hover,\nbutton.list-group-item-warning:focus {\n  color: #8a6d3b;\n  background-color: #faf2cc;\n}\n\na.list-group-item-warning.active, a.list-group-item-warning.ax-active, a.list-group-item-warning.active:hover, a.list-group-item-warning.ax-active:hover, a.list-group-item-warning.active:focus, a.list-group-item-warning.ax-active:focus,\nbutton.list-group-item-warning.active,\nbutton.list-group-item-warning.ax-active,\nbutton.list-group-item-warning.active:hover,\nbutton.list-group-item-warning.ax-active:hover,\nbutton.list-group-item-warning.active:focus,\nbutton.list-group-item-warning.ax-active:focus {\n  color: #fff;\n  background-color: #8a6d3b;\n  border-color: #8a6d3b;\n}\n\n.list-group-item-danger {\n  color: #a94442;\n  background-color: #f2dede;\n}\n\na.list-group-item-danger,\nbutton.list-group-item-danger {\n  color: #a94442;\n}\n\na.list-group-item-danger .list-group-item-heading,\nbutton.list-group-item-danger .list-group-item-heading {\n  color: inherit;\n}\n\na.list-group-item-danger:hover, a.list-group-item-danger:focus,\nbutton.list-group-item-danger:hover,\nbutton.list-group-item-danger:focus {\n  color: #a94442;\n  background-color: #ebcccc;\n}\n\na.list-group-item-danger.active, a.list-group-item-danger.ax-active, a.list-group-item-danger.active:hover, a.list-group-item-danger.ax-active:hover, a.list-group-item-danger.active:focus, a.list-group-item-danger.ax-active:focus,\nbutton.list-group-item-danger.active,\nbutton.list-group-item-danger.ax-active,\nbutton.list-group-item-danger.active:hover,\nbutton.list-group-item-danger.ax-active:hover,\nbutton.list-group-item-danger.active:focus,\nbutton.list-group-item-danger.ax-active:focus {\n  color: #fff;\n  background-color: #a94442;\n  border-color: #a94442;\n}\n\n.list-group-item-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n\n.list-group-item-text {\n  margin-bottom: 0;\n  line-height: 1.3;\n}\n\n.panel {\n  margin-bottom: 20px;\n  background-color: #fff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);\n}\n\n.panel-body {\n  padding: 15px;\n}\n\n.panel-body:before, .panel-body:after {\n  content: \" \";\n  display: table;\n}\n\n.panel-body:after {\n  clear: both;\n}\n\n.panel-heading {\n  padding: 10px 15px;\n  border-bottom: 1px solid transparent;\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n}\n\n.panel-heading > .dropdown .dropdown-toggle {\n  color: inherit;\n}\n\n.panel-title {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-size: 16px;\n  color: inherit;\n}\n\n.panel-title > a,\n.panel-title > small,\n.panel-title > .small,\n.panel-title > small > a,\n.panel-title > .small > a {\n  color: inherit;\n}\n\n.panel-footer {\n  padding: 10px 15px;\n  background-color: #f5f5f5;\n  border-top: 1px solid #ddd;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n\n.panel > .list-group,\n.panel > .panel-collapse > .list-group {\n  margin-bottom: 0;\n}\n\n.panel > .list-group .list-group-item,\n.panel > .panel-collapse > .list-group .list-group-item {\n  border-width: 1px 0;\n  border-radius: 0;\n}\n\n.panel > .list-group:first-child .list-group-item:first-child,\n.panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {\n  border-top: 0;\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n}\n\n.panel > .list-group:last-child .list-group-item:last-child,\n.panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {\n  border-bottom: 0;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n\n.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n\n.panel-heading + .list-group .list-group-item:first-child {\n  border-top-width: 0;\n}\n\n.list-group + .panel-footer {\n  border-top-width: 0;\n}\n\n.panel > .table,\n.panel > .table-responsive > .table,\n.panel > .panel-collapse > .table {\n  margin-bottom: 0;\n}\n\n.panel > .table caption,\n.panel > .table-responsive > .table caption,\n.panel > .panel-collapse > .table caption {\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n.panel > .table:first-child,\n.panel > .table-responsive:first-child > .table:first-child {\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n}\n\n.panel > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n\n.panel > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {\n  border-top-left-radius: 3px;\n}\n\n.panel > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {\n  border-top-right-radius: 3px;\n}\n\n.panel > .table:last-child,\n.panel > .table-responsive:last-child > .table:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n\n.panel > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {\n  border-bottom-left-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n\n.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {\n  border-bottom-left-radius: 3px;\n}\n\n.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {\n  border-bottom-right-radius: 3px;\n}\n\n.panel > .panel-body + .table,\n.panel > .panel-body + .table-responsive,\n.panel > .table + .panel-body,\n.panel > .table-responsive + .panel-body {\n  border-top: 1px solid #ddd;\n}\n\n.panel > .table > tbody:first-child > tr:first-child th,\n.panel > .table > tbody:first-child > tr:first-child td {\n  border-top: 0;\n}\n\n.panel > .table-bordered,\n.panel > .table-responsive > .table-bordered {\n  border: 0;\n}\n\n.panel > .table-bordered > thead > tr > th:first-child,\n.panel > .table-bordered > thead > tr > td:first-child,\n.panel > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-bordered > tfoot > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n  border-left: 0;\n}\n\n.panel > .table-bordered > thead > tr > th:last-child,\n.panel > .table-bordered > thead > tr > td:last-child,\n.panel > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-bordered > tfoot > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n  border-right: 0;\n}\n\n.panel > .table-bordered > thead > tr:first-child > td,\n.panel > .table-bordered > thead > tr:first-child > th,\n.panel > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-bordered > tbody > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {\n  border-bottom: 0;\n}\n\n.panel > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-bordered > tfoot > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {\n  border-bottom: 0;\n}\n\n.panel > .table-responsive {\n  border: 0;\n  margin-bottom: 0;\n}\n\n.panel-group {\n  margin-bottom: 20px;\n}\n\n.panel-group .panel {\n  margin-bottom: 0;\n  border-radius: 4px;\n}\n\n.panel-group .panel + .panel {\n  margin-top: 5px;\n}\n\n.panel-group .panel-heading {\n  border-bottom: 0;\n}\n\n.panel-group .panel-heading + .panel-collapse > .panel-body,\n.panel-group .panel-heading + .panel-collapse > .list-group {\n  border-top: 1px solid #ddd;\n}\n\n.panel-group .panel-footer {\n  border-top: 0;\n}\n\n.panel-group .panel-footer + .panel-collapse .panel-body {\n  border-bottom: 1px solid #ddd;\n}\n\n.panel-default {\n  border-color: #ddd;\n}\n\n.panel-default > .panel-heading {\n  color: #333333;\n  background-color: #f5f5f5;\n  border-color: #ddd;\n}\n\n.panel-default > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ddd;\n}\n\n.panel-default > .panel-heading .badge {\n  color: #f5f5f5;\n  background-color: #333333;\n}\n\n.panel-default > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ddd;\n}\n\n.panel-primary {\n  border-color: #337ab7;\n}\n\n.panel-primary > .panel-heading {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n\n.panel-primary > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #337ab7;\n}\n\n.panel-primary > .panel-heading .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n\n.panel-primary > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #337ab7;\n}\n\n.panel-success {\n  border-color: #d6e9c6;\n}\n\n.panel-success > .panel-heading {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n}\n\n.panel-success > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #d6e9c6;\n}\n\n.panel-success > .panel-heading .badge {\n  color: #dff0d8;\n  background-color: #3c763d;\n}\n\n.panel-success > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #d6e9c6;\n}\n\n.panel-info {\n  border-color: #bce8f1;\n}\n\n.panel-info > .panel-heading {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n\n.panel-info > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #bce8f1;\n}\n\n.panel-info > .panel-heading .badge {\n  color: #d9edf7;\n  background-color: #31708f;\n}\n\n.panel-info > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #bce8f1;\n}\n\n.panel-warning {\n  border-color: #faebcc;\n}\n\n.panel-warning > .panel-heading {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n\n.panel-warning > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #faebcc;\n}\n\n.panel-warning > .panel-heading .badge {\n  color: #fcf8e3;\n  background-color: #8a6d3b;\n}\n\n.panel-warning > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #faebcc;\n}\n\n.panel-danger {\n  border-color: #ebccd1;\n}\n\n.panel-danger > .panel-heading {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n\n.panel-danger > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ebccd1;\n}\n\n.panel-danger > .panel-heading .badge {\n  color: #f2dede;\n  background-color: #a94442;\n}\n\n.panel-danger > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ebccd1;\n}\n\n.well {\n  min-height: 20px;\n  padding: 19px;\n  margin-bottom: 20px;\n  background-color: #f5f5f5;\n  border: 1px solid #e3e3e3;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);\n}\n\n.well blockquote {\n  border-color: #ddd;\n  border-color: rgba(0, 0, 0, 0.15);\n}\n\n.well-lg {\n  padding: 24px;\n  border-radius: 6px;\n}\n\n.well-sm {\n  padding: 9px;\n  border-radius: 3px;\n}\n\n.close {\n  float: right;\n  font-size: 21px;\n  font-weight: bold;\n  line-height: 1;\n  color: #000;\n  text-shadow: 0 1px 0 #fff;\n  opacity: 0.2;\n  filter: alpha(opacity=20);\n}\n\n.close:hover, .close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n  opacity: 0.5;\n  filter: alpha(opacity=50);\n}\n\nbutton.close {\n  padding: 0;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n  -webkit-appearance: none;\n}\n\n.alert {\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n\n.alert h4 {\n  margin-top: 0;\n  color: inherit;\n}\n\n.alert .alert-link {\n  font-weight: bold;\n}\n\n.alert > p,\n.alert > ul {\n  margin-bottom: 0;\n}\n\n.alert > p + p {\n  margin-top: 5px;\n}\n\n.alert-dismissable,\n.alert-dismissible {\n  padding-right: 35px;\n}\n\n.alert-dismissable .close,\n.alert-dismissible .close {\n  position: relative;\n  top: -2px;\n  right: -21px;\n  color: inherit;\n}\n\n.alert-success {\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n  color: #3c763d;\n}\n\n.alert-success hr {\n  border-top-color: #c9e2b3;\n}\n\n.alert-success .alert-link {\n  color: #2b542c;\n}\n\n.alert-info {\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n  color: #31708f;\n}\n\n.alert-info hr {\n  border-top-color: #a6e1ec;\n}\n\n.alert-info .alert-link {\n  color: #245269;\n}\n\n.alert-warning {\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n  color: #8a6d3b;\n}\n\n.alert-warning hr {\n  border-top-color: #f7e1b5;\n}\n\n.alert-warning .alert-link {\n  color: #66512c;\n}\n\n.alert-danger {\n  background-color: #f2dede;\n  border-color: #ebccd1;\n  color: #a94442;\n}\n\n.alert-danger hr {\n  border-top-color: #e4b9c0;\n}\n\n.alert-danger .alert-link {\n  color: #843534;\n}\n\n.modal-open {\n  overflow: hidden;\n}\n\n.modal {\n  display: none;\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  -webkit-overflow-scrolling: touch;\n  outline: 0;\n}\n\n.modal.fade .modal-dialog {\n  -webkit-transform: translate(0, -25%);\n  -ms-transform: translate(0, -25%);\n  transform: translate(0, -25%);\n  -webkit-transition: -webkit-transform 0.3s ease-out;\n  transition: -webkit-transform 0.3s ease-out;\n  transition: transform 0.3s ease-out;\n  transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;\n}\n\n.modal.in .modal-dialog {\n  -webkit-transform: translate(0, 0);\n  -ms-transform: translate(0, 0);\n  transform: translate(0, 0);\n}\n\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 10px;\n}\n\n.modal-content {\n  position: relative;\n  background-color: #fff;\n  border: 1px solid #999;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);\n  background-clip: padding-box;\n  outline: 0;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000;\n}\n\n.modal-backdrop.fade {\n  opacity: 0;\n  filter: alpha(opacity=0);\n}\n\n.modal-backdrop.in {\n  opacity: 0.5;\n  filter: alpha(opacity=50);\n}\n\n.modal-header {\n  padding: 15px;\n  border-bottom: 1px solid #e5e5e5;\n}\n\n.modal-header:before, .modal-header:after {\n  content: \" \";\n  display: table;\n}\n\n.modal-header:after {\n  clear: both;\n}\n\n.modal-header .close {\n  margin-top: -2px;\n}\n\n.modal-title {\n  margin: 0;\n  line-height: 1.428571429;\n}\n\n.modal-body {\n  position: relative;\n  padding: 15px;\n}\n\n.modal-footer {\n  padding: 15px;\n  text-align: right;\n  border-top: 1px solid #e5e5e5;\n}\n\n.modal-footer:before, .modal-footer:after {\n  content: \" \";\n  display: table;\n}\n\n.modal-footer:after {\n  clear: both;\n}\n\n.modal-footer .btn + .btn {\n  margin-left: 5px;\n  margin-bottom: 0;\n}\n\n.modal-footer .btn-group .btn + .btn {\n  margin-left: -1px;\n}\n\n.modal-footer .btn-block + .btn-block {\n  margin-left: 0;\n}\n\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n\n@media (min-width: 768px) {\n  .modal-dialog {\n    width: 600px;\n    margin: 30px auto;\n  }\n  .modal-content {\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  }\n  .modal-sm {\n    width: 300px;\n  }\n}\n\n@media (min-width: 992px) {\n  .modal-lg {\n    width: 900px;\n  }\n}\n\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  letter-spacing: normal;\n  line-break: auto;\n  line-height: 1.428571429;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  white-space: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  font-size: 12px;\n  opacity: 0;\n  filter: alpha(opacity=0);\n}\n\n.tooltip.in {\n  opacity: 0.9;\n  filter: alpha(opacity=90);\n}\n\n.tooltip.top {\n  margin-top: -3px;\n  padding: 5px 0;\n}\n\n.tooltip.right {\n  margin-left: 3px;\n  padding: 0 5px;\n}\n\n.tooltip.bottom {\n  margin-top: 3px;\n  padding: 5px 0;\n}\n\n.tooltip.left {\n  margin-left: -3px;\n  padding: 0 5px;\n}\n\n.tooltip-inner {\n  max-width: 200px;\n  padding: 3px 8px;\n  color: #fff;\n  text-align: center;\n  background-color: #000;\n  border-radius: 4px;\n}\n\n.tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n\n.tooltip.top .tooltip-arrow {\n  bottom: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n\n.tooltip.top-left .tooltip-arrow {\n  bottom: 0;\n  right: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n\n.tooltip.top-right .tooltip-arrow {\n  bottom: 0;\n  left: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n\n.tooltip.right .tooltip-arrow {\n  top: 50%;\n  left: 0;\n  margin-top: -5px;\n  border-width: 5px 5px 5px 0;\n  border-right-color: #000;\n}\n\n.tooltip.left .tooltip-arrow {\n  top: 50%;\n  right: 0;\n  margin-top: -5px;\n  border-width: 5px 0 5px 5px;\n  border-left-color: #000;\n}\n\n.tooltip.bottom .tooltip-arrow {\n  top: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n\n.tooltip.bottom-left .tooltip-arrow {\n  top: 0;\n  right: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n\n.tooltip.bottom-right .tooltip-arrow {\n  top: 0;\n  left: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: none;\n  max-width: 276px;\n  padding: 1px;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  letter-spacing: normal;\n  line-break: auto;\n  line-height: 1.428571429;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  white-space: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  font-size: 14px;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n}\n\n.popover.top {\n  margin-top: -10px;\n}\n\n.popover.right {\n  margin-left: 10px;\n}\n\n.popover.bottom {\n  margin-top: 10px;\n}\n\n.popover.left {\n  margin-left: -10px;\n}\n\n.popover-title {\n  margin: 0;\n  padding: 8px 14px;\n  font-size: 14px;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-radius: 5px 5px 0 0;\n}\n\n.popover-content {\n  padding: 9px 14px;\n}\n\n.popover > .arrow, .popover > .arrow:after {\n  position: absolute;\n  display: block;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n\n.popover > .arrow {\n  border-width: 11px;\n}\n\n.popover > .arrow:after {\n  border-width: 10px;\n  content: \"\";\n}\n\n.popover.top > .arrow {\n  left: 50%;\n  margin-left: -11px;\n  border-bottom-width: 0;\n  border-top-color: #999999;\n  border-top-color: rgba(0, 0, 0, 0.25);\n  bottom: -11px;\n}\n\n.popover.top > .arrow:after {\n  content: \" \";\n  bottom: 1px;\n  margin-left: -10px;\n  border-bottom-width: 0;\n  border-top-color: #fff;\n}\n\n.popover.right > .arrow {\n  top: 50%;\n  left: -11px;\n  margin-top: -11px;\n  border-left-width: 0;\n  border-right-color: #999999;\n  border-right-color: rgba(0, 0, 0, 0.25);\n}\n\n.popover.right > .arrow:after {\n  content: \" \";\n  left: 1px;\n  bottom: -10px;\n  border-left-width: 0;\n  border-right-color: #fff;\n}\n\n.popover.bottom > .arrow {\n  left: 50%;\n  margin-left: -11px;\n  border-top-width: 0;\n  border-bottom-color: #999999;\n  border-bottom-color: rgba(0, 0, 0, 0.25);\n  top: -11px;\n}\n\n.popover.bottom > .arrow:after {\n  content: \" \";\n  top: 1px;\n  margin-left: -10px;\n  border-top-width: 0;\n  border-bottom-color: #fff;\n}\n\n.popover.left > .arrow {\n  top: 50%;\n  right: -11px;\n  margin-top: -11px;\n  border-right-width: 0;\n  border-left-color: #999999;\n  border-left-color: rgba(0, 0, 0, 0.25);\n}\n\n.popover.left > .arrow:after {\n  content: \" \";\n  right: 1px;\n  border-right-width: 0;\n  border-left-color: #fff;\n  bottom: -10px;\n}\n\n.carousel {\n  position: relative;\n}\n\n.carousel-inner {\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n}\n\n.carousel-inner > .item {\n  display: none;\n  position: relative;\n  -webkit-transition: 0.6s ease-in-out left;\n  transition: 0.6s ease-in-out left;\n}\n\n.carousel-inner > .item > img,\n.carousel-inner > .item > a > img {\n  display: block;\n  max-width: 100%;\n  height: auto;\n  line-height: 1;\n}\n\n@media all and (transform-3d), (-webkit-transform-3d) {\n  .carousel-inner > .item {\n    -webkit-transition: -webkit-transform 0.6s ease-in-out;\n    transition: -webkit-transform 0.6s ease-in-out;\n    transition: transform 0.6s ease-in-out;\n    transition: transform 0.6s ease-in-out, -webkit-transform 0.6s ease-in-out;\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n    -webkit-perspective: 1000px;\n    perspective: 1000px;\n  }\n  .carousel-inner > .item.next, .carousel-inner > .item.active.right, .carousel-inner > .item.right.ax-active {\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n    left: 0;\n  }\n  .carousel-inner > .item.prev, .carousel-inner > .item.active.left, .carousel-inner > .item.left.ax-active {\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n    left: 0;\n  }\n  .carousel-inner > .item.next.left, .carousel-inner > .item.prev.right, .carousel-inner > .item.active, .carousel-inner > .item.ax-active {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    left: 0;\n  }\n}\n\n.carousel-inner > .active, .carousel-inner > .ax-active,\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  display: block;\n}\n\n.carousel-inner > .active, .carousel-inner > .ax-active {\n  left: 0;\n}\n\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n\n.carousel-inner > .next {\n  left: 100%;\n}\n\n.carousel-inner > .prev {\n  left: -100%;\n}\n\n.carousel-inner > .next.left,\n.carousel-inner > .prev.right {\n  left: 0;\n}\n\n.carousel-inner > .active.left, .carousel-inner > .left.ax-active {\n  left: -100%;\n}\n\n.carousel-inner > .active.right, .carousel-inner > .right.ax-active {\n  left: 100%;\n}\n\n.carousel-control {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 15%;\n  opacity: 0.5;\n  filter: alpha(opacity=50);\n  font-size: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);\n  background-color: transparent;\n}\n\n.carousel-control.left {\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);\n}\n\n.carousel-control.right {\n  left: auto;\n  right: 0;\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);\n}\n\n.carousel-control:hover, .carousel-control:focus {\n  outline: 0;\n  color: #fff;\n  text-decoration: none;\n  opacity: 0.9;\n  filter: alpha(opacity=90);\n}\n\n.carousel-control .icon-prev,\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-left,\n.carousel-control .glyphicon-chevron-right {\n  position: absolute;\n  top: 50%;\n  margin-top: -10px;\n  z-index: 5;\n  display: inline-block;\n}\n\n.carousel-control .icon-prev,\n.carousel-control .glyphicon-chevron-left {\n  left: 50%;\n  margin-left: -10px;\n}\n\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-right {\n  right: 50%;\n  margin-right: -10px;\n}\n\n.carousel-control .icon-prev,\n.carousel-control .icon-next {\n  width: 20px;\n  height: 20px;\n  line-height: 1;\n  font-family: serif;\n}\n\n.carousel-control .icon-prev:before {\n  content: '\\2039';\n}\n\n.carousel-control .icon-next:before {\n  content: '\\203A';\n}\n\n.carousel-indicators {\n  position: absolute;\n  bottom: 10px;\n  left: 50%;\n  z-index: 15;\n  width: 60%;\n  margin-left: -30%;\n  padding-left: 0;\n  list-style: none;\n  text-align: center;\n}\n\n.carousel-indicators li {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin: 1px;\n  text-indent: -999px;\n  border: 1px solid #fff;\n  border-radius: 10px;\n  cursor: pointer;\n  background-color: #000 \\9;\n  background-color: transparent;\n}\n\n.carousel-indicators .active, .carousel-indicators .ax-active {\n  margin: 0;\n  width: 12px;\n  height: 12px;\n  background-color: #fff;\n}\n\n.carousel-caption {\n  position: absolute;\n  left: 15%;\n  right: 15%;\n  bottom: 20px;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);\n}\n\n.carousel-caption .btn {\n  text-shadow: none;\n}\n\n@media screen and (min-width: 768px) {\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-prev,\n  .carousel-control .icon-next {\n    width: 30px;\n    height: 30px;\n    margin-top: -10px;\n    font-size: 30px;\n  }\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .icon-prev {\n    margin-left: -10px;\n  }\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-next {\n    margin-right: -10px;\n  }\n  .carousel-caption {\n    left: 20%;\n    right: 20%;\n    padding-bottom: 30px;\n  }\n  .carousel-indicators {\n    bottom: 20px;\n  }\n}\n\n.clearfix:before, .clearfix:after {\n  content: \" \";\n  display: table;\n}\n\n.clearfix:after {\n  clear: both;\n}\n\n.center-block {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.pull-right {\n  float: right !important;\n}\n\n.pull-left {\n  float: left !important;\n}\n\n.hide {\n  display: none !important;\n}\n\n.show, .ax-show {\n  display: block !important;\n}\n\n.invisible, .ax-invisible {\n  visibility: hidden;\n}\n\n.text-hide, .ax-text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n\n.hidden, .ax-hide, .ax-omitted {\n  display: none !important;\n}\n\n.affix {\n  position: fixed;\n}\n\n@-ms-viewport {\n  width: device-width;\n}\n\n.visible-xs {\n  display: none !important;\n}\n\n.visible-sm {\n  display: none !important;\n}\n\n.visible-md {\n  display: none !important;\n}\n\n.visible-lg {\n  display: none !important;\n}\n\n.visible-xs-block,\n.visible-xs-inline,\n.visible-xs-inline-block,\n.visible-sm-block,\n.visible-sm-inline,\n.visible-sm-inline-block,\n.visible-md-block,\n.visible-md-inline,\n.visible-md-inline-block,\n.visible-lg-block,\n.visible-lg-inline,\n.visible-lg-inline-block {\n  display: none !important;\n}\n\n@media (max-width: 767px) {\n  .visible-xs {\n    display: block !important;\n  }\n  table.visible-xs {\n    display: table !important;\n  }\n  tr.visible-xs {\n    display: table-row !important;\n  }\n  th.visible-xs,\n  td.visible-xs {\n    display: table-cell !important;\n  }\n}\n\n@media (max-width: 767px) {\n  .visible-xs-block {\n    display: block !important;\n  }\n}\n\n@media (max-width: 767px) {\n  .visible-xs-inline {\n    display: inline !important;\n  }\n}\n\n@media (max-width: 767px) {\n  .visible-xs-inline-block {\n    display: inline-block !important;\n  }\n}\n\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm {\n    display: block !important;\n  }\n  table.visible-sm {\n    display: table !important;\n  }\n  tr.visible-sm {\n    display: table-row !important;\n  }\n  th.visible-sm,\n  td.visible-sm {\n    display: table-cell !important;\n  }\n}\n\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-block {\n    display: block !important;\n  }\n}\n\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline {\n    display: inline !important;\n  }\n}\n\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline-block {\n    display: inline-block !important;\n  }\n}\n\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md {\n    display: block !important;\n  }\n  table.visible-md {\n    display: table !important;\n  }\n  tr.visible-md {\n    display: table-row !important;\n  }\n  th.visible-md,\n  td.visible-md {\n    display: table-cell !important;\n  }\n}\n\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-block {\n    display: block !important;\n  }\n}\n\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline {\n    display: inline !important;\n  }\n}\n\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline-block {\n    display: inline-block !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .visible-lg {\n    display: block !important;\n  }\n  table.visible-lg {\n    display: table !important;\n  }\n  tr.visible-lg {\n    display: table-row !important;\n  }\n  th.visible-lg,\n  td.visible-lg {\n    display: table-cell !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .visible-lg-block {\n    display: block !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .visible-lg-inline {\n    display: inline !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .visible-lg-inline-block {\n    display: inline-block !important;\n  }\n}\n\n@media (max-width: 767px) {\n  .hidden-xs {\n    display: none !important;\n  }\n}\n\n@media (min-width: 768px) and (max-width: 991px) {\n  .hidden-sm {\n    display: none !important;\n  }\n}\n\n@media (min-width: 992px) and (max-width: 1199px) {\n  .hidden-md {\n    display: none !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .hidden-lg {\n    display: none !important;\n  }\n}\n\n.visible-print {\n  display: none !important;\n}\n\n@media print {\n  .visible-print {\n    display: block !important;\n  }\n  table.visible-print {\n    display: table !important;\n  }\n  tr.visible-print {\n    display: table-row !important;\n  }\n  th.visible-print,\n  td.visible-print {\n    display: table-cell !important;\n  }\n}\n\n.visible-print-block {\n  display: none !important;\n}\n\n@media print {\n  .visible-print-block {\n    display: block !important;\n  }\n}\n\n.visible-print-inline {\n  display: none !important;\n}\n\n@media print {\n  .visible-print-inline {\n    display: inline !important;\n  }\n}\n\n.visible-print-inline-block {\n  display: none !important;\n}\n\n@media print {\n  .visible-print-inline-block {\n    display: inline-block !important;\n  }\n}\n\n@media print {\n  .hidden-print {\n    display: none !important;\n  }\n}\n\n@-webkit-keyframes ax-spin-around {\n  from {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes ax-spin-around {\n  from {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n.ax-invisible {\n  visibility: hidden !important;\n}\n\n[readonly],\n.ax-readonly {\n  color: #555555 !important;\n  cursor: default !important;\n}\n\n[disabled],\n.ax-disabled {\n  cursor: default !important;\n  pointer-events: none;\n  color: #555555 !important;\n}\n\n.ax-error {\n  color: #a94442 !important;\n}\n\nselect[readonly], select.ax-readonly,\ntextarea[readonly],\ntextarea.ax-readonly,\ninput[type=\"text\"][readonly],\ninput[type=\"text\"].ax-readonly {\n  background: #777777;\n  border-color: #555555;\n}\n\nselect[disabled], select.ax-disabled,\ntextarea[disabled],\ntextarea.ax-disabled,\ninput[type=\"text\"][disabled],\ninput[type=\"text\"].ax-disabled {\n  background: #777777;\n  border-color: #555555;\n}\n\nselect.ax-error,\ntextarea.ax-error,\ninput[type=\"text\"].ax-error {\n  background: transparent;\n  border-color: #a94442;\n}\n\n.table .ax-error {\n  color: #a94442 !important;\n}\n\n.table input[type=\"text\"][readonly],\n.table input[type=\"text\"][readonly] .ax-error, .table input[type=\"text\"].ax-readonly,\n.table input[type=\"text\"].ax-readonly .ax-error, .table input[type=\"text\"][disabled],\n.table input[type=\"text\"][disabled] .ax-error, .table input[type=\"text\"].ax-disabled,\n.table input[type=\"text\"].ax-disabled .ax-error {\n  border-color: transparent !important;\n}\n\n.ax-icon-previous:before {\n  content: \"\\F0A8\";\n}\n\n.ax-icon-previous-primary:before {\n  content: \"\\F0A8\";\n}\n\n.ax-icon-next:before {\n  content: \"\\F0A9\";\n}\n\n.ax-icon-next-primary:before {\n  content: \"\\F0A9\";\n}\n\n.ax-icon-add:before {\n  content: \"\\F067\";\n}\n\n.ax-icon-delete:before {\n  content: \"\\F057\";\n}\n\n.ax-icon-ok:before {\n  content: \"\\F058\";\n}\n\n.ax-icon-apply:before {\n  content: \"\\F058\";\n}\n\n.ax-icon-cancel:before {\n  content: \"\\F057\";\n}\n\n.ax-icon-yes:before {\n  content: \"\\F058\";\n}\n\n.ax-icon-no:before {\n  content: \"\\F057\";\n}\n\n.ax-icon-finish:before {\n  content: \"\\F058\";\n}\n\n.ax-icon-info:before {\n  content: \"\\F05A\";\n}\n\n.ax-icon-warn:before {\n  content: \"\\F071\";\n}\n\n.ax-icon-help:before {\n  content: \"\\F059\";\n}\n\n.ax-icon-print:before {\n  content: \"\\F02F\";\n}\n\n.ax-text-ellipsis {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n/*# sourceMappingURL=theme.css.map */", ""]);

// exports


/***/ }),
/* 97 */,
/* 98 */,
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/glyphicons-halflings-regular.ttf";

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/glyphicons-halflings-regular.woff";

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/glyphicons-halflings-regular.woff2";

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/fontawesome-webfont.eot";

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/fontawesome-webfont.eot";

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/fontawesome-webfont.ttf";

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/fontawesome-webfont.woff2";

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/fontawesome-webfont.woff";

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/glyphicons-halflings-regular.svg";

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/fontawesome-webfont.svg";

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var resource = __webpack_require__( 111 );
module.exports = typeof resource === 'string' ? resource : null;

/***/ }),
/* 110 */
/***/ (function(module, exports) {

/**
 * Expose `pathtoRegexp`.
 */

module.exports = pathtoRegexp;

/**
 * Match matching groups in a regular expression.
 */
var MATCHING_GROUP_REGEXP = /\((?!\?)/g;

/**
 * Normalize the given path string,
 * returning a regular expression.
 *
 * An empty array should be passed,
 * which will contain the placeholder
 * key names. For example "/user/:id" will
 * then contain ["id"].
 *
 * @param  {String|RegExp|Array} path
 * @param  {Array} keys
 * @param  {Object} options
 * @return {RegExp}
 * @api private
 */

function pathtoRegexp(path, keys, options) {
  options = options || {};
  keys = keys || [];
  var strict = options.strict;
  var end = options.end !== false;
  var flags = options.sensitive ? '' : 'i';
  var extraOffset = 0;
  var keysOffset = keys.length;
  var i = 0;
  var name = 0;
  var m;

  if (path instanceof RegExp) {
    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {
      keys.push({
        name: name++,
        optional: false,
        offset: m.index
      });
    }

    return path;
  }

  if (Array.isArray(path)) {
    // Map array parts into regexps and return their source. We also pass
    // the same keys and options instance into every generation to get
    // consistent matching groups before we join the sources together.
    path = path.map(function (value) {
      return pathtoRegexp(value, keys, options).source;
    });

    return new RegExp('(?:' + path.join('|') + ')', flags);
  }

  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))
    .replace(/\/\(/g, '/(?:')
    .replace(/([\/\.])/g, '\\$1')
    .replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {
      slash = slash || '';
      format = format || '';
      capture = capture || '([^\\/' + format + ']+?)';
      optional = optional || '';

      keys.push({
        name: key,
        optional: !!optional,
        offset: offset + extraOffset
      });

      var result = ''
        + (optional ? '' : slash)
        + '(?:'
        + format + (optional ? slash : '') + capture
        + (star ? '((?:[\\/' + format + '].+?)?)' : '')
        + ')'
        + optional;

      extraOffset += result.length - match.length;

      return result;
    })
    .replace(/\*/g, function (star, index) {
      var len = keys.length

      while (len-- > keysOffset && keys[len].offset > index) {
        keys[len].offset += 3; // Replacement length minus asterisk length.
      }

      return '(.*)';
    });

  // This is a workaround for handling unnamed matching groups.
  while (m = MATCHING_GROUP_REGEXP.exec(path)) {
    var escapeCount = 0;
    var index = m.index;

    while (path.charAt(--index) === '\\') {
      escapeCount++;
    }

    // It's possible to escape the bracket.
    if (escapeCount % 2 === 1) {
      continue;
    }

    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
      keys.splice(keysOffset + i, 0, {
        name: name++, // Unnamed matching groups must be consistently linear.
        optional: false,
        offset: m.index
      });
    }

    i++;
  }

  // If the path is non-ending, match until the end or a slash.
  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\/|$)'));

  return new RegExp(path, flags);
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(96);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(65)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!./../../../../../node_modules/css-loader/index.js!./theme.css", function() {
			var newContent = require("!!./../../../../../node_modules/css-loader/index.js!./theme.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 112 */,
/* 113 */,
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * json-patch-duplex.js version: 1.1.4
 * (c) 2013 Joachim Wester
 * MIT license
 */
var jsonpatch;
(function (jsonpatch) {
    var _objectKeys = function (obj) {
        if (_isArray(obj)) {
            var keys = new Array(obj.length);
            for (var k = 0; k < keys.length; k++) {
                keys[k] = "" + k;
            }
            return keys;
        }
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var i in obj) {
            if (obj.hasOwnProperty(i)) {
                keys.push(i);
            }
        }
        return keys;
    };
    function _equals(a, b) {
        switch (typeof a) {
            case 'undefined': //backward compatibility, but really I think we should return false
            case 'boolean':
            case 'string':
            case 'number':
                return a === b;
            case 'object':
                if (a === null)
                    return b === null;
                if (_isArray(a)) {
                    if (!_isArray(b) || a.length !== b.length)
                        return false;
                    for (var i = 0, l = a.length; i < l; i++)
                        if (!_equals(a[i], b[i]))
                            return false;
                    return true;
                }
                var bKeys = _objectKeys(b);
                var bLength = bKeys.length;
                if (_objectKeys(a).length !== bLength)
                    return false;
                for (var i = 0; i < bLength; i++)
                    if (!_equals(a[i], b[i]))
                        return false;
                return true;
            default:
                return false;
        }
    }
    /* We use a Javascript hash to store each
     function. Each hash entry (property) uses
     the operation identifiers specified in rfc6902.
     In this way, we can map each patch operation
     to its dedicated function in efficient way.
     */
    /* The operations applicable to an object */
    var objOps = {
        add: function (obj, key) {
            obj[key] = this.value;
        },
        remove: function (obj, key) {
            var removed = obj[key];
            delete obj[key];
            return removed;
        },
        replace: function (obj, key) {
            var removed = obj[key];
            obj[key] = this.value;
            return removed;
        },
        move: function (obj, key, tree) {
            var getOriginalDestination = { op: "_get", path: this.path };
            apply(tree, [getOriginalDestination]);
            // In case value is moved up and overwrites its ancestor
            var original = getOriginalDestination.value === undefined ?
                undefined : JSON.parse(JSON.stringify(getOriginalDestination.value));
            var temp = { op: "_get", path: this.from };
            apply(tree, [temp]);
            apply(tree, [
                { op: "remove", path: this.from }
            ]);
            apply(tree, [
                { op: "add", path: this.path, value: temp.value }
            ]);
            return original;
        },
        copy: function (obj, key, tree) {
            var temp = { op: "_get", path: this.from };
            apply(tree, [temp]);
            apply(tree, [
                { op: "add", path: this.path, value: temp.value }
            ]);
        },
        test: function (obj, key) {
            return _equals(obj[key], this.value);
        },
        _get: function (obj, key) {
            this.value = obj[key];
        }
    };
    /* The operations applicable to an array. Many are the same as for the object */
    var arrOps = {
        add: function (arr, i) {
            arr.splice(i, 0, this.value);
            // this may be needed when using '-' in an array
            return i;
        },
        remove: function (arr, i) {
            var removedList = arr.splice(i, 1);
            return removedList[0];
        },
        replace: function (arr, i) {
            var removed = arr[i];
            arr[i] = this.value;
            return removed;
        },
        move: objOps.move,
        copy: objOps.copy,
        test: objOps.test,
        _get: objOps._get
    };
    /* The operations applicable to object root. Many are the same as for the object */
    var rootOps = {
        add: function (obj) {
            rootOps.remove.call(this, obj);
            for (var key in this.value) {
                if (this.value.hasOwnProperty(key)) {
                    obj[key] = this.value[key];
                }
            }
        },
        remove: function (obj) {
            var removed = {};
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    removed[key] = obj[key];
                    objOps.remove.call(this, obj, key);
                }
            }
            return removed;
        },
        replace: function (obj) {
            var removed = apply(obj, [
                { op: "remove", path: this.path }
            ]);
            apply(obj, [
                { op: "add", path: this.path, value: this.value }
            ]);
            return removed[0];
        },
        move: objOps.move,
        copy: objOps.copy,
        test: function (obj) {
            return (JSON.stringify(obj) === JSON.stringify(this.value));
        },
        _get: function (obj) {
            this.value = obj;
        }
    };
    function escapePathComponent(str) {
        if (str.indexOf('/') === -1 && str.indexOf('~') === -1)
            return str;
        return str.replace(/~/g, '~0').replace(/\//g, '~1');
    }
    function _getPathRecursive(root, obj) {
        var found;
        for (var key in root) {
            if (root.hasOwnProperty(key)) {
                if (root[key] === obj) {
                    return escapePathComponent(key) + '/';
                }
                else if (typeof root[key] === 'object') {
                    found = _getPathRecursive(root[key], obj);
                    if (found != '') {
                        return escapePathComponent(key) + '/' + found;
                    }
                }
            }
        }
        return '';
    }
    function getPath(root, obj) {
        if (root === obj) {
            return '/';
        }
        var path = _getPathRecursive(root, obj);
        if (path === '') {
            throw new Error("Object not found in root");
        }
        return '/' + path;
    }
    var beforeDict = [];
    var Mirror = (function () {
        function Mirror(obj) {
            this.observers = [];
            this.obj = obj;
        }
        return Mirror;
    }());
    var ObserverInfo = (function () {
        function ObserverInfo(callback, observer) {
            this.callback = callback;
            this.observer = observer;
        }
        return ObserverInfo;
    }());
    function getMirror(obj) {
        for (var i = 0, ilen = beforeDict.length; i < ilen; i++) {
            if (beforeDict[i].obj === obj) {
                return beforeDict[i];
            }
        }
    }
    function getObserverFromMirror(mirror, callback) {
        for (var j = 0, jlen = mirror.observers.length; j < jlen; j++) {
            if (mirror.observers[j].callback === callback) {
                return mirror.observers[j].observer;
            }
        }
    }
    function removeObserverFromMirror(mirror, observer) {
        for (var j = 0, jlen = mirror.observers.length; j < jlen; j++) {
            if (mirror.observers[j].observer === observer) {
                mirror.observers.splice(j, 1);
                return;
            }
        }
    }
    function unobserve(root, observer) {
        observer.unobserve();
    }
    jsonpatch.unobserve = unobserve;
    function deepClone(obj) {
        switch (typeof obj) {
            case "object":
                return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5
            case "undefined":
                return null; //this is how JSON.stringify behaves for array items
            default:
                return obj; //no need to clone primitives
        }
    }
    function observe(obj, callback) {
        var patches = [];
        var root = obj;
        var observer;
        var mirror = getMirror(obj);
        if (!mirror) {
            mirror = new Mirror(obj);
            beforeDict.push(mirror);
        }
        else {
            observer = getObserverFromMirror(mirror, callback);
        }
        if (observer) {
            return observer;
        }
        observer = {};
        mirror.value = deepClone(obj);
        if (callback) {
            observer.callback = callback;
            observer.next = null;
            var dirtyCheck = function () {
                generate(observer);
            };
            var fastCheck = function () {
                clearTimeout(observer.next);
                observer.next = setTimeout(dirtyCheck);
            };
            if (typeof window !== 'undefined') {
                if (window.addEventListener) {
                    window.addEventListener('mouseup', fastCheck);
                    window.addEventListener('keyup', fastCheck);
                    window.addEventListener('mousedown', fastCheck);
                    window.addEventListener('keydown', fastCheck);
                    window.addEventListener('change', fastCheck);
                }
                else {
                    document.documentElement.attachEvent('onmouseup', fastCheck);
                    document.documentElement.attachEvent('onkeyup', fastCheck);
                    document.documentElement.attachEvent('onmousedown', fastCheck);
                    document.documentElement.attachEvent('onkeydown', fastCheck);
                    document.documentElement.attachEvent('onchange', fastCheck);
                }
            }
        }
        observer.patches = patches;
        observer.object = obj;
        observer.unobserve = function () {
            generate(observer);
            clearTimeout(observer.next);
            removeObserverFromMirror(mirror, observer);
            if (typeof window !== 'undefined') {
                if (window.removeEventListener) {
                    window.removeEventListener('mouseup', fastCheck);
                    window.removeEventListener('keyup', fastCheck);
                    window.removeEventListener('mousedown', fastCheck);
                    window.removeEventListener('keydown', fastCheck);
                }
                else {
                    document.documentElement.detachEvent('onmouseup', fastCheck);
                    document.documentElement.detachEvent('onkeyup', fastCheck);
                    document.documentElement.detachEvent('onmousedown', fastCheck);
                    document.documentElement.detachEvent('onkeydown', fastCheck);
                }
            }
        };
        mirror.observers.push(new ObserverInfo(callback, observer));
        return observer;
    }
    jsonpatch.observe = observe;
    function generate(observer) {
        var mirror;
        for (var i = 0, ilen = beforeDict.length; i < ilen; i++) {
            if (beforeDict[i].obj === observer.object) {
                mirror = beforeDict[i];
                break;
            }
        }
        _generate(mirror.value, observer.object, observer.patches, "");
        if (observer.patches.length) {
            apply(mirror.value, observer.patches);
        }
        var temp = observer.patches;
        if (temp.length > 0) {
            observer.patches = [];
            if (observer.callback) {
                observer.callback(temp);
            }
        }
        return temp;
    }
    jsonpatch.generate = generate;
    // Dirty check if obj is different from mirror, generate patches and update mirror
    function _generate(mirror, obj, patches, path) {
        var newKeys = _objectKeys(obj);
        var oldKeys = _objectKeys(mirror);
        var changed = false;
        var deleted = false;
        //if ever "move" operation is implemented here, make sure this test runs OK: "should not generate the same patch twice (move)"
        for (var t = oldKeys.length - 1; t >= 0; t--) {
            var key = oldKeys[t];
            var oldVal = mirror[key];
            if (obj.hasOwnProperty(key) && !(obj[key] === undefined && oldVal !== undefined && _isArray(obj) === false)) {
                var newVal = obj[key];
                if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null) {
                    _generate(oldVal, newVal, patches, path + "/" + escapePathComponent(key));
                }
                else {
                    if (oldVal !== newVal) {
                        changed = true;
                        patches.push({ op: "replace", path: path + "/" + escapePathComponent(key), value: deepClone(newVal) });
                    }
                }
            }
            else {
                patches.push({ op: "remove", path: path + "/" + escapePathComponent(key) });
                deleted = true; // property has been deleted
            }
        }
        if (!deleted && newKeys.length == oldKeys.length) {
            return;
        }
        for (var t = 0; t < newKeys.length; t++) {
            var key = newKeys[t];
            if (!mirror.hasOwnProperty(key) && obj[key] !== undefined) {
                patches.push({ op: "add", path: path + "/" + escapePathComponent(key), value: deepClone(obj[key]) });
            }
        }
    }
    var _isArray;
    if (Array.isArray) {
        _isArray = Array.isArray;
    }
    else {
        _isArray = function (obj) {
            return obj.push && typeof obj.length === 'number';
        };
    }
    //3x faster than cached /^\d+$/.test(str)
    function isInteger(str) {
        var i = 0;
        var len = str.length;
        var charCode;
        while (i < len) {
            charCode = str.charCodeAt(i);
            if (charCode >= 48 && charCode <= 57) {
                i++;
                continue;
            }
            return false;
        }
        return true;
    }
    /**
     * Apply a json-patch operation on an object tree
     * Returns an array of results of operations.
     * Each element can either be a boolean (if op == 'test') or
     * the removed object (operations that remove things)
     * or just be undefined
     */
    function apply(tree, patches, validate) {
        var results = [], p = 0, plen = patches.length, patch, key;
        while (p < plen) {
            patch = patches[p];
            p++;
            // Find the object
            var path = patch.path || "";
            var keys = path.split('/');
            var obj = tree;
            var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift
            var len = keys.length;
            var existingPathFragment = undefined;
            while (true) {
                key = keys[t];
                if (validate) {
                    if (existingPathFragment === undefined) {
                        if (obj[key] === undefined) {
                            existingPathFragment = keys.slice(0, t).join('/');
                        }
                        else if (t == len - 1) {
                            existingPathFragment = patch.path;
                        }
                        if (existingPathFragment !== undefined) {
                            this.validator(patch, p - 1, tree, existingPathFragment);
                        }
                    }
                }
                t++;
                if (key === undefined) {
                    if (t >= len) {
                        results.push(rootOps[patch.op].call(patch, obj, key, tree)); // Apply patch
                        break;
                    }
                }
                if (_isArray(obj)) {
                    if (key === '-') {
                        key = obj.length;
                    }
                    else {
                        if (validate && !isInteger(key)) {
                            throw new JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", p - 1, patch.path, patch);
                        }
                        key = parseInt(key, 10);
                    }
                    if (t >= len) {
                        if (validate && patch.op === "add" && key > obj.length) {
                            throw new JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", p - 1, patch.path, patch);
                        }
                        results.push(arrOps[patch.op].call(patch, obj, key, tree)); // Apply patch
                        break;
                    }
                }
                else {
                    if (key && key.indexOf('~') != -1)
                        key = key.replace(/~1/g, '/').replace(/~0/g, '~'); // escape chars
                    if (t >= len) {
                        results.push(objOps[patch.op].call(patch, obj, key, tree)); // Apply patch
                        break;
                    }
                }
                obj = obj[key];
            }
        }
        return results;
    }
    jsonpatch.apply = apply;
    function compare(tree1, tree2) {
        var patches = [];
        _generate(tree1, tree2, patches, '');
        return patches;
    }
    jsonpatch.compare = compare;
    // provide scoped __extends for TypeScript's `extend` keyword so it will not provide global one during compilation
    function __extends(d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var JsonPatchError = (function (_super) {
        __extends(JsonPatchError, _super);
        function JsonPatchError(message, name, index, operation, tree) {
            _super.call(this, message);
            this.message = message;
            this.name = name;
            this.index = index;
            this.operation = operation;
            this.tree = tree;
        }
        return JsonPatchError;
    }(Error));
    jsonpatch.JsonPatchError = JsonPatchError;
    /**
     * Recursively checks whether an object has any undefined values inside.
     */
    function hasUndefined(obj) {
        if (obj === undefined) {
            return true;
        }
        if (typeof obj == "array" || typeof obj == "object") {
            for (var i in obj) {
                if (hasUndefined(obj[i])) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.
     * @param {object} operation - operation object (patch)
     * @param {number} index - index of operation in the sequence
     * @param {object} [tree] - object where the operation is supposed to be applied
     * @param {string} [existingPathFragment] - comes along with `tree`
     */
    function validator(operation, index, tree, existingPathFragment) {
        if (typeof operation !== 'object' || operation === null || _isArray(operation)) {
            throw new JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, tree);
        }
        else if (!objOps[operation.op]) {
            throw new JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, tree);
        }
        else if (typeof operation.path !== 'string') {
            throw new JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, tree);
        }
        else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {
            // paths that aren't emptystring should start with "/"
            throw new JsonPatchError('Operation `path` property must start with "/"', 'OPERATION_PATH_INVALID', index, operation, tree);
        }
        else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {
            throw new JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, tree);
        }
        else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {
            throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, tree);
        }
        else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && hasUndefined(operation.value)) {
            throw new JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, tree);
        }
        else if (tree) {
            if (operation.op == "add") {
                var pathLen = operation.path.split("/").length;
                var existingPathLen = existingPathFragment.split("/").length;
                if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
                    throw new JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, tree);
                }
            }
            else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {
                if (operation.path !== existingPathFragment) {
                    throw new JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, tree);
                }
            }
            else if (operation.op === 'move' || operation.op === 'copy') {
                var existingValue = { op: "_get", path: operation.from, value: undefined };
                var error = jsonpatch.validate([existingValue], tree);
                if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {
                    throw new JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, tree);
                }
            }
        }
    }
    jsonpatch.validator = validator;
    /**
     * Validates a sequence of operations. If `tree` parameter is provided, the sequence is additionally validated against the object tree.
     * If error is encountered, returns a JsonPatchError object
     * @param sequence
     * @param tree
     * @returns {JsonPatchError|undefined}
     */
    function validate(sequence, tree) {
        try {
            if (!_isArray(sequence)) {
                throw new JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
            }
            if (tree) {
                tree = JSON.parse(JSON.stringify(tree)); //clone tree so that we can safely try applying operations
                apply.call(this, tree, sequence, true);
            }
            else {
                for (var i = 0; i < sequence.length; i++) {
                    this.validator(sequence[i], i);
                }
            }
        }
        catch (e) {
            if (e instanceof JsonPatchError) {
                return e;
            }
            else {
                throw e;
            }
        }
    }
    jsonpatch.validate = validate;
})(jsonpatch || (jsonpatch = {}));
if (true) {
    exports.apply = jsonpatch.apply;
    exports.observe = jsonpatch.observe;
    exports.unobserve = jsonpatch.unobserve;
    exports.generate = jsonpatch.generate;
    exports.compare = jsonpatch.compare;
    exports.validate = jsonpatch.validate;
    exports.validator = jsonpatch.validator;
    exports.JsonPatchError = jsonpatch.JsonPatchError;
}
else {
    var exports = {};
    var isBrowser = true;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = jsonpatch;
/*
When in browser, setting `exports = {}`
fools other modules into thinking they're
running in a node environment, which breaks
some of them. Here is super light wieght fix.
*/
if (isBrowser) {
    exports = undefined;
}


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var React = __webpack_require__(18);
var ReactComponentEnvironment = __webpack_require__(46);
var ReactCurrentOwner = __webpack_require__(12);
var ReactErrorUtils = __webpack_require__(47);
var ReactInstanceMap = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(8);
var ReactNodeTypes = __webpack_require__(81);
var ReactReconciler = __webpack_require__(19);

if (true) {
  var checkReactTypeSpec = __webpack_require__(196);
}

var emptyObject = __webpack_require__(23);
var invariant = __webpack_require__(1);
var shallowEqual = __webpack_require__(40);
var shouldUpdateReactComponent = __webpack_require__(54);
var warning = __webpack_require__(2);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (true) {
     true ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
     true ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (true) {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ?  true ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (true) {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
         true ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

       true ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (true) {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
       true ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
       true ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
       true ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
       true ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
       true ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
       true ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
       true ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  true ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (true) {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (true) {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (true) {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (true) {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (true) {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (true) {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (true) {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (true) {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (true) {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (true) {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ?  true ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (true) {
        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ?  true ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (true) {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ?  true ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (true) {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (true) {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (true) {
       true ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (true) {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (true) {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (true) {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (true) {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (true) {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (true) {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (true) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ?  true ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ?  true ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (true) {
      var componentName = component && component.getName ? component.getName() : 'a component';
       true ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

module.exports = ReactCompositeComponent;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/



var ReactDOMComponentTree = __webpack_require__(5);
var ReactDefaultInjection = __webpack_require__(117);
var ReactMount = __webpack_require__(80);
var ReactReconciler = __webpack_require__(19);
var ReactUpdates = __webpack_require__(10);
var ReactVersion = __webpack_require__(181);

var findDOMNode = __webpack_require__(118);
var getHostComponentFromComposite = __webpack_require__(86);
var renderSubtreeIntoContainer = __webpack_require__(204);
var warning = __webpack_require__(2);

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (true) {
  var ExecutionEnvironment = __webpack_require__(6);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
     true ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

     true ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
         true ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (true) {
  var ReactInstrumentation = __webpack_require__(8);
  var ReactDOMUnknownPropertyHook = __webpack_require__(164);
  var ReactDOMNullInputValuePropHook = __webpack_require__(158);
  var ReactDOMInvalidARIAHook = __webpack_require__(157);

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(139);
var BeforeInputEventPlugin = __webpack_require__(141);
var ChangeEventPlugin = __webpack_require__(143);
var DefaultEventPluginOrder = __webpack_require__(145);
var EnterLeaveEventPlugin = __webpack_require__(146);
var HTMLDOMPropertyConfig = __webpack_require__(148);
var ReactComponentBrowserEnvironment = __webpack_require__(150);
var ReactDOMComponent = __webpack_require__(151);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMEmptyComponent = __webpack_require__(153);
var ReactDOMTreeTraversal = __webpack_require__(163);
var ReactDOMTextComponent = __webpack_require__(161);
var ReactDefaultBatchingStrategy = __webpack_require__(166);
var ReactEventListener = __webpack_require__(169);
var ReactInjection = __webpack_require__(171);
var ReactReconcileTransaction = __webpack_require__(177);
var SVGDOMPropertyConfig = __webpack_require__(182);
var SelectEventPlugin = __webpack_require__(183);
var SimpleEventPlugin = __webpack_require__(184);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(12);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstanceMap = __webpack_require__(26);

var getHostComponentFromComposite = __webpack_require__(86);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (true) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
       true ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
     true ?  true ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
     true ?  true ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(125);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = __webpack_require__(135);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = __webpack_require__(1);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  true ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ?  true ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ?  true ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ?  true ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(6);

var createArrayFromMixed = __webpack_require__(128);
var getMarkupWrap = __webpack_require__(130);
var invariant = __webpack_require__(1);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ?  true ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ?  true ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(6);

var invariant = __webpack_require__(1);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ?  true ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(132);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = __webpack_require__(134);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(6);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = __webpack_require__(137);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(5);

var focusNode = __webpack_require__(69);

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(25);
var ExecutionEnvironment = __webpack_require__(6);
var FallbackCompositionState = __webpack_require__(147);
var SyntheticCompositionEvent = __webpack_require__(187);
var SyntheticInputEvent = __webpack_require__(190);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(71);
var ExecutionEnvironment = __webpack_require__(6);
var ReactInstrumentation = __webpack_require__(8);

var camelizeStyleName = __webpack_require__(126);
var dangerousStyleValue = __webpack_require__(197);
var hyphenateStyleName = __webpack_require__(133);
var memoizeStringOnly = __webpack_require__(136);
var warning = __webpack_require__(2);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (true) {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
     true ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
     true ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
     true ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
     true ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (true) {
        warnValidStyle(styleName, styleValue, component);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (true) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (true) {
        warnValidStyle(styleName, styles[styleName], component);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(24);
var EventPropagators = __webpack_require__(25);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);
var SyntheticEvent = __webpack_require__(13);

var getEventTarget = __webpack_require__(52);
var isEventSupported = __webpack_require__(53);
var isTextInputElement = __webpack_require__(89);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}
function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  // IE10+ fire input events to often, such when a placeholder
  // changes or when an input with a placeholder is focused.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
}

/**
 * (For IE <=11) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For IE <=11) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  if (activeElement.attachEvent) {
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.addEventListener('propertychange', handlePropertyChange, false);
  }
}

/**
 * (For IE <=11) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;

  if (activeElement.detachEvent) {
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
  }

  activeElement = null;
  activeElementInst = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For IE <=11) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetInstForInputEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput') {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return targetInst;
  }
}

function handleEventsForInputEventIE(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9-11, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventIE(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementInst;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return targetInst;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }
  }

};

module.exports = ChangeEventPlugin;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(20);
var ExecutionEnvironment = __webpack_require__(6);

var createNodesFromMarkup = __webpack_require__(129);
var emptyFunction = __webpack_require__(9);
var invariant = __webpack_require__(1);

var Danger = {

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }

};

module.exports = Danger;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(25);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticMouseEvent = __webpack_require__(32);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }

};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(15);

var getTextContentAccessor = __webpack_require__(87);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(14);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {}
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactReconciler = __webpack_require__(19);

var instantiateReactComponent = __webpack_require__(88);
var KeyEscapeUtils = __webpack_require__(44);
var shouldUpdateReactComponent = __webpack_require__(54);
var traverseAllChildren = __webpack_require__(91);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && __webpack_require__.i({"NODE_ENV":"browser-spec"}) && "browser-spec" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (true) {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(7);
    }
    if (!keyUnique) {
       true ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
  ) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (true) {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
  ) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }

};

module.exports = ReactChildReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(41);
var ReactDOMIDOperations = __webpack_require__(155);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var AutoFocusUtils = __webpack_require__(140);
var CSSPropertyOperations = __webpack_require__(142);
var DOMLazyTree = __webpack_require__(20);
var DOMNamespaces = __webpack_require__(42);
var DOMProperty = __webpack_require__(14);
var DOMPropertyOperations = __webpack_require__(73);
var EventPluginHub = __webpack_require__(24);
var EventPluginRegistry = __webpack_require__(30);
var ReactBrowserEventEmitter = __webpack_require__(31);
var ReactDOMComponentFlags = __webpack_require__(74);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMInput = __webpack_require__(156);
var ReactDOMOption = __webpack_require__(159);
var ReactDOMSelect = __webpack_require__(75);
var ReactDOMTextarea = __webpack_require__(162);
var ReactInstrumentation = __webpack_require__(8);
var ReactMultiChild = __webpack_require__(174);
var ReactServerRenderingTransaction = __webpack_require__(179);

var emptyFunction = __webpack_require__(9);
var escapeTextContentForBrowser = __webpack_require__(34);
var invariant = __webpack_require__(1);
var isEventSupported = __webpack_require__(53);
var shallowEqual = __webpack_require__(40);
var validateDOMNesting = __webpack_require__(55);
var warning = __webpack_require__(2);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

   true ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ?  true ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ?  true ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (true) {
     true ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
     true ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
     true ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ?  true ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (true) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
     true ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (true) {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ?  true ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ?  true ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ?  true ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (true) {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (true) {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (true) {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (true) {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (true) {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (true) {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (true) {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (true) {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (true) {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (true) {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ?  true ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (true) {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }

};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var validateDOMNesting = __webpack_require__(55);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (true) {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(20);
var ReactDOMComponentTree = __webpack_require__(5);

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(41);
var ReactDOMComponentTree = __webpack_require__(5);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMPropertyOperations = __webpack_require__(73);
var LinkedValueUtils = __webpack_require__(45);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (true) {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
         true ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
         true ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
         true ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
         true ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };

    if (true) {
      inst._wrapperState.controlled = isControlled(props);
    }
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (true) {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
         true ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
         true ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {

      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ?  true ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(14);
var ReactComponentTreeHook = __webpack_require__(7);

var warning = __webpack_require__(2);

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
       true ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
     true ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
     true ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if (true) {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if (true) {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactComponentTreeHook = __webpack_require__(7);

var warning = __webpack_require__(2);

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
     true ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var React = __webpack_require__(18);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMSelect = __webpack_require__(75);

var warning = __webpack_require__(2);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
       true ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (true) {
       true ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }

};

module.exports = ReactDOMOption;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var getNodeForCharacterOffset = __webpack_require__(201);
var getTextContentAccessor = __webpack_require__(87);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMChildrenOperations = __webpack_require__(41);
var DOMLazyTree = __webpack_require__(20);
var ReactDOMComponentTree = __webpack_require__(5);

var escapeTextContentForBrowser = __webpack_require__(34);
var invariant = __webpack_require__(1);
var validateDOMNesting = __webpack_require__(55);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (true) {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ?  true ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }

});

module.exports = ReactDOMTextComponent;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(45);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (true) {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
         true ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
         true ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (true) {
           true ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ?  true ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ?  true ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ?  true ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(14);
var EventPluginRegistry = __webpack_require__(30);
var ReactComponentTreeHook = __webpack_require__(7);

var warning = __webpack_require__(2);

if (true) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
       true ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
       true ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
     true ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
     true ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactInvalidSetStateWarningHook = __webpack_require__(172);
var ReactHostOperationHistoryHook = __webpack_require__(170);
var ReactComponentTreeHook = __webpack_require__(7);
var ExecutionEnvironment = __webpack_require__(6);

var performanceNow = __webpack_require__(138);
var warning = __webpack_require__(2);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
     true ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
     true ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
     true ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
     true ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure =
// $FlowFixMe https://github.com/facebook/flow/issues/2345
typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  performance.clearMeasures(measurementName);
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactUpdates = __webpack_require__(10);
var Transaction = __webpack_require__(33);

var emptyFunction = __webpack_require__(9);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(24);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventListener = __webpack_require__(68);
var ExecutionEnvironment = __webpack_require__(6);
var PooledClass = __webpack_require__(15);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var getEventTarget = __webpack_require__(52);
var getUnboundedScrollPosition = __webpack_require__(131);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(14);
var EventPluginHub = __webpack_require__(24);
var EventPluginUtils = __webpack_require__(43);
var ReactComponentEnvironment = __webpack_require__(46);
var ReactEmptyComponent = __webpack_require__(76);
var ReactBrowserEventEmitter = __webpack_require__(31);
var ReactHostComponent = __webpack_require__(78);
var ReactUpdates = __webpack_require__(10);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var warning = __webpack_require__(2);

if (true) {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
     true ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var adler32 = __webpack_require__(195);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactComponentEnvironment = __webpack_require__(46);
var ReactInstanceMap = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(8);

var ReactCurrentOwner = __webpack_require__(12);
var ReactReconciler = __webpack_require__(19);
var ReactChildReconciler = __webpack_require__(149);

var emptyFunction = __webpack_require__(9);
var flattenChildren = __webpack_require__(198);
var invariant = __webpack_require__(1);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (true) {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (true) {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (true) {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (true) {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (true) {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (true) {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }

  }

};

module.exports = ReactMultiChild;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ?  true ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ?  true ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (true) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(72);
var PooledClass = __webpack_require__(15);
var ReactBrowserEventEmitter = __webpack_require__(31);
var ReactInputSelection = __webpack_require__(79);
var ReactInstrumentation = __webpack_require__(8);
var Transaction = __webpack_require__(33);
var ReactUpdateQueue = __webpack_require__(48);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (true) {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactOwner = __webpack_require__(175);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(15);
var Transaction = __webpack_require__(33);
var ReactInstrumentation = __webpack_require__(8);
var ReactServerUpdateQueue = __webpack_require__(180);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (true) {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = __webpack_require__(48);

var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (true) {
    var constructor = publicInstance.constructor;
     true ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.4.2';

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(25);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInputSelection = __webpack_require__(79);
var SyntheticEvent = __webpack_require__(13);

var getActiveElement = __webpack_require__(70);
var isTextInputElement = __webpack_require__(89);
var shallowEqual = __webpack_require__(40);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var EventListener = __webpack_require__(68);
var EventPropagators = __webpack_require__(25);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticAnimationEvent = __webpack_require__(185);
var SyntheticClipboardEvent = __webpack_require__(186);
var SyntheticEvent = __webpack_require__(13);
var SyntheticFocusEvent = __webpack_require__(189);
var SyntheticKeyboardEvent = __webpack_require__(191);
var SyntheticMouseEvent = __webpack_require__(32);
var SyntheticDragEvent = __webpack_require__(188);
var SyntheticTouchEvent = __webpack_require__(192);
var SyntheticTransitionEvent = __webpack_require__(193);
var SyntheticUIEvent = __webpack_require__(29);
var SyntheticWheelEvent = __webpack_require__(194);

var emptyFunction = __webpack_require__(9);
var getEventCharCode = __webpack_require__(50);
var invariant = __webpack_require__(1);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ?  true ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }

};

module.exports = SimpleEventPlugin;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(13);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(13);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(13);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(32);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(29);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(13);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(29);

var getEventCharCode = __webpack_require__(50);
var getEventKey = __webpack_require__(199);
var getEventModifierState = __webpack_require__(51);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(29);

var getEventModifierState = __webpack_require__(51);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(13);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(32);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactPropTypeLocationNames = __webpack_require__(176);
var ReactPropTypesSecret = __webpack_require__(82);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && __webpack_require__.i({"NODE_ENV":"browser-spec"}) && "browser-spec" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (true) {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(7);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(71);
var warning = __webpack_require__(2);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (true) {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
           true ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var KeyEscapeUtils = __webpack_require__(44);
var traverseAllChildren = __webpack_require__(91);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && __webpack_require__.i({"NODE_ENV":"browser-spec"}) && "browser-spec" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (true) {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(7);
      }
      if (!keyUnique) {
         true ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (true) {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var getEventCharCode = __webpack_require__(50);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(34);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactMount = __webpack_require__(80);

module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(17);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(206);
var ReactElement = __webpack_require__(16);

var emptyFunction = __webpack_require__(9);
var traverseAllChildren = __webpack_require__(215);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(17),
    _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(56);
var ReactElement = __webpack_require__(16);
var ReactPropTypeLocationNames = __webpack_require__(58);
var ReactNoopUpdateQueue = __webpack_require__(57);

var emptyObject = __webpack_require__(23);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

/**
 * Policies that describe methods in `ReactClassInterface`.
 */


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: 'DEFINE_MANY',

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: 'DEFINE_MANY',

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: 'DEFINE_MANY',

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: 'DEFINE_MANY',

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: 'DEFINE_MANY',

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: 'DEFINE_MANY_MERGED',

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: 'DEFINE_MANY_MERGED',

  /**
   * @return {object}
   * @optional
   */
  getChildContext: 'DEFINE_MANY_MERGED',

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: 'DEFINE_ONCE',

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: 'DEFINE_MANY',

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: 'DEFINE_MANY',

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: 'DEFINE_MANY',

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: 'DEFINE_ONCE',

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: 'DEFINE_MANY',

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: 'OVERRIDE_BASE'

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (true) {
      validateTypeDef(Constructor, childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (true) {
      validateTypeDef(Constructor, contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (true) {
      validateTypeDef(Constructor, propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but only in __DEV__
       true ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ?  true ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ?  true ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if (true) {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

       true ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ?  true ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ?  true ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ?  true ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (true) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ?  true ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ?  true ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ?  true ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ?  true ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (true) {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
         true ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
         true ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function () {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (true) {
         true ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (true) {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  true ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (true) {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ?  true ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if (true) {
       true ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
       true ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(16);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (true) {
  var ReactElementValidator = __webpack_require__(93);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(16);
var ReactPropTypeLocationNames = __webpack_require__(58);
var ReactPropTypesSecret = __webpack_require__(94);

var emptyFunction = __webpack_require__(9);
var getIteratorFn = __webpack_require__(60);
var warning = __webpack_require__(2);

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),
  symbol: createPrimitiveTypeChecker('symbol'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
/*eslint-disable no-self-compare*/
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return x !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}
/*eslint-enable no-self-compare*/

/**
 * We use an Error-like object for backward compatibility as people may call
 * PropTypes directly and inspect their output. However we don't use real
 * Errors anymore. We don't inspect their stack anyway, and creating them
 * is prohibitively expensive if they are created too often, such as what
 * happens in oneOfType() for any type before the one that matched.
 */
function PropTypeError(message) {
  this.message = message;
  this.stack = '';
}
// Make `instanceof Error` still work for returned errors.
PropTypeError.prototype = Error.prototype;

function createChainableTypeChecker(validate) {
  if (true) {
    var manualPropTypeCallCache = {};
  }
  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (true) {
      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
        var cacheKey = componentName + ':' + propName;
        if (!manualPropTypeCallCache[cacheKey]) {
           true ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
          manualPropTypeCallCache[cacheKey] = true;
        }
      }
    }
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        if (props[propName] === null) {
          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
        }
        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName, secret) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    }
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!ReactElement.isValidElement(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
     true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (is(propValue, expectedValues[i])) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    }
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
     true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === 'symbol') {
    return true;
  }

  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
  if (propValue['@@toStringTag'] === 'Symbol') {
    return true;
  }

  // Fallback for non-spec compliant Symbols which are polyfilled.
  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    return true;
  }

  return false;
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  if (isSymbol(propType, propValue)) {
    return 'symbol';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return ANONYMOUS;
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(56);
var ReactNoopUpdateQueue = __webpack_require__(57);

var emptyObject = __webpack_require__(23);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.4.2';

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(17);

var ReactPropTypeLocationNames = __webpack_require__(58);
var ReactPropTypesSecret = __webpack_require__(94);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && __webpack_require__.i({"NODE_ENV":"browser-spec"}) && "browser-spec" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(7);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (true) {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(7);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)))

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(17);

var ReactElement = __webpack_require__(16);

var invariant = __webpack_require__(1);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ?  true ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(17);

var ReactCurrentOwner = __webpack_require__(12);
var REACT_ELEMENT_TYPE = __webpack_require__(92);

var getIteratorFn = __webpack_require__(60);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(205);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (true) {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (true) {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;

/***/ }),
/* 216 */,
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_actions__ = __webpack_require__(219);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_errors__ = __webpack_require__(220);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_flags__ = __webpack_require__(221);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_i18n__ = __webpack_require__(222);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__lib_json__ = __webpack_require__(223);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__lib_patches__ = __webpack_require__(224);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__lib_resources__ = __webpack_require__(225);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__lib_validation__ = __webpack_require__(226);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__lib_visibility__ = __webpack_require__(227);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "actions", function() { return __WEBPACK_IMPORTED_MODULE_0__lib_actions__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "errors", function() { return __WEBPACK_IMPORTED_MODULE_1__lib_errors__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "flags", function() { return __WEBPACK_IMPORTED_MODULE_2__lib_flags__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "i18n", function() { return __WEBPACK_IMPORTED_MODULE_3__lib_i18n__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "json", function() { return __WEBPACK_IMPORTED_MODULE_4__lib_json__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "patches", function() { return __WEBPACK_IMPORTED_MODULE_5__lib_patches__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return __WEBPACK_IMPORTED_MODULE_6__lib_resources__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "validation", function() { return __WEBPACK_IMPORTED_MODULE_7__lib_validation__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "visibility", function() { return __WEBPACK_IMPORTED_MODULE_8__lib_visibility__; });
/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */












/***/ }),
/* 218 */,
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_laxar__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "publisher", function() { return publisher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "publisherForFeature", function() { return publisherForFeature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectPublisherToFeature", function() { return connectPublisherToFeature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handlerFor", function() { return handlerFor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OUTCOME_ERROR", function() { return OUTCOME_ERROR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OUTCOME_SUCCESS", function() { return OUTCOME_SUCCESS; });
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */
/**
 * This module provides helpers for patterns regarding *takeActionRequest*, *willTakeAction* and
 * *didTakeAction* events.
 *
 * @module actions
 */


var DELIVER_TO_SENDER = { deliverToSender: false };

var OUTCOME_SUCCESS = 'SUCCESS';
var OUTCOME_ERROR = 'ERROR';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates and returns a function to publish `takeActionRequest` events for a given action feature. The
 * action to publish is expected to be at the key `action` under the given feature path.
 *
 * Apart from that this function works just like {@link publisher}.
 *
 * @param {Object} scope
 *    the scope the publisher works on. Needs at least an EventBus instance as `eventBus` property
 * @param {String} feature
 *    the feature to take the action name from
 * @param {Object} [optionalOptions]
 *    options for the publisher
 * @param {Boolean} optionalOptions.deliverToSender
 *    the value is forward to `eventBus.publishAndGatherReplies`: if `true` the event will also be
 *    delivered to the publisher. Default is `false`
 * @param {Function} optionalOptions.onSuccess
 *    a function that is called when the overall outcome yields "SUCCESS"
 * @param {Function} optionalOptions.onError
 *    a function that is called when the overall outcome yields "ERROR"
 * @param {Function} optionalOptions.onComplete
 *    a function that is called always, independently of the overall outcome
 *
 * @return {Function}
 *    the publisher as described above
 */
function publisherForFeature(scope, feature, optionalOptions) {
   var action = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope.features, feature + '.action', null);
   return publisher(scope, action, optionalOptions);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates and return a function to publish `takeActionRequest` events for a given action. The outcomes of
 * all given `didTakeAction` events are interpreted and optional callbacks according to the overall outcome
 * are called. Interpretation is simple: If at least one `didTakeAction` event yields the outcome "ERROR",
 * the overall outcome is also erroneous. In any other case the overall outcome will be successful.
 *
 * The promise returned by the publisher is resolved, if the overall outcome is successful and rejected if
 * the outcome is erroneous. All callbacks, be it the `on*` handlers or the then handlers of the promise,
 * will receive the list of events and meta information of all `didTakeAction` events
 * (see `EventBus#publishAndGatherReplies()` for details).
 *
 * Example:
 * ```js
 * publisher = actions.publisher( scope, 'save', {
 *    onSuccess: function() { closeApplication(); },
 *    onError: function() { displayError(); }
 * } );
 *
 * $button.on( 'click', publisher );
 * ```
 *
 * @param {Object} scope
 *    the scope the publisher works on. Needs at least an EventBus instance as `eventBus` property
 * @param {String} action
 *    the action to publish on call of the publisher
 * @param {Object} [optionalOptions]
 *    options for the publisher
 * @param {Boolean} optionalOptions.deliverToSender
 *    the value is forward to `eventBus.publishAndGatherReplies`: if `true` the event will also be
 *    delivered to the publisher. Default is `false`
 * @param {Function} optionalOptions.onSuccess
 *    a function that is called when the overall outcome yields "SUCCESS"
 * @param {Function} optionalOptions.onError
 *    a function that is called when the overall outcome yields "ERROR"
 * @param {Function} optionalOptions.onComplete
 *    a function that is called always, independently of the overall outcome
 *
 * @return {Function}
 *    the publisher as described above
 */
function publisher(scope, action, optionalOptions) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(scope).hasType(Object).hasProperty('eventBus');
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(action).hasType(String).isNotNull();

   var options = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].options(optionalOptions, {
      deliverToSender: false,
      onSuccess: function onSuccess() {},
      onError: function onError() {},
      onComplete: function onComplete() {}
   });

   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(options.onSuccess).hasType(Function).isNotNull();
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(options.onError).hasType(Function).isNotNull();
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(options.onComplete).hasType(Function).isNotNull();

   var eventBusOptions = {
      deliverToSender: options.deliverToSender
   };
   if (options.timeout > 0) {
      eventBusOptions.pendingDidTimeout = options.timeout;
   }

   return function (optionalEvent) {
      var event = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].options(optionalEvent, { action: action });

      return scope.eventBus.publishAndGatherReplies('takeActionRequest.' + action, event, eventBusOptions).then(function (didResponses) {
         var failed = didResponses.some(function (response) {
            return response.event.outcome === OUTCOME_ERROR;
         });

         options.onComplete(didResponses.slice(0));

         if (failed) {
            options.onError(didResponses.slice(0));
            throw didResponses;
         }

         options.onSuccess(didResponses.slice(0));
         return didResponses;
      });
   };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates an action publisher for a given feature and makes it available as a scope/context property.
 *
 * The publisher is created under ``scope[ `actions.${feature}` ]``, where `scope` and `feature`
 * are the arguments passed to this function. If an action topic has been configured for the given feature,
 * the action publisher is created using `publisherForFeature`. Otherwise, it is a noop-function.
 *
 * @param {Object} scope
 *    the scope/context to connect to. Needs at least an EventBus instance as `eventBus` property
 * @param {String} feature
 *    the feature to take the action name from
 * @param {Object} [optionalOptions]
 *    options for the publisher, as documented under `publisherForFeature`
 */
function connectPublisherToFeature(scope, feature, optionalOptions) {
   var topic = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope.features, feature);
   var publisher = topic ? publisherForFeature(scope, feature, optionalOptions) : function () {};
   __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].setPath(scope, 'actions.' + feature, publisher);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates a new action handler instance for `takeActionRequest` events. It handles sending of an optional
 * `willTakeAction` event and the final, possibly later asynchronously following `didTakeAction` event.
 *
 * @param {Object} scope
 *    the scope the handler should work with. It is expected to find an `eventBus` property there with
 *    which it can do the event handling
 *
 * @return {ActionHandler}
 *    an action handler instance
 */
function handlerFor(scope) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(scope).hasType(Object).hasProperty('eventBus');

   return new ActionHandler(scope);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/**
 * @constructor
 * @private
 */
function ActionHandler(scope) {
   this.scope = scope;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Registers a handler for `takeActionRequest` events with actions from a feature. It is assumed that the
 * given feature has an `onActions` property, which is a set of actions to listen to. The set may be empty,
 * `null` or `undefined`, in which case the handler simply won't be attached to any event.
 *
 * Apart from that this function works just like {@link ActionHandler#registerActions}.
 *
 * Example:
 * Consider the following configuration for a widget:
 * ```json
 * {
 *    "features": {
 *       "open": {
 *          "onActions": [ "openAction1", "openAction2" ]
 *       },
 *       "save": {
 *          "onActions": [ "save" ]
 *       }
 *    }
 * }
 * ```
 * An example using that would be:
 * ```js
 * actions.handlerFor( scope )
 *    .registerActionsFromFeature( 'open', function( event, meta ) {
 *       somethingSynchronous();
 *       return actions.OUTCOME_SUCCESS;
 *    } )
 *    .registerActionsFromFeature( 'save', function( event, meta ) {
 *       return $q.when( somethingAsynchronous() );
 *    } );
 * ```
 *
 * @param {String} feature
 *    the feature to read the actions to watch from
 * @param {Function} handler
 *    the handler to call whenever a `takeActionRequest` event with matching action is received
 *
 * @return {ActionHandler}
 *    this instance for chaining
 */
ActionHandler.prototype.registerActionsFromFeature = function (feature, handler) {
   var actions = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(this.scope.features, feature + '.onActions') || [];
   return this.registerActions(actions, handler);
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Registers a handler for `takeActionRequest` events for a set of actions. The set may be empty, in
 * which case the handler simply won't be attached to any event.
 *
 * The handler is assumed to be a function that receives the event and meta object of the underlying
 * `takeActionRequest` event when called. In order to send the correct `didTakeAction` event as response,
 * the return value of the handler is interpreted according to the following rules:
 *
 * - the handler throws an error
 *   - the `didTakeAction` event is sent with outcome `ERROR`
 *   - the error is re-thrown
 * - the handler returns a simple value or a promise, that is later resolved with a value
 *   - if the value is a plain object, it is used as basis for the event object and
 *     - if the object has a property `outcome` with value `ERROR`, the `didTakeAction` event is sent with
 *       outcome `ERROR`
 *   - otherwise, or if the value is no plain object, the `didTakeAction` event is sent with outcome
 *     `SUCCESS`
 * - the handler returns a promise, that is later rejected with a value
 *   - if the value is a plain object, it is used as basis for the event object and
 *     - if the object has a property `outcome` with value `SUCCESS`, the `didTakeAction` event is sent with
 *     outcome `SUCCESS`
 *   - otherwise, or if the value is no plain object, the `didTakeAction` event is sent with outcome `ERROR`
 *
 * So basically simple return values or resolved promises are assumed to be successful if they don't state
 * otherwise, while rejected promises are assumed to be erroneous, if they don't state otherwise.
 *
 * Example:
 * ```js
 * actions.handlerFor( scope )
 *    .registerActions( [ 'open' ], function( event, meta ) {
 *       return 42
 *    } )
 *    .registerActions( [ 'save' ], function( event, meta ) {
 *       return $q.when( { resultValue: 42 } );
 *    } );
 * ```
 *
 * @param {String[]} actions
 *    a set of actions to watch
 * @param {Function} handler
 *    the handler to call whenever a `takeActionRequest` event with matching action is received
 *
 * @return {ActionHandler}
 *    this instance for chaining
 */
ActionHandler.prototype.registerActions = function (actions, handler) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(actions).hasType(Array).isNotNull();
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(handler).hasType(Function).isNotNull();

   var self = this;
   actions.forEach(function (action) {
      self.scope.eventBus.subscribe('takeActionRequest.' + action, function (event, meta) {
         callHandler(self.scope.eventBus, action, handler, event, meta);
      });
   });

   return this;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function callHandler(eventBus, action, handler, event, meta) {
   eventBus.publish('willTakeAction.' + action, { action: action }, DELIVER_TO_SENDER);

   var responseEvent = { action: action, outcome: OUTCOME_SUCCESS };

   var returnValue = void 0;
   try {
      returnValue = handler(event, meta);
   } catch (error) {
      responseEvent.outcome = OUTCOME_ERROR;

      eventBus.publish('didTakeAction.' + action + '.' + OUTCOME_ERROR, responseEvent, DELIVER_TO_SENDER);
      throw error;
   }

   Promise.resolve(returnValue).then(function (promiseValue) {
      if (isObject(promiseValue)) {
         responseEvent.outcome = promiseValue.outcome === OUTCOME_ERROR ? OUTCOME_ERROR : OUTCOME_SUCCESS;
      }

      return promiseValue;
   }, function (promiseValue) {
      responseEvent.outcome = OUTCOME_ERROR;
      if (isObject(promiseValue)) {
         responseEvent.outcome = promiseValue.outcome === OUTCOME_SUCCESS ? OUTCOME_SUCCESS : OUTCOME_ERROR;
      }

      return promiseValue;
   }).then(function (promiseValue) {
      responseEvent = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].options(responseEvent, promiseValue);
      var eventName = 'didTakeAction.' + action + '.' + responseEvent.outcome;
      eventBus.publish(eventName, responseEvent, DELIVER_TO_SENDER);
   });
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function isObject(value) {
   return value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_laxar__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "errorPublisherForFeature", function() { return errorPublisherForFeature; });
/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */
/**
 * This module provides helpers for patterns regarding *didEncounterError* events.
 *
 * @module errors
 */


/**
 * Creates and returns a function to publish didEncounterError events related to a specific feature.
 * Generated events will not be delivered to the sender.
 *
 * The returned publisher function takes these arguments:
 * - `code`: a generic code that identifies the failing operation (such as 'HTTP_PUT', 'HTTP_GET')
 * - `messagePath`: to lookup a human-readable message under this publisher's feature configuration
 * - `data`: additional information to be used for substituting in the message, It should contain the
 *   fields `resource` and `location` if applicable.
 * - `cause`: more diagnostic information on the error's cause, such as the underlying HTTP status code
 *
 * @param {Object} scope
 *    the scope the publisher works on
 * @param {String} featurePath
 *    the configuration path for (i18n) error-messages to publish
 * @param {Object} [options]
 *    an optional object with additional configuration
 * @param {Function} options.localizer
 *    a function such as `i18nHandler.localize` to prepare messages
 *
 * @return {Function}
 *    a publisher function with four arguments as described above
 */
function errorPublisherForFeature(scope, featurePath, options) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(scope).hasType(Object).isNotNull();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(scope.eventBus).hasType(Object).isNotNull();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(options).hasType(Object);

  var localizer = options && options.localizer;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(localizer).hasType(Function);

  var featureConfiguration = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope.features, featurePath);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(featureConfiguration).hasType(Object).isNotNull();

  return function (code, messagePath) {
    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var cause = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var rawMessage = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(featureConfiguration, messagePath);
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(rawMessage).isNotNull();

    var message = __WEBPACK_IMPORTED_MODULE_0_laxar__["string"].format(localizer ? localizer(rawMessage) : rawMessage, [], data);
    var event = { code: code, message: message, data: data, cause: cause };
    scope.eventBus.publish('didEncounterError.' + code, event, { deliverToSender: false });
  };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_laxar__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handlerFor", function() { return handlerFor; });
/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */
/**
 * This module provides helpers for patterns regarding *didChangeFlag* events.
 *
 * @module flags
 */


/**
 * Creates a new handler instance for didChangeFlag events, on which one can attach a listener for
 * accumulated flag changes. Assume for example a feature like `disableOn`, which defines a set of flags,
 * where a `true` state of any of the flags disables the widget. The developer shouldn't care about single
 * flag states but should only be notified, if a change of one flag leads to a change of the accumulated
 * "any flag should be true" state.
 *
 * Additionally it is possible to let the handler set the current state of the accumulated flag on a given
 * scope property.
 *
 * @param {Object} scope
 *    the scope the handler should work with. It is expected to find an `eventBus` property there with
 *    which it can do the event handling
 *
 * @return {FlagHandler}
 *    a flag handler instance
 */
function handlerFor(scope) {
   return new FlagHandler(scope);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/**
 *
 * @param scope
 *
 * @constructor
 * @private
 */
function FlagHandler(scope) {
   this.scope = scope;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Registers a flag or a set of flags from the given feature. In contrast to the `ResourceHandler` here
 * the complete attribute path to the flag(s) must be provided. This is due to the fact that there is no
 * convention on names for flags on a feature, as there can coexist multiple flags for one feature, each
 * influencing a different aspect of this feature.
 *
 * @param {String} featurePath
 *    the attribute path to the configured flag(s) within the feature map
 * @param {Object|Function} [optionalOptions]
 *    options and callbacks to use. If a function is passed, it is used as the `onChange` option.
 * @param {Boolean} optionalOptions.initialState
 *    the optional initial state of the accumulated state. If not given each non-inverted flag is initially
 *    assumed to be `false` and `true`, if it is inverted
 * @param {Function|Function[]} optionalOptions.onChange
 *    a function or a list of functions to call whenever the accumulated state of the flags changes. It
 *    receives the new state as first argument and its previous state as second argument
 * @param {String} optionalOptions.scopeKey
 *    the key to set the current accumulated state on in the scope. If not given, nothing happens. For
 *    example `flags.myFlag` would set `scope.flags.myFlag` to the currently valid accumulated state
 * @param {String} optionalOptions.predicate
 *    one of these:
 *    - `any`: if any of the flag's states is `true`, the accumulated state is `true`. This is the default
 *    - `all`: if all of the flag's states are `true`, the accumulated state is `true`
 *
 * @return {FlagHandler}
 *    this instance for chaining
 */
FlagHandler.prototype.registerFlagFromFeature = function (featurePath, optionalOptions) {
   return this.registerFlag(__WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(this.scope.features, featurePath, []), optionalOptions);
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Registers a flag or a set of flags given as argument. Even `undefined`, `null` or an empty array
 * are handled gracefully and treated as an empty set of flags, thus never changing their states.
 *
 * The new accumulated state is set on `scope.flags` if that is defined. Otherwise it is set on
 * `scope.model`.
 *
 * @param {String|String[]} possibleFlags
 *    one or a list of flags to watch
 * @param {Object|Function} [optionalOptions]
 *    options and callbacks to use. If a function is passed, it is used as the `onChange` option.
 * @param {Boolean} optionalOptions.initialState
 *    the optional initial state of the accumulated state. If not given each non-inverted flag is initially
 *    assumed to be `false` and `true`, if it is inverted
 * @param {Function|Function[]} optionalOptions.onChange
 *    a function or a list of functions to call whenever the accumuated state of the flags changes. It
 *    receives the new state as first argument and its previous state as second argument
 * @param {String} optionalOptions.scopeKey
 *    the key to set the current accumulated state on in the scope. If not given, nothing happens. For
 *    example `flags.myFlag` would set `scope.flags.myFlag` to the currently valid accumulated state
 * @param {String} optionalOptions.predicate
 *    one of these:
 *    - `any`: if any of the flag's sates is `true`, the accumulated state is `true`. This is the default
 *    - `all`: if all of the flag's states are `true`, the accumulated state is `true`
 *
 * @return {FlagHandler}
 *    this instance for chaining
 */
FlagHandler.prototype.registerFlag = function (possibleFlags, optionalOptions) {
   var _this = this;

   var options = Object.assign({
      predicate: 'any'
   }, typeof optionalOptions === 'function' ? { onChange: optionalOptions } : optionalOptions);

   var scope = this.scope;
   var applyToScope = 'scopeKey' in options ? function (state) {
      __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].setPath(scope, options.scopeKey, state);
   } : function () {};

   var flags = processFlags(possibleFlags);
   var changeHandler = processChangeHandlers(options.onChange);
   var oldState = typeof options.initialState === 'boolean' ? options.initialState : evaluateState(flags, options.predicate);

   applyToScope(oldState);

   flags.forEach(function (flag) {
      _this.scope.eventBus.subscribe('didChangeFlag.' + flag.name, function (event) {
         flag.state = flag.negated ? !event.state : event.state;

         var newState = evaluateState(flags, options.predicate);
         if (newState !== oldState) {
            applyToScope(newState);
            changeHandler(newState, oldState);
            oldState = newState;
         }
      });
   });

   return this;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function processFlags(flags) {
   if (!flags) {
      return [];
   }

   var flagArr = Array.isArray(flags) ? flags : [flags];
   return flagArr.map(function (flagExpression) {
      var negated = flagExpression.indexOf('!') === 0;
      return {
         name: negated ? flagExpression.substr(1) : flagExpression,
         negated: negated,
         state: negated // always the state after applying a possible negation
      };
   });
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function processChangeHandlers(handlers) {
   if (!handlers) {
      return function () {};
   }

   var handlerArr = Array.isArray(handlers) ? handlers : [handlers];
   return function (newValue, oldValue) {
      handlerArr.forEach(function (handler) {
         handler(newValue, oldValue);
      });
   };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

var evaluators = {
   any: function any(previousValue, flag) {
      return previousValue === null ? flag.state : flag.state || previousValue;
   },
   all: function all(previousValue, flag) {
      return previousValue === null ? flag.state : flag.state && previousValue;
   }
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function evaluateState(flags, predicate) {
   var state = flags.reduce(evaluators[predicate], null);
   return state === null ? false : state;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_laxar__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handlerFor", function() { return handlerFor; });
/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */
/**
 * This module provides helpers for patterns regarding *didChangeLocale* events.
 *
 * @module i18n
 */


/**
 * Obtain a handler which applies didChangeLocale-events to the given scope.
 *
 * @param {Object} scope
 *    the scope instance for which i18n-state should be managed
 * @param {Object} i18n
 *    a laxarjs i18n service instance
 * @param {String} [optionalI18nPath]
 *    an optional path within the scope (default: `'i18n'`) where to store i18n-state
 *
 * @return {I18nHandler}
 *    a handler which manages the i18n-object on the scope, and which allows to register for locale
 *    changes, by topic or by feature
 */
function handlerFor(scope, i18n, optionalI18nPath) {
   var i18nPath = optionalI18nPath || 'i18n';
   prepareScopeI18n();

   var callbacksByLocale = {};

   function handleLocaleChangeEvent(event) {
      var locale = event.locale;
      var tags = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope, i18nPath).tags;
      var previousTag = tags[locale];
      if (previousTag !== event.languageTag) {
         tags[locale] = event.languageTag;
         callbacksByLocale[locale].forEach(function (cb) {
            return cb(event, previousTag);
         });
      }
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   /**
    *
    * @name I18nHandler
    * @constructor
    * @private
    */
   var handler = {

      /**
       * Manage changes to the given locale(s).
       *
       * @param {String|String[]} possibleLocales
       *    zero, one or more locale topics to manage
       * @param {Object} [optionalOptions]
       *    an optional configuration object
       * @param {Function|Function[]} optionalOptions.onChange
       *    a function or a list of functions to call whenever one of the locales changes
       *    It receives the event which triggered the change as the first argument, and the previous
       *    language-tag as the second argument
       *
       * @return {Object}
       *    this instance for chaining
       *
       * @memberOf I18nHandler
       */
      registerLocale: function registerLocale(possibleLocales, optionalOptions) {
         var locales = possibleLocales;
         if (!Array.isArray(possibleLocales)) {
            locales = possibleLocales ? [possibleLocales] : [];
         }
         locales.forEach(function (locale) {
            if (!callbacksByLocale[locale]) {
               callbacksByLocale[locale] = [];
               scope.eventBus.subscribe('didChangeLocale.' + locale, handleLocaleChangeEvent);
            }
            var onChange = (optionalOptions || {}).onChange;
            if (onChange) {
               callbacksByLocale[locale] = callbacksByLocale[locale].concat(Array.isArray(onChange) ? onChange : [onChange]);
            }
         });
         return handler;
      },


      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      /**
       * Look for the given feature path within the feature configuration and register for changes to the
       * corresponding locale. If there is a key 'locale' at the given feature, that entry is used.
       * Otherwise, the entire configuration path has to be specified.
       *
       * @param {String} featurePath  A feature path for the current scope.
       * @param {Object} [optionalOptions]  An optional configuration object.
       *
       * @return {Object}
       *    this instance for chaining
       *
       * @memberOf I18nHandler
       */
      registerLocaleFromFeature: function registerLocaleFromFeature(featurePath, optionalOptions) {
         var entry = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope.features, featurePath);
         return handler.registerLocale(entry.locale || entry, optionalOptions || {});
      },


      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      scopeLocaleFromFeature: function scopeLocaleFromFeature(featurePath, options) {
         var entry = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope.features, featurePath);
         __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope, i18nPath).locale = entry.locale || entry;
         return handler.registerLocale(__WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope, i18nPath).locale, options || {});
      },


      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      localizer: function localizer(fallback) {
         var model = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope, i18nPath);
         function partial(i18nValue) {
            if (typeof i18nValue === 'string') {
               return i18nValue;
            }
            var tag = model.tags[model.locale];
            return tag ? i18n.localizer(tag, fallback)(i18nValue) : fallback;
         }
         partial.format = function () {
            var _i18n$localizer;

            return (_i18n$localizer = i18n.localizer(model.tags[model.locale])).format.apply(_i18n$localizer, arguments);
         };
         return partial;
      }
   };

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   function prepareScopeI18n() {
      var result = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(scope, i18nPath);
      if (!result) {
         result = {};
         __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].setPath(scope, i18nPath, result);
      }
      if (!result.tags) {
         result.tags = {};
      }
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   return handler;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_fast_json_patch__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_fast_json_patch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_fast_json_patch__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_laxar__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_laxar__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPointer", function() { return getPointer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setPointer", function() { return setPointer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pointerToPath", function() { return pointerToPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pathToPointer", function() { return pathToPointer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPatch", function() { return applyPatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPatch", function() { return createPatch; });
/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */
/**
 * This module provides helpers for dealing with patches for JSON structures, specifically regarding
 * [RFC 6901](https://tools.ietf.org/html/rfc6901) and [RFC 6902](https://tools.ietf.org/html/rfc6902).
 *
 * @module json
 */



/**
 * Lookup a nested object using an rfc-6901 JSON pointer.
 *
 * @param {Object|Array=} object
 *    the object in which to lookup an entry
 * @param {String} pointer
 *    a valid JSON pointer conforming to rfc-6901
 * @param {*} fallback
 *    a value to return if the JSON pointer does not point to any value within the object
 *
 * @return {*}
 *    the value found at the JSON pointer, or the fallback value
 */
function getPointer(object, pointer, fallback) {
   var keys = pointer.split('/');
   var len = keys.length;
   var usesEscapes = pointer.indexOf('~') !== -1;

   var subTree = object;
   for (var i = 1; i < len; ++i) {
      if (object === undefined) {
         return fallback;
      }

      if (Array.isArray(object)) {
         var index = parseInt(keys[i], 10);
         subTree = subTree[index];
      } else {
         var key = keys[i];
         if (usesEscapes) {
            // unescape masked chars ('/', '~'):
            key = key.replace(/~1/g, '/').replace(/~0/g, '~');
         }
         subTree = subTree[key];
      }
   }
   return subTree === undefined ? fallback : subTree;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Set a nested item within a structure using an rfc-6901 JSON pointer. Missing containers along the path
 * will be created (using laxar.object.setPath). The object is modified in-place.
 *
 * JSON pointer segments of the type '/-' (for appending to an array) are not supported. You can use a
 * single JSON patch 'add' operation to achieve the desired effect.
 *
 * @param {Object|Array} object
 *    the object in which to lookup an entry
 * @param {String} pointer
 *    a valid JSON pointer conforming to rfc-6901
 * @param {*} value
 *    the value to set at the place indicated by the pointer
 *
 * @return {Object|Array}
 *    the modified object (for chaining)
 */
function setPointer(object, pointer, value) {
   var path = pointerToPath(pointer);
   return __WEBPACK_IMPORTED_MODULE_1_laxar__["object"].setPath(object, path, value);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Transform an rfc-6901 JSON pointer into a laxar object path.
 *
 * @param {String} pointer
 *    a valid JSON pointer conforming to rfc-6901
 *
 * @return {String}
 *    a path that can be used with laxar.object.path
 */
function pointerToPath(pointer) {
   var keys = pointer.split('/').slice(1);
   if (pointer.indexOf('~') !== -1) {
      var len = keys.length;
      for (var i = 0; i < len; ++i) {
         keys[i] = keys[i].replace(/~1/g, '/').replace(/~0/g, '~');
      }
   }
   return keys.join('.');
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Transform a laxar object path into an rfc-6901 JSON pointer.
 *
 * @param {String} path
 *    a LaxarJS object path where segments are separated using '.'
 *
 * @return {String}
 *    a valid JSON pointer conforming to rfc-6901
 */
function pathToPointer(path) {
   if (path === '') {
      return '';
   }
   var keys = path.split('.');
   if (path.indexOf('/') !== -1 || path.indexOf('~') !== -1) {
      var len = keys.length;
      for (var i = 0; i < len; ++i) {
         keys[i] = keys[i].replace(/~/g, '~0').replace(/\//g, '~1');
      }
   }
   var relativePointer = keys.join('/');
   return '/' + relativePointer;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Calls fast-json-patch to apply the given rfc-6902 JSON patch sequence in-place. If the patch sequence
 * fails to apply, the behavior is undefined.
 *
 * @param {Object|Array} object
 *    the object to patch (in-place)
 * @param {Array} patches
 *    a sequence of patches as defined by rfc-6902
 */
function applyPatch(object, patches) {
   __WEBPACK_IMPORTED_MODULE_0_fast_json_patch___default.a.apply(object, patches);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Calls fast-json-patch to create a rfc-6902 conform JSON patch sequence.
 *
 * @param {Object|Array} fromState
 *    the state on which to base the list of patches
 * @param {Object|Array} toState
 *    the target state: the desired result of applying the newly created patches to the `fromState`
 *
 * @return {Array}
 *    a sequence of patches as defined by rfc-6902
 */
function createPatch(fromState, toState) {
   return __WEBPACK_IMPORTED_MODULE_0_fast_json_patch___default.a.compare(fromState, toState);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_laxar__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apply", function() { return apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return merge; });
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */
/**
 * Module for old-style LaxarJS patches used with the didUpdate event.
 *
 * @module patches
 */


//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Applies all patches given as mapping from object path to new value. If a path fragment doesn't exist
 * it is automatically inserted, using an array if the next key would be an integer. If a value is
 * appended to an array all values in between are set to `null`.
 *
 * This patch format cannot express all operations. Use `json.applyPatch` instead.
 *
 * @deprecated since v1.1
 *
 * @param {Object} obj
 *    the object to apply the patches on
 * @param {Object} patches
 *    the mapping of paths to new values
 */
function apply(obj, patches) {
   var patchMap = void 0;
   if (Array.isArray(patches)) {
      patchMap = {};
      var arr = patches;
      arr.forEach(function (value, key) {
         if (value !== undefined) {
            patchMap[key] = value;
         }
      });
   } else {
      patchMap = patches;
   }

   // We sort the keys by length. Thus deeply nested attributes are not overwritten by patches applied to
   // one of their parents.
   Object.keys(patches).sort(function (a, b) {
      return a.length - b.length;
   }).forEach(function (path) {
      return __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].setPath(obj, path, patches[path]);
   });
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates a map of patches that describe the difference between to objects or arrays. Each entry is a
 * path mapped to the changed value. This map can be applied to another object using `applyPatches`.
 *
 * Properties that start with '$$' are ignored when creating patches, so that for example the $$hashCode
 * added by AngularJS ngRepeat is ignored.
 *
 * This patch format cannot express all operations. Use `json.createPatch` instead.
 *
 * @deprecated since v1.1
 *
 * @param {Object} result
 *    the resulting object the patch map should establish
 * @param {Object} base
 *    the object used to base the patches upon
 *
 * @return {Object}
 *    the mapping of path to patch-value
 */
function create(result, base) {
   var targetType = type(result);
   var subjectType = type(base);
   if (targetType !== 'array' && targetType !== 'object') {
      return null;
   }

   if (targetType !== subjectType) {
      return __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].deepClone(result);
   }
   var patches = {};

   function createPatchesRecursively(result, base, path) {
      for (var key in result) {
         if (result.hasOwnProperty(key) && (key.charAt(0) !== '$' || key.charAt(1) !== '$')) {
            var val = result[key];
            var nextPath = path.concat(key);
            if (base[key] == null) {
               patches[nextPath.join('.')] = clean(__WEBPACK_IMPORTED_MODULE_0_laxar__["object"].deepClone(val));
            } else if (val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
               createPatchesRecursively(val, base[key], nextPath);
            } else if (val !== base[key]) {
               patches[nextPath.join('.')] = val;
            }
         }
      }

      for (var _key in base) {
         if (base.hasOwnProperty(_key)) {
            if (!(_key in result)) {
               patches[path.concat(_key).join('.')] = null;
            }
         }
      }
   }
   createPatchesRecursively(result, base, []);

   return patches;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Merges two patch maps and returns the result. When properties exist in both patch maps, properties
 * within the second map overwrite those found within the first one.
 *
 * This patch format cannot express all operations.
 * Concatenate `json.createPatch` sequences instead of using this method.
 *
 * @deprecated since v1.1
 *
 * @param {Object} first
 *    first map to merge
 * @param {Object} second
 *    second map to merge
 *
 * @return {Object}
 *    the result of the merging
 */
function merge(first, second) {
   var resultMap = {};
   var firstKeys = Object.keys(first);
   var secondKeys = Object.keys(second);
   firstKeys.forEach(function (firstKey) {
      // we first collect all properties in first, that won't be overwritten by changes in the second
      // patch map.
      for (var i = 0; i < secondKeys.length; ++i) {
         // thus completely matching keys and keys that are finer than one in the second map are ignored
         if (firstKey === secondKeys[i] || firstKey.indexOf(secondKeys[i] + '.') === 0) {
            return;
         }
      }

      resultMap[firstKey] = first[firstKey];
   });

   secondKeys.forEach(function (secondKey) {
      // we know only have keys that are absolutely finer than those in the first patch map OR affect a
      // completely different property that should be patched.
      for (var i = 0; i < firstKeys.length; ++i) {
         var firstKey = firstKeys[i];
         var firstKeyAsPathFragment = firstKey + '.';
         if (secondKey.indexOf(firstKeyAsPathFragment) === 0) {
            // here we found a finer change in the second patch map that needs to be merged into the more
            // general change of the first patch map
            var patch = {};
            patch[secondKey.replace(firstKeyAsPathFragment, '')] = second[secondKey];
            var change = first[firstKey];
            apply(change, patch);
            resultMap[firstKey] = change;

            return;
         }
      }

      resultMap[secondKey] = second[secondKey];
   });

   return resultMap;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function type(object) {
   if (object === null) {
      return 'null';
   }
   if (object === undefined) {
      return 'undefined';
   }

   var tmp = Object.prototype.toString.call(object).split(' ')[1];
   if (!tmp) {
      return undefined;
   }
   return tmp.substr(0, tmp.length - 1).toLowerCase();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function clean(object) {
   if (object === null) {
      return object;
   }
   for (var key in object) {
      if (object.hasOwnProperty(key)) {
         if (key.charAt(0) === '$' && key.charAt(1) === '$') {
            delete object[key];
         } else if (_typeof(object[key]) === 'object') {
            clean(object[key]);
         }
      }
   }
   return object;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_fast_json_patch__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_fast_json_patch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_fast_json_patch__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_laxar__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_laxar__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "replaceHandler", function() { return replaceHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateHandler", function() { return updateHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "replacePublisherForFeature", function() { return replacePublisherForFeature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePublisherForFeature", function() { return updatePublisherForFeature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSame", function() { return isSame; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handlerFor", function() { return handlerFor; });
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */
/**
 * This module provides helpers for patterns regarding *didReplace* and *didUpdate* events.
 *
 * Definition of the `context` object mentioned throughout this api:
 *
 * In the simplest case this can be the AngularJS `$scope` passed into a widget. Technically this can be
 * any object exposing these three properties:
 * - `eventBus`: The event bus instance used for event subscriptions and publishing events
 * - `features`: The configuration of the widget, used for automagical resource handling
 * - `resources`: An object where all registered resources and updates to them are written to. Will be
 *   added if it doesn't exist.
 *
 * @module resources
 */



//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates and returns a simple handler function for didReplace events. Replaces will be written to
 * `context.resources` under the given value for `modelKey`.
 *
 * @param {Object} context
 *    the context the handler works on
 * @param {String} modelKey
 *    the property of `context.resources` the handler writes replaces to
 *
 * @return {Function}
 *    the handler function
 */
function replaceHandler(context, modelKey) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(context).hasType(Object).isNotNull();
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(modelKey).hasType(String).isNotNull();

   var resourceBucket = provideResourceBucket(context);
   return function (event) {
      if (resourceBucket[modelKey] == null && event.data == null) {
         return false;
      }

      resourceBucket[modelKey] = event.data;
      return true;
   };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates and returns a simple handler function for didUpdate events. Updates will be written to
 * `context.resources` under the given value for `modelKey`.
 *
 * @param {Object} context
 *    the context the handler works on
 * @param {String} modelKey
 *    the property of `context.resources` the handler applies updates to
 *
 * @return {Function}
 *    the handler function
 */
function updateHandler(context, modelKey) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(context).hasType(Object).isNotNull();
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(modelKey).hasType(String).isNotNull();

   var resourceBucket = provideResourceBucket(context);
   return function (event) {
      if (resourceBucket[modelKey] != null && Array.isArray(event.patches)) {
         __WEBPACK_IMPORTED_MODULE_0_fast_json_patch___default.a.apply(resourceBucket[modelKey], event.patches);
         return true;
      }

      return false;
   };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates and returns a function to publish didReplace events for the resource found as feature
 * configuration. Resolution of the `featurePath` argument works just as explained in the documentation for
 * {@link ResourceHandler#registerResourceFromFeature}. The publisher returns the promise returned by
 * the underlying event bus call.
 *
 * @param {Object} context
 *    the context the publisher works on
 * @param {String} featurePath
 *    the property of `context.features` the publisher reads the resource name from
 * @param {Object} [optionalOptions]
 *    options for the publisher
 * @param {Boolean} optionalOptions.deliverToSender
 *    the value is forwarded to `eventBus.publish`: if `true` the event will also be delivered to the
 *    publisher. Default is `false`
 * @param {Boolean} optionalOptions.isOptional
 *    if `true`, don't throw an error if `featurePath.resource` is missing. Instead return a publisher
 *    that doesn't do anything when called. Default is `false`.
 *
 * @return {Function}
 *    the publisher function. Takes the data to publish as single argument
 */
function replacePublisherForFeature(context, featurePath, optionalOptions) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(context).hasType(Object).isNotNull();
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(context.eventBus).hasType(Object).isNotNull();

   var options = Object.assign({ deliverToSender: false }, optionalOptions);

   var resourceName = __WEBPACK_IMPORTED_MODULE_1_laxar__["object"].path(context.features, featurePath + '.resource');
   if (!resourceName && options.isOptional) {
      return function () {
         return Promise.resolve();
      };
   }
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(resourceName).hasType(String).isNotNull();

   return function (replacement) {
      return context.eventBus.publish('didReplace.' + resourceName, {
         resource: resourceName,
         data: replacement
      }, {
         deliverToSender: !!options.deliverToSender
      });
   };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates and returns a function to publish didUpdate events for the resource found as feature
 * configuration. Resolution of the `featurePath` argument works just as explained in the documentation for
 * {@link ResourceHandler#registerResourceFromFeature}. The publisher returns the promise returned by
 * the underlying event bus call. The returned function only accepts one argument, which is the JSON patch
 * sequence conforming to [RFC 6902](https://tools.ietf.org/html/rfc6902).
 *
 * Example:
 * ```js
 * const publisher = resources.updatePublisherForFeature( context, path );
 * publisher( [
 *    { op: 'remove', path: '/accounts/2' },
 *    { op: 'replace', path: '/contacts/hans/number', value: '+49 123 4563432' }
 * ] );
 * ```
 *
 * Additionally the returned function has a method `compareAndPublish` that accepts the previous version of
 * a resource as first argument and the current version of the resource as second argument. It then creates
 * the JSON patch sequence itself and sends the according didUpdate event. It also returns the promise
 * returned by the underlying event bus call.
 *
 * Example:
 * ```js
 * const publisher = resources.updatePublisherForFeature( context, path );
 * publisher.compareAndPublish( obsoleteVersion, currentVersion );
 * ```
 *
 * Note that a generic generation of patches might lead to strange, large patch sequences, especially when
 * removing entries. The diff library doesn't know about identities and as such won't recognize where a
 * specific element was removed. As a consequence instead of generating a remove operation, this could
 * result in a very large number of replace operations that shift the properties from successors to the
 * front in order to overwrite instead of remove the entry.
 * In such cases one is better off by manually creating a patch with operation remove, as the knowledge
 * about the domain is available at the user of this publisher.
 *
 * @param {Object} context
 *    the context the publisher works on
 * @param {String} featurePath
 *    the property of `context.features` the publisher reads the resource name from
 * @param {Object} [optionalOptions]
 *    options for the publisher
 * @param {Boolean} optionalOptions.deliverToSender
 *    the value is forward to `eventBus.publish`: if `true` the event will also be delivered to the
 *    publisher. Default is `false`
 * @param {Boolean} optionalOptions.isOptional
 *    if `true`, don't throw an error if `featurePath.resource` is missing. Instead return a publisher
 *    that doesn't do anything when called. Default is `false`.
 *
 * @return {Function}
 *    the publisher function as described above
 */
function updatePublisherForFeature(context, featurePath, optionalOptions) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(context).hasType(Object).isNotNull();
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(context.eventBus).hasType(Object).isNotNull();

   var options = Object.assign({ deliverToSender: false }, optionalOptions);

   var resource = __WEBPACK_IMPORTED_MODULE_1_laxar__["object"].path(context.features, featurePath + '.resource');
   if (!resource && options.isOptional) {
      var noopPublisher = function noopPublisher() {
         return Promise.resolve();
      };
      noopPublisher.compareAndPublish = noopPublisher;
      return noopPublisher;
   }
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(resource).hasType(String).isNotNull();

   var publisher = function publisher(patches) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(patches).hasType(Array).isNotNull();

      if (!patches || !patches.length) {
         context.log.trace('updatePublisher: Not sending empty didUpdate to resource "[0]" from sender "[1]".', resource, (context.widget || { id: 'unknown' }).id);
         return Promise.resolve();
      }

      var meta = { deliverToSender: !!options.deliverToSender };
      return context.eventBus.publish('didUpdate.' + resource, { resource: resource, patches: patches }, meta);
   };

   publisher.compareAndPublish = function (from, to) {
      return publisher(__WEBPACK_IMPORTED_MODULE_0_fast_json_patch___default.a.compare(from, to));
   };

   return publisher;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates a new handler instance for didReplace and didUpdate events. It already handles setting of the
 * resource data on didReplace in the context.resources property and updating that data on didUpdate events.
 *
 * @param {Object} context
 *    the context the handler should work with. It expects to find an `eventBus` property there with which
 *    it can do the event handling
 *
 * @return {ResourceHandler}
 *    a resource handler instance
 */
function handlerFor(context) {
   return new ResourceHandler(context);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function ResourceHandler(context) {
   this.context_ = context;
   this.externalHandlers_ = {};
   this.modelHandlers_ = {};
   this.waitingFor_ = [];
   this.allReplacedCallback_ = function () {};
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Registers default event handlers for a feature. The `feature` argument is interpreted as attribute
 * path to an object having a `resource` property of type string holding the name of the resource to
 * register the handler for. All replacements and updates will be written to `context.resources` by the
 * rules written at `options.modelKey` doc.
 *
 * Example:
 * Consider the following configuration:
 * ```json
 * {
 *    "features": {
 *       "someFeature": {
 *          "someResourceConfig": {
 *             "resource": "myResource"
 *          }
 *       }
 *    }
 * }
 * ```
 *
 * The corresponding call, using an AngularJS Scope as context, would be (providing none of the options):
 *
 * ```js
 * patterns.resources.handlerFor( $scope )
 *    .registerResourceFromFeature( 'someFeature.someResourceConfig' );
 * ```
 *
 * @param {String} featurePath
 *    the attribute path to the feature for the resource
 * @param {Object|Function} [optionalOptions]
 *    options and callbacks to use. If a function is passed, it is used as the `onUpdateReplace` option.
 * @param {Function|Function[]} optionalOptions.onReplace
 *    a function or a list of functions to call when a didReplace event is received. Each function
 *    receives the event object as argument. If `options.omitFirstReplace` is `true`, it is only called
 *    first the second time a didReplace event occurs
 * @param {Function|Function[]} optionalOptions.onUpdate
 *    a function or a list of functions to call when a didUpdate event is received. Each function
 *    receives the event object as argument
 * @param {Function|Function[]} optionalOptions.onUpdateReplace
 *    a function or a list of functions to call when a didUpdate or a didReplace event is received. Each
 *    function receives the event object as argument. If `options.omitFirstReplace` is `true`, it is
 *    not called for the first received didReplace event
 * @param {Boolean} optionalOptions.omitFirstReplace
 *    if `true` `options.onReplace` is only called after the
 *    first time a didReplace event occurred. Default is `false`
 * @param {String} optionalOptions.modelKey
 *    the key to use for the resource in `context.resources`. If not given the last path fragment of
 *    `featurePath` is used. For example if the path is `myfeature.superResource` the key will be
 *    `superResource`
 * @param {Boolean} optionalOptions.isOptional
 *    if set to `true`, missing configuration for this resource is silently ignored and no handlers
 *    are registered. If set to `false`, an error will be raised in this case (default is `false`)
 *
 * @return {ResourceHandler}
 *    this instance for chaining
 */
ResourceHandler.prototype.registerResourceFromFeature = function (featurePath, optionalOptions) {
   var resource = __WEBPACK_IMPORTED_MODULE_1_laxar__["object"].path(this.context_.features, featurePath + '.resource', null);
   var options = Object.assign({
      isOptional: false
   }, typeof optionalOptions === 'function' ? { onUpdateReplace: optionalOptions } : optionalOptions);
   if (resource === null && options.isOptional) {
      return this;
   }
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(resource).isNotNull('Could not find resource configuration in features for "' + featurePath + '"');

   if (!options.modelKey) {
      options.modelKey = featurePath.substr(featurePath.lastIndexOf('.') + 1);
   }

   return this.registerResource(resource, options);
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Registers default event handlers for a known resource name. All replacements and updates will be
 * written to `context.resources`.
 *
 * @param {String} resource
 *    the resource the handler should be registered for
 * @param {Object|Function} [optionalOptions]
 *    options and callbacks to use. If a function is passed, it is used as the `onUpdateReplace` option.
 * @param {Function|Function[]} optionalOptions.onReplace
 *    a function or a list of functions to call when a didReplace event is received. Each function
 *    receives the event object as argument. If `options.omitFirstReplace` is `true`, it is only called
 *    first the second time a didReplace event occurs
 * @param {Function|Function[]} optionalOptions.onUpdate
 *    a function or a list of functions to call when a didUpdate event is received. Each function
 *    receives the event object as argument
 * @param {Function|Function[]} optionalOptions.onUpdateReplace
 *    a function or a list of functions to call when a didUpdate or a didReplace event is received. Each
 *    function receives the event object as argument. If `options.omitFirstReplace` is `true`, it is
 *    only called first for didReplace events the second time such an event occurs
 * @param {Boolean} optionalOptions.omitFirstReplace
 *    if `true` `options.onReplace` is only called after the first time a didReplace event occurred.
 *    Default is `false`
 * @param {String} optionalOptions.modelKey
 *    the key to use for the resource in `context.resources`. If not given the value of `resource` is
 *    used
 *
 * @return {ResourceHandler}
 *    this instance for chaining
 */
ResourceHandler.prototype.registerResource = function (resource, optionalOptions) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(resource).hasType(String).isNotNull();

   var options = Object.assign({
      omitFirstReplace: false,
      modelKey: resource
   }, typeof optionalOptions === 'function' ? { onUpdateReplace: optionalOptions } : optionalOptions);

   this.waitingFor_.push(resource);
   registerResourceHandlers(this, resource, options);

   if (!(resource in this.modelHandlers_)) {
      this.modelHandlers_[resource] = {};
   }

   registerForReplace(this, resource, options);
   registerForUpdate(this, resource, options);

   return this;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Registers a callback that is called once all resources were initially replaced. If more resource
 * handlers are registered before all relevant didReplace events were received, those are also waited
 * for.
 *
 * @param {Function} callback
 *     the function to call
 * @param {Boolean} [optionalOptions]
 *    an optional set of parameters to specify watch behavior
 * @param {Boolean} optionalOptions.watch
 *    if `true`, the callback will be called again whenever resources are modified after all were
 *    replaced at least once
 *
 * @return {ResourceHandler}
 *    this instance for chaining
 */
ResourceHandler.prototype.whenAllWereReplaced = function (callback, optionalOptions) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_laxar__["assert"])(callback).hasType(Function).isNotNull();

   this.allReplacedCallback_ = optionalOptions && optionalOptions.watch ? callback : onceCallback;

   return this;

   function onceCallback() {
      callback();
      this.allReplacedCallback_ = function () {};
   }
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Allows to find out if there are still outstanding resources, or if all resources have been replaced.
 * Can be used in update-/replace-handlers to determine if all dependencies are satisfied.
 *
 * @return {Boolean}
 *    `true` if all resources registered with this handler (so far) have been replaced at least once,
 *    `false` if there are still outstanding resources
 */
ResourceHandler.prototype.wereAllReplaced = function () {
   return !this.waitingFor_.length;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function registerResourceHandlers(self, resource, options) {
   if (!self.externalHandlers_[resource]) {
      self.externalHandlers_[resource] = {
         onReplace: [],
         onUpdate: []
      };
   }

   appendFunctionOrArrayOfFunctions(self.externalHandlers_[resource].onUpdate, options.onUpdate);
   appendFunctionOrArrayOfFunctions(self.externalHandlers_[resource].onUpdate, options.onUpdateReplace);

   var replaceHandlers = [];
   appendFunctionOrArrayOfFunctions(replaceHandlers, options.onReplace);
   appendFunctionOrArrayOfFunctions(replaceHandlers, options.onUpdateReplace);

   if (options.omitFirstReplace) {
      replaceHandlers = replaceHandlers.map(function (handler) {
         return ignoringFirstCall(handler);
      });
   }

   function ignoringFirstCall(f) {
      var ignore = true;
      return function () {
         for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
         }

         if (ignore) {
            ignore = false;
            return;
         }
         f.apply(self, args);
      };
   }

   appendFunctionOrArrayOfFunctions(self.externalHandlers_[resource].onReplace, replaceHandlers);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function registerForReplace(self, resource, options) {
   var handler = replaceHandler(self.context_, options.modelKey);
   if (self.modelHandlers_[resource].onReplace) {
      self.modelHandlers_[resource].onReplace.push(handler);
      return;
   }
   self.modelHandlers_[resource].onReplace = [handler];

   self.context_.eventBus.subscribe('didReplace.' + resource, function (event, meta) {
      var changed = self.modelHandlers_[resource].onReplace.reduce(function (changed, handler) {
         return handler(event, meta) || changed;
      }, false);

      if (!changed) {
         return;
      }

      try {
         self.externalHandlers_[resource].onReplace.forEach(function (handler) {
            return handler(event, meta);
         });
      } finally {
         self.waitingFor_ = self.waitingFor_.filter(function (topic) {
            return topic !== resource;
         });
         if (!self.waitingFor_.length) {
            self.allReplacedCallback_();
         }
      }
   });
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function registerForUpdate(self, resource, options) {
   var handler = updateHandler(self.context_, options.modelKey);
   if (self.modelHandlers_[resource].onUpdate) {
      self.modelHandlers_[resource].onUpdate.push(handler);
      return;
   }
   self.modelHandlers_[resource].onUpdate = [handler];

   self.context_.eventBus.subscribe('didUpdate.' + resource, function (event, meta) {
      var changed = self.modelHandlers_[resource].onUpdate.reduce(function (changed, handler) {
         return handler(event, meta) || changed;
      }, false);

      if (!changed) {
         return;
      }

      try {
         self.externalHandlers_[resource].onUpdate.forEach(function (handler) {
            return handler(event, meta);
         });
      } finally {
         if (!self.waitingFor_.length) {
            self.allReplacedCallback_();
         }
      }
   });
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function appendFunctionOrArrayOfFunctions(target, funcOrArray) {
   if (typeof funcOrArray === 'function') {
      target.push(funcOrArray);
      return;
   }

   if (Array.isArray(funcOrArray)) {
      Array.prototype.push.apply(target, funcOrArray);
   }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function provideResourceBucket(context) {
   if (!context.hasOwnProperty('resources') || _typeof(context.resources) !== 'object') {
      context.resources = {};
   }

   return context.resources;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Tests if two objects represent the same resource.
 *
 * The test takes place as follows:
 *  - Let value of `counter` be zero.
 *  - For each attribute (or attribute path) in `attribute` test the following:
 *    - If both objects contain the attribute (or a defined value at the given path), check for
 *       identity using `===`.
 *       - If this check is negative, skip further testing and let the result of the function be `false`.
 *       - If it is positive, increment `counter`.
 *    - If none of the objects contains the attribute (or a defined value at the given path), skip to
 *       the next attribute.
 *    - If the attribute (or a defined value at the given path) exist only in one of the objects, skip
 *       further testing and let the result of the function be `false`.
 *  - If all attributes have been tested and the value of `counter` is greater than zero, let the result
 *    of the function be `true`, `false` otherwise.
 *
 * @param {Object} resourceA
 *    the first object to test
 * @param {Object} resourceB
 *    the second object to test
 * @param {String[]} compareAttributes
 *    the list of attributes determining resource identity
 *
 * @return {Boolean}
 *    `true` if both objects are assumed to represent the same resource, `false` otherwise
 */
function isSame(resourceA, resourceB, compareAttributes) {
   if (resourceA == null || resourceB == null) {
      return false;
   }

   var matches = 0;
   for (var i = 0; i < compareAttributes.length; ++i) {
      var key = compareAttributes[i];
      if (key.indexOf('.') !== -1) {
         // Compare using object.path (only if needed, for performance):
         var valueA = __WEBPACK_IMPORTED_MODULE_1_laxar__["object"].path(resourceA, key);
         var valueB = __WEBPACK_IMPORTED_MODULE_1_laxar__["object"].path(resourceB, key);
         if (valueA === undefined && valueB === undefined) {
            continue;
         }
         if (valueA === valueB) {
            ++matches;
         } else {
            return false;
         }
      } else {
         if (!(key in resourceA) && !(key in resourceB)) {
            continue;
         }
         if (resourceA[key] === resourceB[key]) {
            ++matches;
         } else {
            return false;
         }
      }
   }
   return matches > 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



/***/ }),
/* 226 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_laxar__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "successEvent", function() { return successEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "errorEvent", function() { return errorEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handlerFor", function() { return handlerFor; });
/**
 * Copyright 2014-2015 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */
/**
 * This module provides helpers for patterns regarding *validateRequest*, *willValidate* and
 * *didValidate* events.
 *
 * Validation messages can have one of the following structures:
 * - A simple html message object (locale to string mapping). It will get a default level of *ERROR*.
 * - A html message object as required by the messages widget consisting of a html message object under the
 *   key *htmlMessage* and a level under the key *level*.
 *
 * @module validation
 */


/**
 * Creates and returns an event resembling a successful validation result.
 *
 * @param {String} resource
 *    name of the validated resource
 * @param {...Object|String|String[]|Object[]} htmlMessages
 *    messages associated with the result. They should have the structure as described in the module
 *
 * @return {Object}
 *    the validation event
 */
function successEvent(resource) {
   for (var _len = arguments.length, htmlMessages = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      htmlMessages[_key - 1] = arguments[_key];
   }

   return createEvent(resource, messagesFromArgs(htmlMessages), 'SUCCESS');
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates and returns an event resembling the result of a validation with errors.
 *
 * @param {String} resource
 *    name of the validated resource
 * @param {...Object|String|String[]|Object[]} htmlMessages
 *    messages associated with the result. They should have the structure as described in the module
 *
 * @return {Object}
 *    the validation event
 */
function errorEvent(resource) {
   for (var _len2 = arguments.length, htmlMessages = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      htmlMessages[_key2 - 1] = arguments[_key2];
   }

   return createEvent(resource, messagesFromArgs(htmlMessages), 'ERROR');
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Creates and returns a new handler for `validateRequest` events for a given context. It handles sending
 * of `willValidate` and `didValidate` events, including the output of the given `validator` function.
 *
 * @param {Object} context
 *    the context the handler should work with. It expects to find an `eventBus` property, with which
 *    it can do the event handling
 * @param {Object} configuration
 *    a laxarjs configuration, from which to get the default validation error message
 * @param {Object} log
 *    a laxarjs logger, to log validation errors
 *
 * @return {ValidationHandler}
 *    the validation handler instance for the given context
 */
function handlerFor(context, configuration, log) {
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(context).hasType(Object).hasProperty('eventBus');
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(configuration).hasType(Object).hasProperty('get');
   __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(log).hasType(Object).hasProperty('error');

   var eventBus = context.eventBus;

   /**
    * @name ValidationHandler
    */
   var api = {
      registerResourceFromFeature: registerResourceFromFeature,
      registerResource: registerResource
   };

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   /**
    * Registers a validator for `validateRequest` events for a resource configured under the given feature.
    * It is assumed that the given feature has a `resource` property with the name of the resource to
    * validate. If the property is not found, an assertion will fail. If on the other hand the option
    * `isOptional` is given as `true`, this is ignored and nothing good or bad happens.
    *
    * Apart from that this function works just like {@link ValidationHandler#registerResource}.
    *
    * Example:
    * Consider the following configuration for a widget:
    * ```json
    * {
    *    "features": {
    *       "amount": {
    *          "resource": "theAmount"
    *       }
    *    }
    * }
    * ```
    * An example using that would be:
    * ```js
    * validation.handlerFor( context )
    *    .registerResourceFromFeature( 'amount', function( event, meta ) {
    *       if( isAmountValid() ) {
    *          return null;
    *       }
    *       return 'The given amount is not valid';
    *    } );
    * ```
    *
    * @param {String} featurePath
    *    the feature to read the resource to validate from
    * @param {Function} validator
    *    the validator function called upon `validateRequest` for the given resource
    * @param {Object} [optionalOptions]
    *    options to use
    * @param {Boolean} optionalOptions.isOptional
    *    if `true` a non-configured feature is simply ignored. Otherwise this results in an error
    *    (default is `false`)
    *
    * @return {ValidationHandler}
    *    this instance for chaining
    *
    * @memberOf ValidationHandler
    */
   function registerResourceFromFeature(featurePath, validator, optionalOptions) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(featurePath).hasType(String).isNotNull();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(validator).hasType(Function).isNotNull();

      var options = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].options(optionalOptions, { isOptional: false });

      var resource = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].path(context.features, featurePath + '.resource', null);
      if (resource === null && options.isOptional) {
         return api;
      }
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(resource).isNotNull('Could not find resource configuration in features for "' + featurePath + '"');

      return registerResource(resource, validator);
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   /**
    * Registers a validator for `validateRequest` events for the given resource.
    *
    * The validator must be a function, that handles the actual validation necessary for the resource. The
    * validation result is always signaled through one or more generated error messages or the absence of
    * these messages. So valid results may be a string, an i18n object, an array of the former, `null` or
    * an empty array. `null` and an empty array signal a successful validation.
    *
    * The validator receives the event object for the `validateRequest` event and its according `meta` object.
    *
    * The way these messages are returned by the validator may be one of two ways, depending on the nature
    * of the validation:
    *
    * - if the validation can be handled synchronously, the result should simply be returned directly
    * - in case the validation is asynchronous, a promise must be returned, which must be resolved with the
    *   same kind of values as for the synchronous case
    *
    * If the validator throws an error or the promise is rejected, this is treated as a failed validation.
    * Since this is due to a programming error, the error or rejection cause will be logged and a
    * configurable message will instead be send in the `didValidate` event. The message is assumed to be
    * found in the global configuration at `lib.laxar-patterns.validation.i18nHtmlExceptionMessage` as string
    * or i18n object. If it cannot be found, an empty string is send as message.
    *
    * Example:
    * ```js
    * validation.handlerFor( context, configuration, log, i18n )
    *    .registerResource( 'theAmount', function( event, meta ) {
    *       return context.resources.theAmount > 1000;
    *    } )
    *    .registerResource( 'currentUser', function( event, meta ) {
    *       return fetchUserValidityRules()
    *          .then( function( rules ) {
    *             return context.resources.currentUser.meets( rules );
    *          } )
    *          .then( function( valid ) {
    *             return valid ? null : 'The current user isn\'t valid for some reason. Do something!';
    *          } );
    *    } );
    * ```
    *
    * @param {String} resource
    *    the resource to validate
    * @param {Function} validator
    *    the validator function called upon `validateRequest` for the given resource
    *
    * @return {ValidationHandler}
    *    this instance for chaining
    *
    * @memberOf ValidationHandler
    */
   function registerResource(resource, validator) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(resource).hasType(String).isNotNull();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_laxar__["assert"])(validator).hasType(Function).isNotNull();

      eventBus.subscribe('validateRequest.' + resource, function (event, meta) {
         callValidator(resource, validator.bind(null, event, meta));
      });
      return api;
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   // eslint-disable-next-line valid-jsdoc
   /** @private */
   function callValidator(resource, validator) {
      eventBus.publish('willValidate.' + resource, { resource: resource });
      try {
         var returnValue = validator();

         Promise.resolve(returnValue).then(function (result) {
            var wrap = function wrap(_) {
               return _ ? [_] : null;
            };
            var messages = Array.isArray(result) ? result : wrap(result);
            var event = messages && messages.length > 0 ? errorEvent(resource, messages) : successEvent(resource);

            eventBus.publish('didValidate.' + resource + '.' + event.outcome, event);
         }).catch(handleError.bind(null, resource));
      } catch (err) {
         handleError(resource, err);
      }
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   // eslint-disable-next-line valid-jsdoc
   /** @private */
   function handleError(resource, err) {
      var logMessage = err && err.message ? err.message : err;
      log.error('Error handling validateRequest for resource "[0]": [1]', resource, logMessage);
      if (err) {
         log.error('Stacktrace for previous error: [0]', err.stack || 'unavailable');
      }

      var message = configuration.get('lib.laxar-patterns.validation.i18nHtmlExceptionMessage', '');
      eventBus.publish('didValidate.' + resource + '.ERROR', errorEvent(resource, message));
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   return api;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function createEvent(resource, htmlMessages, outcome) {
   var data = htmlMessages && htmlMessages.length ? htmlMessages.map(function (msg) {
      if (msg.htmlMessage && msg.level) {
         return msg;
      }

      return {
         htmlMessage: msg,
         level: 'ERROR'
      };
   }) : [];

   return { resource: resource, data: data, outcome: outcome };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function messagesFromArgs(messageArguments) {
   if (messageArguments && Array.isArray(messageArguments[0])) {
      return messageArguments[0];
   }
   return messageArguments;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



/***/ }),
/* 227 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_laxar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_laxar__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handlerFor", function() { return handlerFor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestPublisherForWidget", function() { return requestPublisherForWidget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestPublisherForArea", function() { return requestPublisherForArea; });
/**
 * Copyright 2016 aixigo AG
 * Released under the MIT license.
 * http://laxarjs.org/license
 */
/**
 * This module provides helpers for patterns regarding *changeAreaVisibilityRequest* and
 * *didChangeAreaVisibility* events.
 *
 * @module visibility
 */


/**
 * Creates a new handler instance for `didChangeAreaVisibility` events.
 *
 * @param {Object} scope
 *    the scope the handler should work with. It is expected to find an `eventBus` property there with
 *    which it can do the event handling. The visibility handler will manage the boolean scope property
 *    `isVisible` which can be used to determine the visibility state of the entire widget
 * @param {Object} [optionalOptions]
 *    additional options to pass to the visibility handler
 * @param {Function} optionalOptions.onChange
 *    a handler to call when a `didChangeAreaVisibility` request for this widget's container was received,
 *    and the visibility of this widget was changed
 * @param {Function} optionalOptions.onShow
 *    a handler to call when a `didChangeAreaVisibility` request for this widget's container was received,
 *    and the visibility of this widget was changed to `true`
 * @param {Function} optionalOptions.onHide
 *    a handler to call when a `didChangeAreaVisibility` request for this widget's container was received,
 *    and the visibility of this widget was changed to `false`
 * @param {Function} optionalOptions.onAnyAreaRequest
 *    a handler for any `changeAreaVisibilityRequest` to this widget's areas
 *    The handler must
 *     * _either_ return `true`/`false` to indicate visibility synchronously
 *     * _or_ issue a will/did-response for the area when called
 *
 * @return {VisibilityHandler}
 *    a visibility handler instance
 */
function handlerFor(scope, optionalOptions) {
   return new VisibilityHandler(scope, optionalOptions);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// eslint-disable-next-line valid-jsdoc
/** @private */
function VisibilityHandler(scope, optionalOptions) {
   this.scope = scope;
   scope.isVisible = false;

   var options = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].options(optionalOptions, {});

   if (options.onAnyAreaRequest) {
      var requestEvent = 'changeAreaVisibilityRequest.' + scope.widget.id;
      scope.eventBus.subscribe(requestEvent, responder(this, options.onAnyAreaRequest));
   }

   var didEvent = 'didChangeAreaVisibility.' + scope.widget.area;
   scope.eventBus.subscribe(didEvent, function (event) {
      var wasVisible = scope.isVisible || false;
      scope.isVisible = event.visible;
      if (wasVisible === event.visible) {
         return;
      }
      if (options.onChange) {
         options.onChange(event);
      }
      if (options.onShow && event.visible) {
         options.onShow(event);
      } else if (options.onHide && !event.visible) {
         options.onHide(event);
      }
   });
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Handle change-visibility-requests for a specific area, using a callback.
 *
 * @param {String} areaName
 *    the name of the area for which to handle visibility events
 * @param {Object=} optionalOptions
 *    additional options to pass to the visibility handler
 * @param {Function=} optionalOptions.onRequest
 *    a callback for any `changeAreaVisibilityRequest` to this area. The callback may issue a
 *    will/did-response for the area when called, or return a boolean which causes the visibility handler
 *    to respond accordingly. This should not be used in conjunction with the global
 *    `onAnyAreaRequest`-option of the handler
 *
 * @return {VisibilityHandler}
 *    this instance for chaining
 */
VisibilityHandler.prototype.registerArea = function (areaName, optionalOptions) {
   var options = __WEBPACK_IMPORTED_MODULE_0_laxar__["object"].options(optionalOptions, {});
   if (options.onRequest) {
      var requestEvent = 'changeAreaVisibilityRequest.' + areaName;
      this.scope.eventBus.subscribe(requestEvent, responder(this, options.onRequest));
   }
   return this;
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function responder(self, callback) {
   return function (event) {
      var result = callback(event);
      if (result === true || result === false) {
         var didEvent = 'didChangeAreaVisibility.' + event.area + '.' + result;
         self.scope.eventBus.publish(didEvent, {
            area: event.area,
            visible: result
         }, { deliverToSender: false });
      }
   };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Publishes `changeWidgetVisibilityRequest` events.
 *
 * @param {Object} scope
 *    a scope (with `widget` and `eventBus` properties)
 *
 * @return {Function}
 *    a function of boolean that requests for widget visibility to be set to the given state
 */
function requestPublisherForWidget(scope) {
   return function (visible) {
      var eventName = 'changeWidgetVisibilityRequest.' + scope.widget.id + '.' + visible;
      return scope.eventBus.publishAndGatherReplies(eventName, {
         widget: scope.widget.id,
         visible: visible
      }, { deliverToSender: false });
   };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Publishes `changeAreaVisibilityRequest` events.
 *
 * @param {Object} scope
 *    a scope (with an `eventBus` property)
 * @param {String} area
 *    the name of a widget area whose visibility is to be controlled by the function returned
 *
 * @return {Function}
 *    a function of boolean that requests for the given area's visibility to be set to the given state
 */
function requestPublisherForArea(scope, area) {
   return function (visible) {
      var eventName = 'changeAreaVisibilityRequest.' + area + '.' + visible;
      var meta = { deliverToSender: false };
      return scope.eventBus.publishAndGatherReplies(eventName, { area: area, visible: visible }, meta);
   };
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////



/***/ }),
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */
/***/ (function(module, exports) {

module.exports = {
	"name": "developer-toolbar-widget",
	"description": "Allows to show widget outlines and to display an alignment grid for the host application",
	"integration": {
		"technology": "react",
		"type": "widget"
	},
	"styleSource": "scss/developer-toolbar-widget.scss",
	"features": {
		"$schema": "http://json-schema.org/draft-04/schema#",
		"type": "object",
		"required": [
			"grid"
		],
		"properties": {
			"grid": {
				"type": "object",
				"required": [
					"resource"
				],
				"properties": {
					"resource": {
						"type": "string",
						"format": "topic",
						"axRole": "inlet"
					}
				}
			},
			"tabs": {
				"type": "object",
				"required": [
					"parameter"
				],
				"properties": {
					"parameter": {
						"type": "string",
						"format": "topic",
						"default": "events"
					}
				}
			},
			"detailsOn": {
				"type": "array",
				"description": "Publish the state if a LaxarJS application is running in the inspected window.",
				"items": {
					"type": "string",
					"format": "flag-topic",
					"axPattern": "flag",
					"description": "The topic through which to publish the current state."
				}
			}
		}
	}
};

/***/ }),
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

/* global __resourceQuery */
module.exports = __webpack_require__( 452 );


/***/ }),
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.







axDeveloperToolsToggleGrid = axDeveloperToolsToggleGrid; /**
                                                          * Copyright 2017 aixigo AG
                                                          * Released under the MIT license.
                                                          * http://www.laxarjs.org
                                                          */ /* global chrome */function axDeveloperToolsToggleGrid(gridSettings) {var hostDocument = void 0;var id = 'laxar-developer-tools-grid';if (window.chrome && chrome.runtime && chrome.runtime.id) {hostDocument = window.document;
   } else
   {
      hostDocument = applicationWindow().document;
   }

   var grid = hostDocument.getElementById(id);
   if (grid === null) {
      createGrid(id);
   } else
   if (window.getComputedStyle(grid).getPropertyValue('display') === 'none') {
      grid.style.display = 'block';
   } else
   if (grid !== null && window.getComputedStyle(grid).getPropertyValue('display') === 'block') {
      grid.style.display = 'none';
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   function applicationWindow() {
      return window.opener || window.parent || window;
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   function createGrid(id) {
      var grid = hostDocument.createElement('div');
      grid.setAttribute('id', id);
      createSettings();
      Object.keys(gridSettings.css).forEach(function (key) {
         grid.style[key] = gridSettings.css[key];
      });
      var anchorElement = hostDocument.querySelector(gridSettings.anchor);
      anchorElement.insertBefore(
      grid,
      anchorElement.childNodes[0]);

   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   function createSettings() {
      gridSettings = {
         anchor: gridSettings.anchor || '[data-ax-page], [ax-page]',
         columns: {
            count: setValue(gridSettings.columns.count, 12),
            width: setValue(gridSettings.columns.width, 78),
            gutter: setValue(gridSettings.columns.gutter, 26),
            padding: setValue(gridSettings.columns.padding, 13) },

         css: gridSettings.css || {} };


      var defaultCss = {
         'background-position': gridSettings.columns.padding + 'px 0',
         'margin': '0 auto',
         'padding': '0 ' + gridSettings.columns.padding + 'px',
         'box-sizing': 'content-box',
         'position': 'fixed',
         'top': 0,
         'right': 0,
         'bottom': 0,
         'left': 0,
         'z-index': 100,
         'width': gridSettings.columns.count * gridSettings.columns.width +
         (gridSettings.columns.count - 1) * gridSettings.columns.gutter +
         'px',
         'background-image': 'url("' + columnBackgroundUri(gridSettings.columns) + '")' };

      gridSettings.css = mergeObjects(gridSettings.css, defaultCss);

      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      function setValue(value, defaultValue) {
         return typeof value === 'undefined' ? defaultValue : value;
      }

      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      function mergeObjects(target, source) {
         Object.keys(source).forEach(function (key) {
            if (!target.hasOwnProperty(key)) {
               target[key] = source[key];
            }
         });
         return target;
      }
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   function columnBackgroundUri(settings) {
      var bgCanvas = document.createElement('canvas');
      var height = 64;
      var width = parseInt(settings.width);
      var padding = parseInt(settings.padding);
      bgCanvas.width = width + parseInt(settings.gutter);
      bgCanvas.height = height;
      var context = bgCanvas.getContext('2d');
      // padding
      context.fillStyle = 'rgba(229, 111, 114, 0.25)';
      context.fillRect(0, 0, padding, height);
      context.fillRect(width - padding, 0, padding, height);
      // column
      context.fillStyle = 'rgba(229, 111, 114, 0.4)';
      context.fillRect(padding, 0, width - 2 * padding, height);
      return bgCanvas.toDataURL();
   }
}

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true }); /**
                                                                             * Copyright 2017 aixigo AG
                                                                             * Released under the MIT license.
                                                                             * http://www.laxarjs.org
                                                                             */

/* global chrome */

var axDeveloperToolsToggleWidgetOutline = exports.axDeveloperToolsToggleWidgetOutline = function () {
   var infoId = void 0;
   var isBrowserWebExtension = void 0;
   var document = void 0;
   var INFO_LAYER_STYLE = {
      'position': 'fixed',
      'top': '-5px',
      'left': '-5px',
      'box-shadow': '2px 2px 15px rgba(0,0,0,0.5)',
      'z-index': 1000,
      'padding': '0.5em 1em 0.75em',
      'border-right': '1px solid white',
      'border-bottom': '1px solid white',
      'border-radius': '0 0 20px 0',
      'backgroundColor': '#ff9900',
      'color': 'white' };


   return function () {
      infoId = infoId || 'laxar-developer-tools-info-box';
      isBrowserWebExtension = isBrowserWebExtension || window.chrome && chrome.runtime && chrome.runtime.id;
      document = hostDocument();

      var cssClassName = 'ax-developer-tools-widget-outline';
      var widgets = document.querySelectorAll('[data-ax-widget-area] > div');
      for (var j = 0; j < widgets.length; ++j) {
         if (widgets[j].classList.contains(cssClassName)) {
            widgets[j].removeEventListener('mouseover', listener, false);
            widgets[j].classList.remove(cssClassName);
         } else
         {
            widgets[j].classList.add(cssClassName);
            widgets[j].addEventListener('mouseover', listener, false);
         }
      }
      var info = document.getElementById(infoId);
      if (info) {
         info.parentNode.removeChild(info);
      }
   };

   ////////////////////////////////////////////////////////////////////////////////////////////////////////

   function listener(event) {
      var widgetClass = this.className.split(/\s+/).filter(function (_) {
         return !!_.match(/(-widget|-activity)$/);
      }).concat('unknown')[0];
      infoLayer().innerHTML = '<strong>' + widgetClass + '</strong><br>ID: ' + this.id;
   }

   //////////////////////////////////////////////////////////////////////////////////////////////////////////////

   function infoLayer() {
      var info = document.getElementById(infoId);

      if (!info) {
         info = document.createElement('div');
         info.setAttribute('id', infoId);
         Object.keys(INFO_LAYER_STYLE).forEach(function (key) {
            info.style[key] = INFO_LAYER_STYLE[key];
         });
         document.body.appendChild(info);
      }
      info.addEventListener('click', function (event) {
         this.remove();
      });
      return info;
   }

   //////////////////////////////////////////////////////////////////////////////////////////////////////////////

   function hostDocument() {
      if (isBrowserWebExtension) {
         return window.document;
      } else
      {
         return (window.opener || window.parent || window).document;
      }
   }
}();

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();




var _react = __webpack_require__(27);var _react2 = _interopRequireDefault(_react);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} /**
opyright 2017 aixigo AG
eleased under the MIT license.
http://www.laxarjs.org
var AxWidgetArea = function (_React$Component) {_inherits(AxWidgetArea, _React$Component);function AxWidgetArea(props) {_classCallCheck(this, AxWidgetArea);var _this = _possibleConstructorReturn(this, (AxWidgetArea.__proto__ || Object.getPrototypeOf(AxWidgetArea)).call(this,
      props));
      _this.props = props;
      _this.register = _this.register.bind(_this);return _this;

   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   _createClass(AxWidgetArea, [{ key: 'register', value: function register(
      div) {
         if (div === null) {return;}
         this.props.areaHelper.register(this.props.name, div);
      }

      ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   }, { key: 'render', value: function render()
      {
         var divStyle = {};
         if (this.props.activeTab === null || this.props.activeTab && this.props.activeTab.name !== this.props.name) {
            divStyle = { display: 'none' };
            this.props.axVisibility.updateAreaVisibility(_defineProperty({}, this.props.name, false));
         } else
         {
            this.props.axVisibility.updateAreaVisibility(_defineProperty({}, this.props.name, true));
         }

         return (
            _react2.default.createElement('div', { 'data-ax-widget-area': this.props.name,
               style: divStyle,
               className: this.props.css,
               ref: this.register }));


      } }]);return AxWidgetArea;}(_react2.default.Component);exports.default = AxWidgetArea;

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });





var _react = __webpack_require__(27);var _react2 = _interopRequireDefault(_react);
var _laxarPatterns = __webpack_require__(217);

var _axWidgetArea = __webpack_require__(400);var _axWidgetArea2 = _interopRequireDefault(_axWidgetArea);

var _grid = __webpack_require__(398);var developerToolsToggleGrid = _interopRequireWildcard(_grid);
var _widgetOutline = __webpack_require__(399);var developerToolsToggleWidgetOutline = _interopRequireWildcard(_widgetOutline);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var toggleWidgetOutlineHelper = developerToolsToggleWidgetOutline.axDeveloperToolsToggleWidgetOutline; /**
                                                                                                        * Copyright 2017 aixigo AG
                                                                                                        * Released under the MIT license.
                                                                                                        * http://www.laxarjs.org
                                                                                                        */var toggleGridHelper = developerToolsToggleGrid.axDeveloperToolsToggleGrid;var injections = ['axContext', 'axEventBus', 'axReactRender', 'axFlowService', 'axAreaHelper', 'axVisibility'];function create(context, eventBus, reactRender, flowService, areaHelper, axVisibility) {
   'use strict';
   console.log(axVisibility);
   var visible = false;
   var HINT_NO_LAXAR_EXTENSION = 'Reload page to enable LaxarJS developer tools!';
   var HINT_DISABLE_TOGGLE_GRID = 'Configure grid settings in application to enable this feature!';
   var HINT_NO_LAXAR_ANYMORE_WIDGET = 'Cannot access LaxarJS host window (or tab).' +
   ' Reopen laxar-developer-tools from LaxarJS host window.';
   var HINT_CONFIGURE_GRID = 'Configure grid settings in application to enable this feature!';

   var TABS = [
   { name: 'events', label: 'Events' },
   { name: 'page', label: 'Page' },
   { name: 'log', label: 'Log' }];


   var model = {
      laxar: true,
      tabs: TABS,
      activeTab: null,
      gridOverlay: false,
      widgetOverlay: false,
      toggleGridTitle: HINT_DISABLE_TOGGLE_GRID,
      noLaxar: HINT_NO_LAXAR_EXTENSION };


   var isBrowserWebExtension = window.chrome && chrome.runtime && chrome.runtime.id;
   var firefoxExtensionMessagePort = void 0;

   if (!window.opener) {
      window.addEventListener('message', function (event) {
         if (!firefoxExtensionMessagePort && event.ports) {
            model.noLaxar = HINT_NO_LAXAR_EXTENSION;
            firefoxExtensionMessagePort = event.ports[0];
            firefoxExtensionMessagePort.start();
            var message = { text: 'messagePortStarted' };
            firefoxExtensionMessagePort.postMessage(JSON.stringify(message));
         } else {
            var channel = JSON.parse(event.detail || event.data);
            if (channel.text === 'reloadedPage') {
               model.gridOverlay = false;
               model.widgetOverlay = false;
               render();
            }
         }
      });
   }

   context.resources = {};

   if (window.opener) {
      model.noLaxar = HINT_NO_LAXAR_ANYMORE_WIDGET;
   }

   _laxarPatterns.resources.handlerFor(context).registerResourceFromFeature(
   'grid',
   {
      onReplace: function onReplace(event) {
         if (event.data === null) {
            model.toggleGridTitle = HINT_CONFIGURE_GRID;
            model.gridOverlay = false;
         } else
         {
            model.toggleGridTitle = '';
         }
      } });



   _laxarPatterns.flags.handlerFor(context).registerFlag(context.features.detailsOn, {
      initialState: model.laxar,
      onChange: function onChange(newState) {
         model.laxar = newState;
      } });


   if (isBrowserWebExtension) {
      /* global chrome */
      chrome.devtools.network.onNavigated.addListener(function () {
         model.gridOverlay = false;
         model.widgetOverlay = false;
         render();
      });
   }

   _laxarPatterns.visibility.handlerFor(context, { onAnyAreaRequest: function onAnyAreaRequest(event) {
         var prefix = context.widget.id + '.';
         var activeTab = model.activeTab;
         return event.visible && activeTab !== null && event.area === prefix + activeTab.name;
      } });

   ////////////////////////////////////////////////////////////////////////////////////////////////////////

   eventBus.subscribe('didNavigate', function (event) {
      var newName = event.data[context.features.tabs.parameter];

      var newTab = TABS.filter(function (_) {return _.name === newName;})[0];
      if (!newTab) {
         return;
      }
      model.activeTab = newTab;
      render();
   });

   eventBus.subscribe('didChangeAreaVisibility.' + context.widget.area, function (event) {
      if (!visible && event.visible) {
         visible = true;
         render();
      }
   });

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   eventBus.subscribe('takeActionRequest.navigation', function () {
      eventBus.publish('willTakeAction.navigation', {
         action: 'navigation' });

      if (model.gridOverlay) {
         toggleGrid();
      }
      if (model.widgetOverlay) {
         toggleWidgetOutline();
      }
      eventBus.publish('didTakeAction.navigation', {
         action: 'navigation' });

      render();
   });

   ////////////////////////////////////////////////////////////////////////////////////////////////////////

   function onClickToggleGrid() {
      if (!context.resources.grid) {return;}
      toggleGrid();
      model.gridOverlay = !model.gridOverlay;
      render();
   }

   ////////////////////////////////////////////////////////////////////////////////////////////////////////

   function onClickToggleWidgetOutline() {
      toggleWidgetOutline();
      model.widgetOverlay = !model.widgetOverlay;
      render();
   }

   ////////////////////////////////////////////////////////////////////////////////////////////////////////

   function toggleGrid() {
      if (window.opener) {
         toggleGridHelper(context.resources.grid);
         return;
      }
      if (isBrowserWebExtension) {
         var event = void 0;
         event = new CustomEvent('toogleGrid', {
            detail: JSON.stringify(context.resources.grid) });

         window.dispatchEvent(event);
      } else
      if (firefoxExtensionMessagePort) {
         var message = { text: 'toogleGrid', data: context.resources.grid };
         firefoxExtensionMessagePort.postMessage(JSON.stringify(message));
      }
   }

   ////////////////////////////////////////////////////////////////////////////////////////////////////////

   function toggleWidgetOutline() {
      if (window.opener) {
         toggleWidgetOutlineHelper();
         return;
      }
      if (isBrowserWebExtension) {
         var event = void 0;
         event = new CustomEvent('widgetOutline', {});
         window.dispatchEvent(event);
      } else
      if (firefoxExtensionMessagePort) {
         var message = { text: 'widgetOutline', data: {} };
         firefoxExtensionMessagePort.postMessage(JSON.stringify(message));
      }
   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   function render() {
      var gridButton = '';
      if (context.resources.grid) {
         gridButton =
         _react2.default.createElement('button', { className: 'btn btn-link',
               title: model.toggleGridTitle,
               type: 'button',
               onClick: onClickToggleGrid },
            _react2.default.createElement('i', { className: 'fa fa-toggle-' + (model.gridOverlay ? 'on' : 'off') }), '\xA0',
            model.gridOverlay ? 'Turn off grid overlay' : 'Turn on grid overlay');

      }

      var widgetOutlineButton =
      _react2.default.createElement('button', {
            className: 'btn btn-link',
            type: 'button',
            onClick: onClickToggleWidgetOutline },
         _react2.default.createElement('i', { className: 'fa fa-toggle-' + (model.widgetOverlay ? 'on' : 'off') }), '\xA0',
         model.widgetOverlay ? 'Turn off widget outline' : 'Turn on widget outline');


      var optionButtons = '';
      if (model.laxar) {
         optionButtons = _react2.default.createElement('div', { className: 'pull-right' },
            gridButton, ' ', widgetOutlineButton);

      }

      var widgetAreas = TABS.map(function (tab) {
         return (
            _react2.default.createElement(_axWidgetArea2.default, {
               key: tab.name,
               areaHelper: areaHelper,
               css: 'app-tab app-tab-page',
               name: tab.name,
               activeTab: model.activeTab,
               axVisibility: axVisibility }));


      });

      var tabListItems = model.tabs.map(function (tab) {
         var url = flowService.constructAbsoluteUrl('tools', { 'tab': tab.name });
         if (model.activeTab && model.activeTab.name === tab.name) {
            return (
               _react2.default.createElement('li', { key: tab.name, className: 'ax-active' },
                  _react2.default.createElement('a', { href: url },
                     tab.label)));

         } else
         {
            return (
               _react2.default.createElement('li', { key: tab.name },
                  _react2.default.createElement('a', { href: url },
                     tab.label)));

         }
      });

      var navTab =
      _react2.default.createElement('ul', { className: 'nav nav-tabs', role: 'tablist' },
         _react2.default.createElement('li', null, _react2.default.createElement('a', { className: 'developer-toolbar-icon',
               title: 'LaxarJS Documentation',
               href: 'http://www.laxarjs.org/docs',
               target: '_blank' })),

         tabListItems,
         model.laxar === false &&
         _react2.default.createElement('li', { className: 'developer-toolbar-hint' }, model.noLaxar));




      reactRender(
      _react2.default.createElement('div', null,
         optionButtons,
         navTab,
         model.laxar && widgetAreas));


   }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   return {
      onDomAvailable: render };

}exports.default =

{
   name: 'developer-toolbar-widget',
   injections: injections,
   create: create };

/***/ }),
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(61)();
// imports


// module
exports.push([module.i, ".developer-toolbar-widget :active,\n.developer-toolbar-widget :focus {\n  outline: none !important; }\n\n.developer-toolbar-widget .fa-toggle-on {\n  color: #5cb85c; }\n\n.developer-toolbar-widget .developer-toolbar-icon {\n  background-repeat: no-repeat;\n  background: url(" + __webpack_require__(438) + ");\n  background-size: contain;\n  border-left: 4px solid white;\n  border-top: 4px solid white;\n  border-right: 4px solid white;\n  width: 40px;\n  height: 36px; }\n\n.developer-toolbar-widget .developer-toolbar-hint {\n  height: 38px;\n  padding: 9px;\n  color: #737373; }\n", ""]);

// exports


/***/ }),
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "assets/title-icon.png";

/***/ }),
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
   aliases: {
      themes: { "default.theme": 0, "default": 0 },
      controls: {},
      layouts: {},
      flows: {},
      pages: {},
      widgets: { "developer-toolbar-widget": 0, "module:./widgets/developer-toolbar-widget": 0 }
   },
   flows: [],
   themes: [
      {
         descriptor: { name: "default.theme" },
         assets: {
            "css/theme.css": {
               url: __webpack_require__( 109 )
            }
         }
      }
   ],
   pages: [],
   layouts: [],
   widgets: [
      {
         descriptor: {
            name: "developer-toolbar-widget",
            description: "Allows to show widget outlines and to display an alignment grid for the host application",
            integration: { technology: "react", type: "widget" },
            styleSource: "scss/developer-toolbar-widget.scss",
            features: {
               $schema: "http://json-schema.org/draft-04/schema#",
               type: "object",
               required: [ "grid" ],
               properties: {
                  grid: {
                     type: "object",
                     required: [ "resource" ],
                     properties: { resource: { type: "string", format: "topic", axRole: "inlet" } },
                     additionalProperties: false
                  },
                  tabs: {
                     type: "object",
                     required: [ "parameter" ],
                     properties: {
                        parameter: { type: "string", format: "topic", "default": "events" }
                     },
                     additionalProperties: false
                  },
                  detailsOn: {
                     type: "array",
                     description: "Publish the state if a LaxarJS application is running in the inspected window.",
                     items: {
                        type: "string",
                        format: "flag-topic",
                        axPattern: "flag",
                        description: "The topic through which to publish the current state."
                     }
                  }
               },
               additionalProperties: false
            },
            controls: [],
            compatibility: []
         },
         module: __webpack_require__( 401 ),
         assets: {
            "default.theme": {
               "scss/developer-toolbar-widget.scss": {
                  url: __webpack_require__( 457 )
               }
            }
         }
      }
   ],
   controls: []
};

/***/ }),
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

var resource = __webpack_require__( 464 );
module.exports = typeof resource === 'string' ? resource : null;

/***/ }),
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(408);
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__(65)(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js?{\"includePaths\":[\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/laxar-uikit/themes/default.theme/scss\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/laxar-uikit/scss\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/node_modules/bootstrap-sass/assets/stylesheets\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/node_modules\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/lib/laxar-uikit/scss\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/lib/laxar-uikit/themes/default.theme/scss\"]}!./developer-toolbar-widget.scss", function() {
			var newContent = require("!!./../../../../node_modules/css-loader/index.js!./../../../../node_modules/sass-loader/index.js?{\"includePaths\":[\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/laxar-uikit/themes/default.theme/scss\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/laxar-uikit/scss\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/node_modules/bootstrap-sass/assets/stylesheets\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/node_modules\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/lib/laxar-uikit/scss\",\"/export/source/jschulte/laxar-browser-extensions/shop-demo/includes/widgets/laxar/laxar-developer-tools-widget/content/lib/laxar-uikit/themes/default.theme/scss\"]}!./developer-toolbar-widget.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
(function (fixtures, adapter, artifacts, descriptor) {
   fixtures.adapter = adapter;
   fixtures.artifacts = artifacts;
   fixtures.descriptor = descriptor;
})(
__webpack_require__(28).fixtures,
__webpack_require__(38),
__webpack_require__(392),
// cannot simply read descriptor from artifacts because the features schema may have been stripped:
__webpack_require__(351));

; /**
  * Copyright 2016 aixigo AG
  * Released under the MIT license.
  * http://www.laxarjs.org
  */
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
__webpack_require__(351),
__webpack_require__(28),
__webpack_require__(38)], __WEBPACK_AMD_DEFINE_RESULT__ = function (descriptor, axMocks, axReactAdapter) {
   'use strict';

   describe('The developer-toolbar-widget', function () {
      var widgetDom = void 0;

      beforeEach(axMocks.createSetupForWidget(descriptor, { adapter: axReactAdapter }));
      beforeEach(function () {
         axMocks.widget.configure({
            grid: {
               resource: 'gridSettings' } });


      });
      beforeEach(axMocks.widget.load);
      beforeEach(function () {
         widgetDom = axMocks.widget.render();
      });

      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      afterEach(axMocks.tearDown);

      ////////////////////////////////////////////////////////////////////////////////////////////////////////

      it('allows for the grid visualization layer to be configured through a resource (R2.2)', function () {
         console.log(axMocks);
         expect(axMocks.widget.axEventBus.subscribe).toHaveBeenCalledWith('didReplace.gridSettings', jasmine.any(Function));
      });

      ////////////////////////////////////////////////////////////////////////////////////////////////////////

   });
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ })
/******/ ]);
//# sourceMappingURL=developer-toolbar-widget.spec.bundle.js.map